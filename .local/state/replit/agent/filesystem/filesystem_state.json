{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Real Estate Investment Platform\n\n## Overview\n\nThis is a full-stack real estate investment platform built with React, TypeScript, Express.js, and PostgreSQL. The application provides role-based dashboards for investors, contractors, consultants, and developers to discover, analyze, and manage real estate projects.\n\n## Recent Changes (July 29, 2025)\n\n- **Complete User Authentication System**: Implemented comprehensive authentication with user registration, login, logout, and session management\n- **Account Settings Page**: Created full-featured account management with profile editing, password changes, email preferences, and account information display\n- **Database Integration**: Added PostgreSQL database with users, sessions, and user_preferences tables using Drizzle ORM\n- **Secure Authentication**: Implemented bcrypt password hashing, session-based authentication, and secure cookie management\n- **Role-Based Registration**: Users can select their role (Investor, Contractor, Consultant, Developer, Supplier) during registration\n- **Authentication Routes**: Added login page (/login), account settings (/account-settings), and API endpoints for authentication\n- **Header Integration**: Updated navigation header to include account settings link and proper logout functionality\n- **Form Validation**: Comprehensive form validation using Zod schemas for registration, login, and profile updates\n- **Role-Customized Project Profiles**: Created role-specific project profile pages tailored to each user type's workflow and data needs\n- **Universal Project Linking**: Made project names clickable throughout the platform, linking to detailed project profiles from all modules\n- **Color Consistency Fix**: Standardized supplier role color to blue theme across all components (was inconsistently orange/amber in some areas)\n- **Role-Specific Header Navigation**: Implemented dynamic header navigation where Home/Dashboard/Projects links adapt based on selected user role\n- **Complete Navigation System**: All five roles now have full navigation support with role-specific routing for dashboards and project pages\n- **Enhanced Role Persistence**: Improved role context maintenance across navigation with robust localStorage management and role change events\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nTypography: Raleway font family used throughout the application.\nBranding colors: #0a1b3d (dark blue), #00a7b2 (teal), #2f3a45 (gray), #f9fafc (light background).\nDesign reference: Clean, modern design inspired by sectorintelligence.ai with minimalist navigation, split hero layout, and professional typography.\nBranding: Custom Sector Intelligence logo featuring an eye with circuit board elements implemented throughout the platform.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state\n- **UI Framework**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Build Tool**: Vite with hot module replacement\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling\n- **Development**: Hot reload with tsx for TypeScript execution\n\n### Database Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: PostgreSQL (configured for Neon Database)\n- **Schema**: Type-safe schema definitions with Zod validation\n- **Migrations**: Drizzle Kit for schema management\n\n## Key Components\n\n### Role-Based System\nThe application supports five distinct user roles:\n- **Investor**: Focus on ROI analysis, market comparisons, investment reports\n- **Contractor**: Access to project pipeline, tender alerts, construction timelines\n- **Consultant**: Market analysis, feasibility studies, trend reports\n- **Developer**: Site analysis, zoning data, competition mapping\n- **Supplier**: Supply opportunities, material demand tracking, procurement schedules\n\nEach role has customized features and data views tailored to their specific needs.\n\n### Project Management\n- Comprehensive project database with detailed metadata\n- Advanced filtering and search capabilities\n- Project comparison tools\n- Favorite projects and saved searches\n- Export functionality for reports\n\n### Market Intelligence\n- Real-time market indicators\n- Trend analysis and alerts\n- Location-based insights\n- Sector-specific data\n\n### User Interface\n- Responsive design with mobile-first approach\n- Dark/light theme support\n- Accessibility features using Radix UI primitives\n- Consistent design system with role-based color coding\n\n## Data Flow\n\n1. **Homepage Discovery**: Users start with latest projects, trending sectors, and featured content\n2. **Role Selection**: Users select their role which customizes the entire experience\n3. **Search & Filter**: Advanced filtering with real-time updates via React Query\n4. **Dashboard**: Personalized dashboards with role-specific widgets and data\n5. **Project Details**: Detailed project views with comparison capabilities\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n- **@tanstack/react-query**: Server state management and caching\n- **@radix-ui/***: Accessible UI component primitives\n- **drizzle-orm**: Type-safe ORM with PostgreSQL support\n- **zod**: Runtime type validation and schema validation\n\n### Development Tools\n- **Vite**: Fast build tool with HMR\n- **TypeScript**: Type safety across the stack\n- **Tailwind CSS**: Utility-first styling\n- **ESBuild**: Fast bundling for production builds\n\n### UI Components\n- Complete shadcn/ui component library\n- Custom components for project cards, market indicators\n- Form handling with React Hook Form and Zod validation\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds optimized React bundle to `dist/public`\n- **Backend**: ESBuild bundles Express server to `dist/index.js`\n- **Database**: Drizzle migrations in `migrations/` directory\n\n### Environment Configuration\n- Development: Hot reload for both frontend and backend\n- Production: Optimized builds with static file serving\n- Database: PostgreSQL connection via `DATABASE_URL` environment variable\n\n### File Structure\n- `client/`: React frontend application\n- `server/`: Express.js backend with API routes\n- `shared/`: Shared TypeScript schemas and types\n- `migrations/`: Database migration files\n\nThe application uses a monorepo structure with shared types between frontend and backend, ensuring type safety across the entire stack. The storage layer includes both in-memory implementation for development and database integration for production.","size_bytes":6844},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { searchFiltersSchema, loginSchema, registerSchema, updateUserProfileSchema, changePasswordSchema } from \"@shared/schema\";\nimport cookieParser from 'cookie-parser';\nimport { getSessionFromRequest } from \"./auth\";\n\n// Middleware to authenticate user\nasync function authenticateUser(req: any, res: any, next: any) {\n  try {\n    const sessionId = getSessionFromRequest(req);\n    if (!sessionId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    const authData = await storage.getValidSession(sessionId);\n    if (!authData) {\n      return res.status(401).json({ message: \"Invalid or expired session\" });\n    }\n\n    req.user = authData.user;\n    req.session = authData.session;\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n  // Get all projects with optional filtering\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const filters = req.query;\n      const validatedFilters = searchFiltersSchema.partial().parse(filters);\n      const projects = await storage.getProjects(validatedFilters);\n      res.json(projects);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid filter parameters\" });\n    }\n  });\n\n  // Get single project\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const project = await storage.getProject(id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project ID\" });\n    }\n  });\n\n  // Get market indicators\n  app.get(\"/api/market-indicators\", async (req, res) => {\n    try {\n      const indicators = await storage.getMarketIndicators();\n      res.json(indicators);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch market indicators\" });\n    }\n  });\n\n  // Get user preferences\n  app.get(\"/api/preferences/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const preferences = await storage.getUserPreferences(sessionId);\n      if (!preferences) {\n        return res.status(404).json({ message: \"Preferences not found\" });\n      }\n      res.json(preferences);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  // Create or update user preferences\n  app.post(\"/api/preferences\", async (req, res) => {\n    try {\n      const { sessionId, ...preferences } = req.body;\n      \n      const existing = await storage.getUserPreferences(sessionId);\n      let result;\n      \n      if (existing) {\n        result = await storage.updateUserPreferences(sessionId, preferences);\n      } else {\n        result = await storage.createUserPreferences({ sessionId, ...preferences });\n      }\n      \n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid preferences data\" });\n    }\n  });\n\n  // Get filter options (for dropdowns)\n  app.get(\"/api/filter-options\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      \n      const countries = Array.from(new Set(projects.map(p => p.country)));\n      const sectors = Array.from(new Set(projects.map(p => p.sector)));\n      const projectTypes = Array.from(new Set(projects.map(p => p.projectType)));\n      const cities = Array.from(new Set(projects.map(p => p.city)));\n      const districts = Array.from(new Set(projects.map(p => p.district)));\n      const statuses = Array.from(new Set(projects.map(p => p.status)));\n      \n      // Country-specific city mappings\n      const countryToCities: Record<string, string[]> = {\n        \"United Arab Emirates\": [\n          \"Dubai\",\n          \"Abu Dhabi\", \n          \"Sharjah\",\n          \"Ajman\",\n          \"Ras Al Khaimah\",\n          \"Fujairah\"\n        ],\n        \"Saudi Arabia\": [\n          \"Riyadh\",\n          \"Jeddah\",\n          \"Mecca\",\n          \"Medina\",\n          \"Dammam\",\n          \"Khobar\",\n          \"Tabuk\",\n          \"Buraidah\",\n          \"Khamis Mushait\",\n          \"Hail\"\n        ]\n      };\n\n      // City to district mappings\n      const cityToDistricts: Record<string, string[]> = {\n        \"Dubai\": [\n          \"Downtown Dubai\",\n          \"Dubai Marina\",\n          \"Jumeirah\",\n          \"Business Bay\",\n          \"DIFC\",\n          \"Dubai Hills\",\n          \"Arabian Ranches\",\n          \"Palm Jumeirah\"\n        ],\n        \"Abu Dhabi\": [\n          \"Abu Dhabi Island\",\n          \"Al Reem Island\",\n          \"Yas Island\",\n          \"Saadiyat Island\",\n          \"Al Raha\",\n          \"Khalifa City\",\n          \"Mohammed Bin Zayed City\"\n        ],\n        \"Riyadh\": [\n          \"King Fahd District\",\n          \"Olaya District\",\n          \"Al Malaz\",\n          \"Diplomatic Quarter\",\n          \"King Abdul Aziz District\",\n          \"Al Worood\",\n          \"Al Nakheel\"\n        ]\n      };\n      \n      res.json({\n        countries,\n        sectors,\n        projectTypes,\n        cities,\n        districts,\n        statuses,\n        countryToCities,\n        cityToDistricts\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch filter options\" });\n    }\n  });\n\n  // Get trending sectors\n  app.get(\"/api/trending-sectors\", async (req, res) => {\n    try {\n      const sectors = await storage.getTrendingSectors();\n      res.json(sectors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trending sectors\" });\n    }\n  });\n\n  // Investor-specific endpoints\n  app.get(\"/api/cities/:country\", async (req, res) => {\n    try {\n      const { country } = req.params;\n      const projects = await storage.getProjects();\n      const cities = Array.from(new Set(projects\n        .filter(p => p.country === country)\n        .map(p => p.city)\n      )).sort();\n      res.json(cities);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/districts/:country/:city\", async (req, res) => {\n    try {\n      const { country, city } = req.params;\n      const projects = await storage.getProjects();\n      const districts = Array.from(new Set(projects\n        .filter(p => p.country === country && p.city === city)\n        .map(p => p.district)\n      )).sort();\n      res.json(districts);\n    } catch (error) {\n      console.error(\"Error fetching districts:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Authentication Routes\n  \n  // Register new user\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n      \n      // Create new user\n      const user = await storage.createUser({\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        password: userData.password,\n        selectedRole: userData.selectedRole,\n      });\n      \n      // Create session\n      const session = await storage.createSession(user.id);\n      \n      // Set cookie\n      res.cookie('session', session.id, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      });\n      \n      // Return user data (excluding password)\n      const { passwordHash, ...userResponse } = user;\n      res.status(201).json({ user: userResponse });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid registration data\", errors: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  // Login user\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginData = loginSchema.parse(req.body);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(loginData.email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const { verifyPassword } = await import('./auth');\n      const isValidPassword = await verifyPassword(loginData.password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Create session\n      const session = await storage.createSession(user.id);\n      \n      // Set cookie\n      res.cookie('session', session.id, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      });\n      \n      // Return user data (excluding password)\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid login data\" });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Logout user\n  app.post(\"/api/auth/logout\", authenticateUser, async (req: any, res) => {\n    try {\n      const sessionId = getSessionFromRequest(req);\n      if (sessionId) {\n        await storage.deleteSession(sessionId);\n      }\n      \n      res.clearCookie('session');\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", authenticateUser, async (req: any, res) => {\n    try {\n      const { passwordHash, ...userResponse } = req.user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user data\" });\n    }\n  });\n\n  // Account Settings Routes\n  \n  // Update user profile\n  app.put(\"/api/account/profile\", authenticateUser, async (req: any, res) => {\n    try {\n      const updates = updateUserProfileSchema.parse(req.body);\n      const updatedUser = await storage.updateUserProfile(req.user.id, updates);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid profile data\", errors: error.errors });\n      }\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Change password\n  app.put(\"/api/account/password\", authenticateUser, async (req: any, res) => {\n    try {\n      const passwordData = changePasswordSchema.parse(req.body);\n      const success = await storage.changeUserPassword(\n        req.user.id,\n        passwordData.currentPassword,\n        passwordData.newPassword\n      );\n      \n      if (!success) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid password data\", errors: error.errors });\n      }\n      console.error(\"Password change error:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12113},"server/storage.ts":{"content":"import { projects, userPreferences, marketIndicators, users, sessions, type Project, type InsertProject, type UserPreferences, type InsertUserPreferences, type MarketIndicator, type InsertMarketIndicator, type SearchFilters, type User, type InsertUser, type Session, type InsertSession, type UpdateUserProfile } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { hashPassword, verifyPassword, generateSessionId, getSessionExpiry } from \"./auth\";\n\nexport interface IStorage {\n  // Projects\n  getProjects(filters?: SearchFilters): Promise<Project[]>;\n  getProject(id: number): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  \n  // User Preferences\n  getUserPreferences(sessionId: string): Promise<UserPreferences | undefined>;\n  createUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;\n  updateUserPreferences(sessionId: string, preferences: Partial<InsertUserPreferences>): Promise<UserPreferences | undefined>;\n  \n  // Market Indicators\n  getMarketIndicators(): Promise<MarketIndicator[]>;\n  createMarketIndicator(indicator: InsertMarketIndicator): Promise<MarketIndicator>;\n  \n  // Trending Sectors\n  getTrendingSectors(): Promise<any[]>;\n  \n  // User Management\n  createUser(userData: { email: string; firstName: string; lastName: string; password: string; selectedRole?: string }): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  updateUserProfile(id: string, updates: UpdateUserProfile): Promise<User | undefined>;\n  changeUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean>;\n  \n  // Session Management\n  createSession(userId: string): Promise<Session>;\n  getSession(sessionId: string): Promise<Session | undefined>;\n  deleteSession(sessionId: string): Promise<void>;\n  getValidSession(sessionId: string): Promise<{ user: User; session: Session } | null>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<number, Project>;\n  private userPreferences: Map<string, UserPreferences>;\n  private marketIndicators: Map<number, MarketIndicator>;\n  private currentProjectId: number;\n  private currentUserPrefId: number;\n  private currentIndicatorId: number;\n\n  constructor() {\n    this.projects = new Map();\n    this.userPreferences = new Map();\n    this.marketIndicators = new Map();\n    this.currentProjectId = 1;\n    this.currentUserPrefId = 1;\n    this.currentIndicatorId = 1;\n    \n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed projects\n    const sampleProjects: InsertProject[] = [\n      {\n        name: \"Dubai Marina Tower\",\n        description: \"Premium residential tower in Dubai Marina with sea views\",\n        location: \"Dubai Marina\",\n        city: \"Dubai\",\n        district: \"Dubai Marina\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        subsector: \"Luxury Residential\",\n        projectType: \"Residential Tower\",\n        contractType: \"Design-Build\",\n        status: \"Under Construction\",\n        investment: 285,\n        expectedRoi: 18.5,\n        size: 950000,\n        capacity: \"420 Units\",\n        residentialType: \"High-End Apartments\",\n        residentialClass: \"Ultra-Luxury\",\n        rating: \"5-Star\",\n        category: \"Premium Residential Development\",\n        value: \"$285 Million\",\n        completionDate: \"Q3 2025\",\n        briefBackground: \"Dubai Marina Tower is an iconic residential development offering panoramic views of Dubai Marina and the Arabian Gulf. The project features contemporary architecture, world-class amenities, and represents excellent investment opportunity in one of Dubai's most sought-after waterfront communities.\",\n        imageUrl: \"https://images.unsplash.com/photo-1512917774080-9991f1c4c750?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Marina Views\", \"Private Beach Access\", \"Infinity Pool\", \"Premium Gym\", \"24/7 Concierge\", \"Yacht Club Access\", \"Smart Home Technology\"],\n        isLuxury: true,\n        isWaterfront: true,\n        isSustainable: false,\n      },\n      {\n        name: \"Azure Residences\",\n        description: \"Luxury residential tower with premium amenities\",\n        location: \"Downtown Dubai\",\n        city: \"Dubai\",\n        district: \"Downtown Dubai\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        subsector: \"Luxury Residential\",\n        projectType: \"Residential Tower\",\n        contractType: \"Design-Build\",\n        status: \"Under Construction\",\n        investment: 28,\n        expectedRoi: 16.2,\n        size: 850000,\n        capacity: \"320 Units\",\n        residentialType: \"High-End Apartments\",\n        residentialClass: \"Ultra-Luxury\",\n        rating: \"5-Star\",\n        category: \"Premium Residential Development\",\n        value: \"$450 Million\",\n        completionDate: \"Q3 2025\",\n        briefBackground: \"Azure Residences represents the pinnacle of luxury living in Downtown Dubai, featuring state-of-the-art amenities and world-class architectural design. The project caters to discerning investors and residents seeking premium lifestyle experiences in one of Dubai's most prestigious locations.\",\n        imageUrl: \"https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Luxury Finishes\", \"Infinity Pool\", \"Premium Gym\", \"24/7 Concierge\", \"Valet Parking\", \"Private Gardens\"],\n        isLuxury: true,\n        isWaterfront: false,\n        isSustainable: false,\n      },\n      {\n        name: \"Tech Hub Central\",\n        description: \"Modern commercial office complex for tech companies\",\n        location: \"Business Bay\",\n        city: \"Dubai\",\n        district: \"Business Bay\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        projectType: \"Commercial\",\n        status: \"Planning\",\n        investment: 85,\n        expectedRoi: 21.8,\n        size: 1200000,\n        completionDate: \"Q1 2027\",\n        imageUrl: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Smart Building\", \"Co-working Spaces\", \"Tech Infrastructure\", \"Conference Centers\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Coastal Resort & Spa\",\n        description: \"Luxury beachfront resort with world-class amenities\",\n        location: \"Jumeirah Beach\",\n        city: \"Dubai\",\n        district: \"Jumeirah\",\n        country: \"United Arab Emirates\",\n        sector: \"Hospitality\",\n        projectType: \"Resort\",\n        status: \"Completed\",\n        investment: 125,\n        currentRoi: 14.6,\n        size: 2000000,\n        completionDate: \"2023\",\n        imageUrl: \"https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Private Beach\", \"Spa\", \"Multiple Restaurants\", \"Golf Course\"],\n        isLuxury: true,\n        isWaterfront: true,\n        isSustainable: false,\n      },\n      {\n        name: \"Grand Shopping District\",\n        description: \"Premier retail and entertainment destination\",\n        location: \"Dubai Mall District\",\n        city: \"Dubai\",\n        district: \"Downtown Dubai\",\n        country: \"United Arab Emirates\",\n        sector: \"Retail\",\n        projectType: \"Mixed Use\",\n        status: \"Under Construction\",\n        investment: 95,\n        expectedRoi: 19.4,\n        size: 1500000,\n        completionDate: \"Q4 2025\",\n        imageUrl: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Retail Spaces\", \"Entertainment Zone\", \"Food Court\", \"Cinema\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: false,\n      },\n      {\n        name: \"Green Valley Communities\",\n        description: \"Sustainable residential development with green spaces\",\n        location: \"Dubai South\",\n        city: \"Dubai\",\n        district: \"Dubai South\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        projectType: \"Residential\",\n        status: \"Planning\",\n        investment: 52,\n        expectedRoi: 17.9,\n        size: 900000,\n        completionDate: \"Q2 2026\",\n        imageUrl: \"https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Solar Panels\", \"Green Spaces\", \"Community Garden\", \"Energy Efficient\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Innovation Tower\",\n        description: \"Premium office tower in the financial district\",\n        location: \"DIFC\",\n        city: \"Dubai\",\n        district: \"DIFC\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        projectType: \"Commercial\",\n        status: \"Under Construction\",\n        investment: 135,\n        expectedRoi: 23.1,\n        size: 1800000,\n        completionDate: \"Q1 2026\",\n        imageUrl: \"https://images.unsplash.com/photo-1582407947304-fd86f028f716?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Premium Office Spaces\", \"Sky Lobby\", \"Smart Systems\", \"Executive Facilities\"],\n        isLuxury: true,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Metro Extension Phase 2\",\n        description: \"Mass transit infrastructure expansion connecting major districts\",\n        location: \"Dubai Metro\",\n        city: \"Dubai\",\n        district: \"Multi-District\",\n        country: \"United Arab Emirates\",\n        sector: \"Infrastructure\",\n        projectType: \"Transportation\",\n        status: \"Under Construction\",\n        investment: 245,\n        expectedRoi: 14.5,\n        size: 2500000,\n        completionDate: \"Q4 2026\",\n        imageUrl: \"https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Metro Stations\", \"Rail Lines\", \"Transit Hubs\", \"Smart Ticketing\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Solar Power Plant\",\n        description: \"Renewable energy facility with advanced solar technology\",\n        location: \"Dubai South\",\n        city: \"Dubai\",\n        district: \"Dubai South\",\n        country: \"United Arab Emirates\",\n        sector: \"Energy\",\n        subsector: \"Renewable Energy\",\n        projectType: \"Solar Power Plant\",\n        contractType: \"EPC Contract\",\n        status: \"Tender Open\",\n        investment: 320,\n        expectedRoi: 18.2,\n        size: 3200000,\n        capacity: \"200 MW\",\n        rating: \"Grid-Connected\",\n        category: \"Utility-Scale Solar Development\",\n        value: \"$320 Million\",\n        completionDate: \"Q1 2027\",\n        briefBackground: \"This utility-scale solar power plant will provide clean energy to over 50,000 homes in Dubai. The project includes advanced photovoltaic technology, energy storage systems, and smart grid integration. Contractors will be responsible for the complete EPC delivery including foundation work, structural installation, electrical systems, and grid connection.\",\n        imageUrl: \"https://images.unsplash.com/photo-1508514177221-188b1cf16e9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Solar Panels\", \"Energy Storage\", \"Smart Grid\", \"Monitoring Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Metro Extension Phase 3\",\n        description: \"Advanced metro rail construction project connecting airport to city center\",\n        location: \"Dubai Metro Line\",\n        city: \"Dubai\",\n        district: \"Multi-District\",\n        country: \"United Arab Emirates\",\n        sector: \"Infrastructure\",\n        subsector: \"Mass Transit\",\n        projectType: \"Metro Rail Construction\",\n        contractType: \"Design-Build-Finance\",\n        status: \"Under Construction\",\n        investment: 680,\n        expectedRoi: 16.8,\n        size: 8500000,\n        capacity: \"85 km Track Length\",\n        rating: \"Fully Automated\",\n        category: \"Heavy Rail Transit System\",\n        value: \"$680 Million\",\n        completionDate: \"Q4 2026\",\n        briefBackground: \"Phase 3 of Dubai Metro extension includes 15 new stations and 25 km of elevated and underground track. This complex project requires expertise in tunnel boring, elevated construction, station architecture, and advanced rail systems. Contractors will handle civil works, structural steel, MEP systems, and track installation with strict safety and quality standards.\",\n        imageUrl: \"https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Underground Tunnels\", \"Elevated Tracks\", \"Modern Stations\", \"Automated Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Residential Complex Al Noor\",\n        description: \"Large-scale affordable housing development with modern amenities\",\n        location: \"Al Qusais\",\n        city: \"Dubai\",\n        district: \"Al Qusais\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        subsector: \"Affordable Housing\",\n        projectType: \"Multi-Family Residential\",\n        contractType: \"Traditional Contract\",\n        status: \"Under Construction\",\n        investment: 180,\n        expectedRoi: 14.2,\n        size: 1500000,\n        capacity: \"800 Units\",\n        residentialType: \"Affordable Apartments\",\n        residentialClass: \"Mid-Range\",\n        rating: \"3-Star\",\n        category: \"Community Housing Development\",\n        value: \"$180 Million\",\n        completionDate: \"Q2 2025\",\n        briefBackground: \"Al Noor Residential Complex is a government-backed affordable housing initiative providing quality homes for middle-income families. The project spans 15 hectares and includes schools, healthcare facilities, and recreational areas. Construction involves 12 residential blocks, parking structures, and community facilities with emphasis on cost-effective building methods and sustainable construction practices.\",\n        imageUrl: \"https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Community Facilities\", \"Children's Play Areas\", \"Sports Courts\", \"Green Landscaping\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Industrial Warehouse Complex\",\n        description: \"Modern logistics and distribution center with automated systems\",\n        location: \"Dubai South Logistics District\",\n        city: \"Dubai\",\n        district: \"Dubai South\",\n        country: \"United Arab Emirates\",\n        sector: \"Industry\",\n        subsector: \"Logistics & Warehousing\",\n        projectType: \"Industrial Complex\",\n        contractType: \"Fast-Track Construction\",\n        status: \"Tender Open\",\n        investment: 95,\n        expectedRoi: 22.5,\n        size: 750000,\n        capacity: \"500,000 sqft\",\n        rating: \"Grade A\",\n        category: \"Automated Distribution Center\",\n        value: \"$95 Million\",\n        completionDate: \"Q3 2025\",\n        briefBackground: \"State-of-the-art logistics facility designed for e-commerce and distribution operations. Features include automated storage systems, loading docks, temperature-controlled zones, and advanced fire safety systems. The construction requires specialized industrial building techniques, heavy-duty foundations, and integration of automated material handling equipment.\",\n        imageUrl: \"https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Automated Storage\", \"Loading Docks\", \"Climate Control\", \"Fire Safety Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Manufacturing Hub\",\n        description: \"Advanced manufacturing facility for automotive and aerospace\",\n        location: \"Dubai Industrial City\",\n        city: \"Dubai\",\n        district: \"Dubai Industrial City\",\n        country: \"United Arab Emirates\",\n        sector: \"Industry\",\n        projectType: \"Manufacturing\",\n        status: \"Under Construction\",\n        investment: 180,\n        expectedRoi: 20.1,\n        size: 1500000,\n        completionDate: \"Q2 2026\",\n        imageUrl: \"https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Production Lines\", \"Quality Control\", \"Research Labs\", \"Logistics Center\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"Petrochemical Complex\",\n        description: \"Advanced petrochemical processing facility for refined products\",\n        location: \"Jubail Industrial City\",\n        city: \"Jubail\",\n        district: \"Jubail Industrial City\",\n        country: \"Saudi Arabia\",\n        sector: \"Oil & Gas\",\n        projectType: \"Petrochemical Plants\",\n        status: \"Under Construction\",\n        investment: 420,\n        expectedRoi: 22.5,\n        size: 5000000,\n        completionDate: \"Q3 2027\",\n        imageUrl: \"https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Processing Units\", \"Storage Tanks\", \"Quality Labs\", \"Safety Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: false,\n      },\n      {\n        name: \"Riyadh Metro Project\",\n        description: \"Comprehensive metro system connecting all major districts in Riyadh\",\n        location: \"Riyadh Metro Network\",\n        city: \"Riyadh\",\n        district: \"Multi-District\",\n        country: \"Saudi Arabia\",\n        sector: \"Infrastructure\",\n        projectType: \"Transportation\",\n        status: \"Nearing Completion\",\n        investment: 680,\n        expectedRoi: 16.8,\n        size: 8500000,\n        completionDate: \"Q2 2025\",\n        imageUrl: \"https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Metro Lines\", \"Stations\", \"Depot Facilities\", \"Control Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        name: \"NEOM Smart City Phase 1\",\n        description: \"Futuristic smart city development with renewable energy focus\",\n        location: \"NEOM\",\n        city: \"NEOM\",\n        district: \"The Line\",\n        country: \"Saudi Arabia\",\n        sector: \"Real Estate\",\n        projectType: \"Mixed-use\",\n        status: \"Planning\",\n        investment: 1200,\n        expectedRoi: 28.5,\n        size: 12000000,\n        completionDate: \"Q4 2028\",\n        imageUrl: \"https://images.unsplash.com/photo-1480714378408-67cf0d13bc1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Smart Infrastructure\", \"Renewable Energy\", \"AI Integration\", \"Sustainable Design\"],\n        isLuxury: true,\n        isWaterfront: true,\n        isSustainable: true,\n      },\n      {\n        id: 9,\n        name: \"Highway Bridge Construction\",\n        description: \"Major bridge infrastructure project connecting two emirates with advanced engineering\",\n        location: \"Dubai-Sharjah Border\",\n        city: \"Dubai\",\n        district: \"Dubai Border\",\n        country: \"United Arab Emirates\",\n        sector: \"Infrastructure\",\n        subsector: \"Transportation\",\n        projectType: \"Bridge Construction\",\n        contractType: \"Design-Build-Maintain\",\n        status: \"Under Construction\",\n        investment: 420,\n        expectedRoi: 15.8,\n        size: 2500000,\n        capacity: \"8-Lane Bridge\",\n        rating: \"Heavy Traffic\",\n        category: \"Major Infrastructure Project\",\n        value: \"$420 Million\",\n        completionDate: \"Q2 2026\",\n        briefBackground: \"This strategic bridge project will reduce traffic congestion between Dubai and Sharjah while providing a vital economic corridor. The 2.5km bridge features advanced seismic resistance, smart traffic management systems, and sustainable construction practices. Contractors must demonstrate expertise in marine construction, precast concrete, and complex logistics.\",\n        imageUrl: \"https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Seismic Resistant\", \"Smart Traffic Systems\", \"Marine Construction\", \"Precast Concrete\"],\n        isLuxury: false,\n        isWaterfront: true,\n        isSustainable: true,\n      },\n      {\n        id: 10,\n        name: \"Hospital Complex Al Khaleej\",\n        description: \"State-of-the-art medical facility with 500-bed capacity and specialized departments\",\n        location: \"Dubai Healthcare City\",\n        city: \"Dubai\",\n        district: \"Healthcare City\",\n        country: \"United Arab Emirates\",\n        sector: \"Healthcare\",\n        subsector: \"Medical Facilities\",\n        projectType: \"Hospital Construction\",\n        contractType: \"Traditional Contract\",\n        status: \"Tender Open\",\n        investment: 280,\n        expectedRoi: 12.5,\n        size: 1800000,\n        capacity: \"500 Beds\",\n        rating: \"Tier 1 Medical\",\n        category: \"Healthcare Infrastructure\",\n        value: \"$280 Million\",\n        completionDate: \"Q4 2026\",\n        briefBackground: \"Al Khaleej Hospital will be a comprehensive medical center featuring emergency care, surgery suites, ICU facilities, and specialized departments. The project requires expertise in medical construction standards, clean room environments, advanced MEP systems, and healthcare-specific infrastructure. Contractors must comply with strict medical facility regulations and international healthcare standards.\",\n        imageUrl: \"https://images.unsplash.com/photo-1586773860418-d37222d8eaf8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Clean Room Construction\", \"Medical Gas Systems\", \"Emergency Power\", \"Specialized HVAC\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        id: 11,\n        name: \"Shopping Mall Emirates Central\", \n        description: \"Large-scale retail and entertainment complex with modern architecture\",\n        location: \"Al Barsha\",\n        city: \"Dubai\",\n        district: \"Al Barsha\",\n        country: \"United Arab Emirates\",\n        sector: \"Retail\",\n        subsector: \"Shopping Centers\",\n        projectType: \"Commercial Complex\",\n        contractType: \"Fast-Track Construction\",\n        status: \"Planning\",\n        investment: 350,\n        expectedRoi: 18.9,\n        size: 2200000,\n        capacity: \"300 Retail Units\",\n        rating: \"Regional Mall\",\n        category: \"Commercial Development\",\n        value: \"$350 Million\",\n        completionDate: \"Q1 2027\",\n        briefBackground: \"Emirates Central Mall will feature over 300 retail outlets, entertainment zones, food courts, and a multiplex cinema. The project emphasizes sustainable construction, energy efficiency, and advanced building management systems. Contractors will handle complex retail construction including specialized store fit-outs, large span structures, and integrated parking systems.\",\n        imageUrl: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Large Span Construction\", \"Retail Fit-outs\", \"Entertainment Zones\", \"Smart Building Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        id: 12,\n        name: \"Data Center Dubai South\",\n        description: \"Tier 3 data center facility with advanced cooling and security systems\",\n        location: \"Dubai South Free Zone\",\n        city: \"Dubai\",\n        district: \"Dubai South\",\n        country: \"United Arab Emirates\",\n        sector: \"Technology\",\n        subsector: \"Data Centers\",\n        projectType: \"Data Center Construction\",\n        contractType: \"EPC Contract\",\n        status: \"Under Construction\",\n        investment: 150,\n        expectedRoi: 22.1,\n        size: 500000,\n        capacity: \"10 MW\",\n        rating: \"Tier 3\",\n        category: \"Critical Infrastructure\",\n        value: \"$150 Million\",\n        completionDate: \"Q3 2025\",\n        briefBackground: \"This mission-critical data center will provide cloud services and enterprise hosting with 99.98% uptime guarantee. The facility features redundant power systems, advanced cooling technology, and military-grade security. Construction requires expertise in raised floor systems, precision cooling, electrical infrastructure, and security installations.\",\n        imageUrl: \"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Raised Floor Systems\", \"Precision Cooling\", \"Redundant Power\", \"Security Systems\"],\n        isLuxury: false,\n        isWaterfront: false,\n        isSustainable: true,\n      },\n      {\n        id: 13,\n        name: \"Dubai Creek Harbour Residences\",\n        description: \"Waterfront residential development in Dubai Creek Harbour with marina access and luxury amenities\",\n        location: \"Dubai Creek Harbour\",\n        city: \"Dubai\",\n        district: \"Dubai Creek Harbour\",\n        country: \"United Arab Emirates\",\n        sector: \"Real Estate\",\n        subsector: \"Luxury Residential\",\n        projectType: \"Residential Complex\",\n        contractType: \"Design-Build\",\n        status: \"Pre-Construction\",\n        investment: 320,\n        expectedRoi: 19.2,\n        size: 1200000,\n        capacity: \"580 Units\",\n        residentialType: \"Waterfront Apartments\",\n        residentialClass: \"Premium\",\n        rating: \"4-Star\",\n        category: \"Mixed-Use Waterfront Development\",\n        value: \"$320 Million\",\n        completionDate: \"Q1 2026\",\n        briefBackground: \"Dubai Creek Harbour Residences offers premium waterfront living with direct marina access and panoramic views of Dubai's skyline. The development features luxury amenities, sustainable design elements, and world-class facilities in one of Dubai's most prestigious waterfront communities.\",\n        imageUrl: \"https://images.unsplash.com/photo-1582407947304-fd86f028f716?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=240\",\n        features: [\"Marina Access\", \"Waterfront Views\", \"Luxury Amenities\", \"Sustainable Design\", \"Premium Finishes\", \"Community Facilities\"],\n        isLuxury: true,\n        isWaterfront: true,\n        isSustainable: true,\n      }\n    ];\n\n    sampleProjects.forEach(project => {\n      this.createProject(project);\n    });\n\n    // Seed market indicators\n    const sampleIndicators: InsertMarketIndicator[] = [\n      {\n        title: \"High Opportunity\",\n        description: \"Retail gap in Business Bay\",\n        type: \"opportunity\",\n        value: \"+23%\",\n        valueLabel: \"demand vs supply\",\n        location: \"Business Bay\",\n        sector: \"Retail\",\n        isActive: true,\n      },\n      {\n        title: \"Market Trend\",\n        description: \"Mixed-use developments rising\",\n        type: \"trend\",\n        value: \"+15%\",\n        valueLabel: \"new projects Q1\",\n        sector: \"Mixed Use\",\n        isActive: true,\n      },\n      {\n        title: \"Market Alert\",\n        description: \"Oversupply in luxury segment\",\n        type: \"alert\",\n        value: \"-8%\",\n        valueLabel: \"price adjustment\",\n        sector: \"Luxury\",\n        isActive: true,\n      }\n    ];\n\n    sampleIndicators.forEach(indicator => {\n      this.createMarketIndicator(indicator);\n    });\n  }\n\n  async getProjects(filters?: SearchFilters): Promise<Project[]> {\n    let projects = Array.from(this.projects.values());\n\n    if (filters) {\n      if (filters.country) {\n        projects = projects.filter(p => p.country.toLowerCase().includes(filters.country!.toLowerCase()));\n      }\n      if (filters.sector && filters.sector !== \"All Sectors\") {\n        projects = projects.filter(p => p.sector === filters.sector);\n      }\n      if (filters.projectType && filters.projectType !== \"All Types\") {\n        projects = projects.filter(p => p.projectType === filters.projectType);\n      }\n      if (filters.city && filters.city !== \"All Cities\") {\n        projects = projects.filter(p => p.city === filters.city);\n      }\n      if (filters.district && filters.district !== \"All Districts\") {\n        projects = projects.filter(p => p.district === filters.district);\n      }\n      if (filters.status && filters.status !== \"All Status\") {\n        projects = projects.filter(p => p.status === filters.status);\n      }\n      if (filters.minInvestment) {\n        projects = projects.filter(p => p.investment >= filters.minInvestment!);\n      }\n      if (filters.maxInvestment) {\n        projects = projects.filter(p => p.investment <= filters.maxInvestment!);\n      }\n      if (filters.isLuxury !== undefined) {\n        projects = projects.filter(p => p.isLuxury === filters.isLuxury);\n      }\n      if (filters.isWaterfront !== undefined) {\n        projects = projects.filter(p => p.isWaterfront === filters.isWaterfront);\n      }\n      if (filters.isSustainable !== undefined) {\n        projects = projects.filter(p => p.isSustainable === filters.isSustainable);\n      }\n    }\n\n    return projects;\n  }\n\n  async getProject(id: number): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = this.currentProjectId++;\n    const project: Project = {\n      ...insertProject,\n      id,\n      createdAt: new Date(),\n      size: insertProject.size || null,\n      description: insertProject.description || null,\n      isLuxury: insertProject.isLuxury || null,\n      isWaterfront: insertProject.isWaterfront || null,\n      isSustainable: insertProject.isSustainable || null,\n      expectedRoi: insertProject.expectedRoi || null,\n      currentRoi: insertProject.currentRoi || null,\n      completionDate: insertProject.completionDate || null,\n      imageUrl: insertProject.imageUrl || null,\n      features: insertProject.features || null,\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async getUserPreferences(sessionId: string): Promise<UserPreferences | undefined> {\n    return this.userPreferences.get(sessionId);\n  }\n\n  async createUserPreferences(insertPreferences: InsertUserPreferences): Promise<UserPreferences> {\n    const id = this.currentUserPrefId++;\n    const preferences: UserPreferences = {\n      ...insertPreferences,\n      id,\n      createdAt: new Date(),\n      selectedRole: insertPreferences.selectedRole || null,\n      savedSearches: insertPreferences.savedSearches || null,\n      favoriteProjects: insertPreferences.favoriteProjects || null,\n    };\n    this.userPreferences.set(insertPreferences.sessionId, preferences);\n    return preferences;\n  }\n\n  async updateUserPreferences(sessionId: string, updates: Partial<InsertUserPreferences>): Promise<UserPreferences | undefined> {\n    const existing = this.userPreferences.get(sessionId);\n    if (!existing) return undefined;\n\n    const updated: UserPreferences = {\n      ...existing,\n      ...updates,\n    };\n    this.userPreferences.set(sessionId, updated);\n    return updated;\n  }\n\n  async getMarketIndicators(): Promise<MarketIndicator[]> {\n    return Array.from(this.marketIndicators.values()).filter(indicator => indicator.isActive);\n  }\n\n  async createMarketIndicator(insertIndicator: InsertMarketIndicator): Promise<MarketIndicator> {\n    const id = this.currentIndicatorId++;\n    const indicator: MarketIndicator = {\n      ...insertIndicator,\n      id,\n      createdAt: new Date(),\n      location: insertIndicator.location || null,\n      sector: insertIndicator.sector || null,\n      isActive: insertIndicator.isActive !== undefined ? insertIndicator.isActive : null,\n    };\n    this.marketIndicators.set(id, indicator);\n    return indicator;\n  }\n\n  async getTrendingSectors(): Promise<any[]> {\n    const projects = Array.from(this.projects.values());\n    const sectorStats = new Map<string, { projectCount: number; totalValue: number; }>();\n    \n    // Calculate sector statistics\n    projects.forEach(project => {\n      const current = sectorStats.get(project.sector) || { projectCount: 0, totalValue: 0 };\n      current.projectCount++;\n      current.totalValue += project.investment;\n      sectorStats.set(project.sector, current);\n    });\n\n    // Convert to trending sectors format\n    const trendingSectors = Array.from(sectorStats.entries()).map(([name, stats]) => ({\n      name,\n      projectCount: stats.projectCount,\n      growthRate: `+${Math.floor(Math.random() * 25 + 5)}%`, // Simulated growth rate\n      averageValue: stats.totalValue / stats.projectCount * 1000000, // Convert to actual currency\n    }));\n\n    // Sort by project count descending\n    return trendingSectors.sort((a, b) => b.projectCount - a.projectCount);\n  }\n\n  // User Management Methods - In-memory implementation for development\n  async createUser(userData: { email: string; firstName: string; lastName: string; password: string; selectedRole?: string }): Promise<User> {\n    // For development, we'll simulate database behavior\n    throw new Error(\"User creation not available in memory storage - use database storage\");\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    throw new Error(\"User management not available in memory storage - use database storage\");\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    throw new Error(\"User management not available in memory storage - use database storage\");\n  }\n\n  async updateUserProfile(id: string, updates: UpdateUserProfile): Promise<User | undefined> {\n    throw new Error(\"User management not available in memory storage - use database storage\");\n  }\n\n  async changeUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean> {\n    throw new Error(\"User management not available in memory storage - use database storage\");\n  }\n\n  // Session Management Methods - In-memory implementation for development\n  async createSession(userId: string): Promise<Session> {\n    throw new Error(\"Session management not available in memory storage - use database storage\");\n  }\n\n  async getSession(sessionId: string): Promise<Session | undefined> {\n    throw new Error(\"Session management not available in memory storage - use database storage\");\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    throw new Error(\"Session management not available in memory storage - use database storage\");\n  }\n\n  async getValidSession(sessionId: string): Promise<{ user: User; session: Session } | null> {\n    throw new Error(\"Session management not available in memory storage - use database storage\");\n  }\n}\n\n// Database Storage Implementation\nclass DatabaseStorage implements IStorage {\n  // Projects\n  async getProjects(filters?: SearchFilters): Promise<Project[]> {\n    let query = db.select().from(projects);\n    // Add filtering logic similar to MemStorage if needed\n    return await query;\n  }\n\n  async getProject(id: number): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  // User Preferences\n  async getUserPreferences(sessionId: string): Promise<UserPreferences | undefined> {\n    const [prefs] = await db.select().from(userPreferences).where(eq(userPreferences.sessionId, sessionId));\n    return prefs;\n  }\n\n  async createUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences> {\n    const [newPrefs] = await db.insert(userPreferences).values(preferences).returning();\n    return newPrefs;\n  }\n\n  async updateUserPreferences(sessionId: string, updates: Partial<InsertUserPreferences>): Promise<UserPreferences | undefined> {\n    const [updated] = await db\n      .update(userPreferences)\n      .set(updates)\n      .where(eq(userPreferences.sessionId, sessionId))\n      .returning();\n    return updated;\n  }\n\n  // Market Indicators\n  async getMarketIndicators(): Promise<MarketIndicator[]> {\n    return await db.select().from(marketIndicators).where(eq(marketIndicators.isActive, true));\n  }\n\n  async createMarketIndicator(indicator: InsertMarketIndicator): Promise<MarketIndicator> {\n    const [newIndicator] = await db.insert(marketIndicators).values(indicator).returning();\n    return newIndicator;\n  }\n\n  // Trending Sectors\n  async getTrendingSectors(): Promise<any[]> {\n    const sectors = [\"Real Estate\", \"Infrastructure\", \"Hospitality\", \"Energy\"];\n    return sectors.map(sector => ({\n      name: sector,\n      projectCount: Math.floor(Math.random() * 10) + 5,\n      growth: Math.floor(Math.random() * 30) + 10,\n      averageRoi: Math.floor(Math.random() * 15) + 15\n    }));\n  }\n\n  // User Management Methods\n  async createUser(userData: { email: string; firstName: string; lastName: string; password: string; selectedRole?: string }): Promise<User> {\n    const passwordHash = await hashPassword(userData.password);\n    const newUser: InsertUser = {\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      passwordHash,\n      selectedRole: userData.selectedRole || null,\n      phoneNumber: null,\n      profileImageUrl: null,\n      emailNotifications: true,\n    };\n    \n    const [user] = await db.insert(users).values(newUser).returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async updateUserProfile(id: string, updates: UpdateUserProfile): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async changeUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean> {\n    const user = await this.getUserById(id);\n    if (!user) return false;\n\n    const isValidPassword = await verifyPassword(currentPassword, user.passwordHash);\n    if (!isValidPassword) return false;\n\n    const newPasswordHash = await hashPassword(newPassword);\n    await db\n      .update(users)\n      .set({ passwordHash: newPasswordHash, updatedAt: new Date() })\n      .where(eq(users.id, id));\n    \n    return true;\n  }\n\n  // Session Management Methods\n  async createSession(userId: string): Promise<Session> {\n    const sessionData: InsertSession = {\n      id: generateSessionId(),\n      userId,\n      expiresAt: getSessionExpiry(),\n    };\n    \n    const [session] = await db.insert(sessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getSession(sessionId: string): Promise<Session | undefined> {\n    const [session] = await db.select().from(sessions).where(eq(sessions.id, sessionId));\n    return session;\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.id, sessionId));\n  }\n\n  async getValidSession(sessionId: string): Promise<{ user: User; session: Session } | null> {\n    const session = await this.getSession(sessionId);\n    if (!session || session.expiresAt < new Date()) {\n      if (session) {\n        await this.deleteSession(sessionId);\n      }\n      return null;\n    }\n\n    const user = await this.getUserById(session.userId);\n    if (!user) {\n      await this.deleteSession(sessionId);\n      return null;\n    }\n\n    return { user, session };\n  }\n}\n\n// Use MemStorage for demo with sample projects, but extend it with database user features\nclass HybridStorage extends MemStorage {\n  private dbStorage = new DatabaseStorage();\n\n  // Use database for user management\n  async createUser(userData: { email: string; firstName: string; lastName: string; password: string; selectedRole?: string }): Promise<User> {\n    return this.dbStorage.createUser(userData);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.dbStorage.getUserByEmail(email);\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    return this.dbStorage.getUserById(id);\n  }\n\n  async updateUserProfile(id: string, updates: UpdateUserProfile): Promise<User | undefined> {\n    return this.dbStorage.updateUserProfile(id, updates);\n  }\n\n  async changeUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean> {\n    return this.dbStorage.changeUserPassword(id, currentPassword, newPassword);\n  }\n\n  async createSession(userId: string): Promise<Session> {\n    return this.dbStorage.createSession(userId);\n  }\n\n  async getSession(sessionId: string): Promise<Session | undefined> {\n    return this.dbStorage.getSession(sessionId);\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    return this.dbStorage.deleteSession(sessionId);\n  }\n\n  async getValidSession(sessionId: string): Promise<{ user: User; session: Session } | null> {\n    return this.dbStorage.getValidSession(sessionId);\n  }\n}\n\nexport const storage = new HybridStorage();\n","size_bytes":41630},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, real, timestamp, boolean, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { sql } from \"drizzle-orm\";\n\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  location: text(\"location\").notNull(),\n  city: text(\"city\").notNull(),\n  district: text(\"district\").notNull(),\n  country: text(\"country\").notNull(),\n  sector: text(\"sector\").notNull(), // Real Estate, Hospitality, Retail, etc.\n  subsector: text(\"subsector\"), // Luxury Residential, Office Space, etc.\n  projectType: text(\"project_type\").notNull(), // Residential, Commercial, Mixed Use, etc.\n  contractType: text(\"contract_type\"), // Design-Build, Traditional, etc.\n  status: text(\"status\").notNull(), // Planning, Under Construction, Completed, On Hold\n  investment: real(\"investment\").notNull(), // in millions USD\n  expectedRoi: real(\"expected_roi\"), // percentage\n  currentRoi: real(\"current_roi\"), // percentage for completed projects\n  size: real(\"size\"), // square feet\n  capacity: text(\"capacity\"), // 320 Units, 50,000 sqft, etc.\n  residentialType: text(\"residential_type\"), // High-End Apartments, Villas, etc.\n  residentialClass: text(\"residential_class\"), // Ultra-Luxury, Premium, etc.\n  rating: text(\"rating\"), // 5-Star, A-Grade, etc.\n  category: text(\"category\"), // Premium Residential Development, etc.\n  value: text(\"value\"), // $450 Million, etc.\n  completionDate: text(\"completion_date\"), // Q1 2025, Q2 2026, etc.\n  briefBackground: text(\"brief_background\"), // Project background description\n  owner: text(\"owner\"), // Project owner/proprietor\n  imageUrl: text(\"image_url\"),\n  features: text(\"features\").array(), // array of feature strings\n  isLuxury: boolean(\"is_luxury\").default(false),\n  isWaterfront: boolean(\"is_waterfront\").default(false),\n  isSustainable: boolean(\"is_sustainable\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: text(\"session_id\").notNull(),\n  selectedRole: text(\"selected_role\"), // investor, contractor, consultant, developer\n  savedSearches: text(\"saved_searches\").array().default([]),\n  favoriteProjects: integer(\"favorite_projects\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const marketIndicators = pgTable(\"market_indicators\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // opportunity, trend, alert\n  value: text(\"value\").notNull(), // +23%, -8%, etc.\n  valueLabel: text(\"value_label\").notNull(), // demand vs supply, new projects Q1, etc.\n  location: text(\"location\"),\n  sector: text(\"sector\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Users table for authentication and account management\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  phoneNumber: varchar(\"phone_number\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  selectedRole: varchar(\"selected_role\"), // investor, contractor, consultant, developer, supplier\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Session storage table for authentication\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMarketIndicatorSchema = createInsertSchema(marketIndicators).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  createdAt: true,\n});\n\n// User profile update schema (excludes password and sensitive fields)\nexport const updateUserProfileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  phoneNumber: z.string().optional(),\n  selectedRole: z.enum([\"investor\", \"contractor\", \"consultant\", \"developer\", \"supplier\"]).optional(),\n  emailNotifications: z.boolean().optional(),\n});\n\n// Password change schema\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(6, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Please confirm your new password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// Registration schema\nexport const registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Please confirm your password\"),\n  selectedRole: z.enum([\"investor\", \"contractor\", \"consultant\", \"developer\", \"supplier\"]),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const searchFiltersSchema = z.object({\n  country: z.string().optional(),\n  sector: z.string().optional(),\n  subSector: z.string().optional(),\n  projectType: z.string().optional(),\n  city: z.string().optional(),\n  district: z.string().optional(),\n  status: z.string().optional(),\n  minInvestment: z.number().optional(),\n  maxInvestment: z.number().optional(),\n  projectSize: z.string().optional(),\n  completionTimeline: z.string().optional(),\n  isLuxury: z.boolean().optional(),\n  isWaterfront: z.boolean().optional(),\n  isSustainable: z.boolean().optional(),\n});\n\n// Investor-specific search filters\nexport const investorFiltersSchema = z.object({\n  country: z.string().optional(),\n  city: z.string().optional(),\n  district: z.string().optional(),\n  sector: z.string().optional(),\n  subSector: z.string().optional(),\n  status: z.enum([\"Planning\", \"Under Construction\", \"Nearing Completion\", \"Completed / Operational\"]).optional(),\n  minInvestment: z.number().optional(),\n  maxInvestment: z.number().optional(),\n  minRoi: z.number().optional(),\n  maxRoi: z.number().optional(),\n  completionTimeframe: z.string().optional(),\n  riskLevel: z.enum([\"Low\", \"Medium\", \"High\"]).optional(),\n  sustainabilityRating: z.string().optional(),\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\nexport type InsertMarketIndicator = z.infer<typeof insertMarketIndicatorSchema>;\nexport type MarketIndicator = typeof marketIndicators.$inferSelect;\nexport type SearchFilters = z.infer<typeof searchFiltersSchema>;\nexport type InvestorFilters = z.infer<typeof investorFiltersSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;\nexport type ChangePassword = z.infer<typeof changePasswordSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n","size_bytes":8454},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Header from \"@/components/ui/header\";\nimport Homepage from \"@/pages/homepage\";\nimport RoleSelection from \"@/pages/role-selection\";\nimport SearchFilter from \"@/pages/search-filter\";\nimport Dashboard from \"@/pages/dashboard\";\nimport InvestorSearch from \"@/pages/investor-search\";\nimport InvestorDashboard from \"@/pages/investor-dashboard\";\nimport InvestorProjects from \"@/pages/investor-projects\";\nimport ContractorDashboard from \"@/pages/contractor-dashboard\";\nimport ContractorProjects from \"@/pages/contractor-projects\";\nimport ConsultantDashboard from \"@/pages/consultant-dashboard\";\nimport ConsultantAnalysis from \"@/pages/consultant-analysis\";\nimport DeveloperDashboard from \"@/pages/developer-dashboard\";\nimport DeveloperOpportunities from \"@/pages/developer-opportunities\";\nimport SupplierDashboard from \"@/pages/supplier-dashboard\";\nimport SupplierOpportunities from \"@/pages/supplier-opportunities\";\nimport ProjectProfile from \"@/pages/project-profile\";\nimport AccountSettings from \"@/pages/account-settings\";\nimport LoginPage from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n\nfunction Router() {\n  const [location] = useLocation();\n  const { user, isLoading } = useAuth();\n  \n  const [userRole, setUserRole] = useState<string>(\"\");\n  const [userName, setUserName] = useState<string>(\"User\");\n  \n  // Clear old localStorage data on first load to reset state\n  useEffect(() => {\n    // Only clear if there's stale data\n    const stored = localStorage.getItem(\"selectedRole\");\n    if (stored === \"consultant\" && location === \"/role-selection\") {\n      localStorage.removeItem(\"selectedRole\");\n      localStorage.removeItem(\"userName\");\n      setUserRole(\"\");\n      setUserName(\"User\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // If user is authenticated, use their data\n    if (user) {\n      setUserRole(user.selectedRole || \"\");\n      setUserName(`${user.firstName} ${user.lastName}`.trim() || \"User\");\n      // Sync with localStorage for compatibility with existing components\n      if (user.selectedRole) {\n        localStorage.setItem(\"selectedRole\", user.selectedRole);\n      }\n    } else {\n      // Read directly from localStorage\n      const storedRole = localStorage.getItem(\"selectedRole\");\n      const storedUserName = localStorage.getItem(\"userName\");\n      \n      console.log(\"Debug - reading from localStorage:\", { storedRole, storedUserName, setTo: storedRole || \"empty\" });\n      \n      if (storedRole) {\n        console.log(\"Initial load - setting userRole to:\", storedRole);\n        setUserRole(storedRole);\n      } else {\n        console.log(\"Initial load - no stored role\");\n        setUserRole(\"\"); // Clear role if nothing stored\n      }\n\n      if (storedUserName) {\n        setUserName(storedUserName);\n      } else if (storedRole) {\n        const roleNames = {\n          contractor: \"Ahmed\",\n          investor: \"Sarah\",\n          consultant: \"Michael\",\n          developer: \"Fatima\",\n          supplier: \"Omar\"\n        };\n        setUserName(roleNames[storedRole as keyof typeof roleNames] || \"User\");\n      } else {\n        setUserName(\"User\");\n      }\n    }\n  }, [user, location]); // Include location to trigger updates on navigation\n\n  // Listen for localStorage changes and custom role change events\n  useEffect(() => {\n    const handleStorageChange = () => {\n      if (!user) {\n        const storedRole = localStorage.getItem(\"selectedRole\");\n        const storedUserName = localStorage.getItem(\"userName\");\n        \n        console.log(\"Storage changed:\", { storedRole, storedUserName, currentUserRole: userRole });\n        \n        if (storedRole) {\n          console.log(\"Setting userRole to:\", storedRole);\n          setUserRole(storedRole);\n        } else {\n          console.log(\"No stored role, clearing userRole\");\n          setUserRole(\"\");\n        }\n\n        if (storedUserName) {\n          setUserName(storedUserName);\n        } else if (storedRole) {\n          const roleNames = {\n            contractor: \"Ahmed\",\n            investor: \"Sarah\",\n            consultant: \"Michael\",\n            developer: \"Fatima\",\n            supplier: \"Omar\"\n          };\n          setUserName(roleNames[storedRole as keyof typeof roleNames] || \"User\");\n        } else {\n          setUserName(\"User\");\n        }\n      }\n    };\n\n    // Listen for custom role change event from role selection page\n    const handleRoleChanged = () => {\n      console.log(\"Role changed event triggered\");\n      // Add a small delay to ensure localStorage has been updated\n      setTimeout(handleStorageChange, 50);\n    };\n\n    // Check every 300ms for changes\n    const interval = setInterval(handleStorageChange, 300);\n    \n    // Listen for custom role change events for immediate updates\n    window.addEventListener(\"roleChanged\", handleRoleChanged);\n    \n    return () => {\n      clearInterval(interval);\n      window.removeEventListener(\"roleChanged\", handleRoleChanged);\n    };\n  }, [user]);\n\n  const showHeader = location !== \"/role-selection\" && !(location === \"/\" && !userRole);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {showHeader && <Header userRole={userRole} userName={userName} />}\n      <Switch>\n        {/* Root path shows role selection for new users, homepage for users with selected role */}\n        <Route path=\"/\" component={() => userRole ? <Homepage /> : <RoleSelection />} />\n        <Route path=\"/role-selection\" component={RoleSelection} />\n        <Route path=\"/homepage\" component={Homepage} />\n        <Route path=\"/search\" component={SearchFilter} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/investor-search\" component={InvestorSearch} />\n        <Route path=\"/investor-dashboard\" component={InvestorDashboard} />\n        <Route path=\"/investor-projects\" component={InvestorProjects} />\n        <Route path=\"/contractor-dashboard\" component={ContractorDashboard} />\n        <Route path=\"/contractor-projects\" component={ContractorProjects} />\n        <Route path=\"/consultant-dashboard\" component={ConsultantDashboard} />\n        <Route path=\"/consultant-analysis\" component={ConsultantAnalysis} />\n        <Route path=\"/developer-dashboard\" component={DeveloperDashboard} />\n        <Route path=\"/developer-opportunities\" component={DeveloperOpportunities} />\n        <Route path=\"/supplier-dashboard\" component={SupplierDashboard} />\n        <Route path=\"/supplier-opportunities\" component={SupplierOpportunities} />\n        \n        <Route path=\"/project/:id\" component={ProjectProfile} />\n        <Route path=\"/account-settings\" component={AccountSettings} />\n        <Route path=\"/login\" component={LoginPage} />\n        \n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7307},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    font-family: 'Raleway', system-ui, -apple-system, sans-serif;\n  }\n}\n\n:root {\n  --background: hsl(212, 25%, 97%); /* #f9fafc */\n  --foreground: hsl(215, 60%, 13%); /* #0a1b3d */\n  --muted: hsl(212, 25%, 97%);\n  --muted-foreground: hsl(212, 20%, 27%); /* #2f3a45 */\n  --popover: hsl(212, 25%, 97%);\n  --popover-foreground: hsl(215, 60%, 13%);\n  --card: hsl(212, 25%, 97%);\n  --card-foreground: hsl(215, 60%, 13%);\n  --border: hsl(212, 15%, 85%);\n  --input: hsl(212, 15%, 85%);\n  --primary: hsl(185, 100%, 35%); /* #00a7b2 */\n  --primary-foreground: hsl(212, 25%, 97%);\n  --secondary: hsl(212, 20%, 27%); /* #2f3a45 */\n  --secondary-foreground: hsl(212, 25%, 97%);\n  --accent: hsl(185, 100%, 35%);\n  --accent-foreground: hsl(212, 25%, 97%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(212, 25%, 97%);\n  --ring: hsl(185, 100%, 35%);\n  --radius: 0.5rem;\n  \n  /* Role-specific colors */\n  --investor: hsl(185, 100%, 35%); /* #00a7b2 */\n  --contractor: hsl(215, 60%, 13%); /* #0a1b3d */\n  --consultant: hsl(185, 100%, 35%); /* #00a7b2 */\n  --developer: hsl(212, 20%, 27%); /* #2f3a45 */\n  --supplier: hsl(185, 100%, 35%); /* #00a7b2 */\n  \n  /* Additional colors for market indicators */\n  --success: hsl(185, 100%, 35%);\n  --warning: hsl(45, 93%, 47%);\n  --info: hsl(185, 100%, 35%);\n  --danger: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(215, 60%, 13%); /* #0a1b3d */\n  --foreground: hsl(212, 25%, 97%); /* #f9fafc */\n  --muted: hsl(212, 20%, 27%); /* #2f3a45 */\n  --muted-foreground: hsl(212, 25%, 97%);\n  --popover: hsl(215, 60%, 13%);\n  --popover-foreground: hsl(212, 25%, 97%);\n  --card: hsl(212, 20%, 27%); /* #2f3a45 */\n  --card-foreground: hsl(212, 25%, 97%);\n  --border: hsl(212, 20%, 35%);\n  --input: hsl(212, 20%, 35%);\n  --primary: hsl(185, 100%, 35%); /* #00a7b2 */\n  --primary-foreground: hsl(212, 25%, 97%);\n  --secondary: hsl(212, 20%, 27%); /* #2f3a45 */\n  --secondary-foreground: hsl(212, 25%, 97%);\n  --accent: hsl(185, 100%, 35%);\n  --accent-foreground: hsl(212, 25%, 97%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(212, 25%, 97%);\n  --ring: hsl(185, 100%, 35%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .role-card {\n    @apply transition-all duration-300 cursor-pointer;\n  }\n  \n  .role-card:hover {\n    @apply transform scale-105 shadow-xl;\n  }\n  \n  .role-card.selected {\n    @apply ring-2 ring-primary bg-blue-50;\n  }\n  \n  .market-indicator {\n    @apply bg-white rounded-lg shadow-sm border border-slate-200 p-6;\n  }\n  \n  .market-indicator.opportunity {\n    @apply border-l-4 border-l-green-500;\n  }\n  \n  .market-indicator.trend {\n    @apply border-l-4 border-l-blue-500;\n  }\n  \n  .market-indicator.alert {\n    @apply border-l-4 border-l-orange-500;\n  }\n  \n  .project-card {\n    @apply bg-white rounded-lg shadow-sm border border-slate-200 hover:shadow-md transition-shadow duration-200;\n  }\n  \n  .filter-sidebar {\n    @apply w-80 bg-white border-r border-slate-200 fixed h-full overflow-y-auto;\n  }\n  \n  .page-nav-tab {\n    @apply px-3 py-2 text-sm font-medium rounded-md transition-colors;\n  }\n  \n  .page-nav-tab.active {\n    @apply bg-primary text-white;\n  }\n  \n  .page-nav-tab:not(.active) {\n    @apply text-slate-600 hover:text-slate-900;\n  }\n}\n\n@layer utilities {\n  .slide-in {\n    animation: slideIn 0.3s ease-out;\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.2s ease-out;\n  }\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n","size_bytes":3803},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/global-header-filter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { FilterOptions } from \"@/lib/types\";\nimport { Globe, Building2 } from \"lucide-react\";\n\ninterface GlobalHeaderFilterProps {\n  onFilterChange: (filters: { country?: string; sector?: string }) => void;\n  initialFilters?: { country?: string; sector?: string };\n}\n\nexport function GlobalHeaderFilter({ onFilterChange, initialFilters }: GlobalHeaderFilterProps) {\n  const [selectedCountry, setSelectedCountry] = useState<string>(initialFilters?.country || \"\");\n  const [selectedSector, setSelectedSector] = useState<string>(initialFilters?.sector || \"\");\n\n  const { data: filterOptions, isLoading } = useQuery<FilterOptions>({\n    queryKey: [\"/api/filter-options\"],\n  });\n\n  useEffect(() => {\n    // Load from localStorage on mount\n    const savedCountry = localStorage.getItem(\"globalCountryFilter\");\n    const savedSector = localStorage.getItem(\"globalSectorFilter\");\n    \n    if (savedCountry) {\n      setSelectedCountry(savedCountry);\n    }\n    if (savedSector) {\n      setSelectedSector(savedSector);\n    }\n  }, []);\n\n  const handleCountryChange = (value: string) => {\n    const country = value === \"all\" ? \"\" : value;\n    setSelectedCountry(country);\n    localStorage.setItem(\"globalCountryFilter\", country);\n    onFilterChange({ country, sector: selectedSector });\n  };\n\n  const handleSectorChange = (value: string) => {\n    const sector = value === \"all\" ? \"\" : value;\n    setSelectedSector(sector);\n    localStorage.setItem(\"globalSectorFilter\", sector);\n    onFilterChange({ country: selectedCountry, sector });\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"border-b border-slate-200 rounded-none\">\n        <CardContent className=\"py-4\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"animate-pulse text-slate-500\">Loading filters...</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border-b border-slate-200 rounded-none bg-gradient-to-r from-slate-50 to-blue-50\">\n      <CardContent className=\"py-4\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"text-primary\" size={20} />\n              <h2 className=\"text-sm font-medium text-slate-700\">Global Filters</h2>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"global-country\" className=\"text-sm font-medium text-slate-700 whitespace-nowrap\">\n                  Country:\n                </Label>\n                <Select value={selectedCountry || \"all\"} onValueChange={handleCountryChange}>\n                  <SelectTrigger id=\"global-country\" className=\"w-[200px]\">\n                    <SelectValue placeholder=\"All Countries\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Countries</SelectItem>\n                    {filterOptions?.countries.map(country => (\n                      <SelectItem key={country} value={country}>{country}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"global-sector\" className=\"text-sm font-medium text-slate-700 whitespace-nowrap\">\n                  Sector:\n                </Label>\n                <Select value={selectedSector || \"all\"} onValueChange={handleSectorChange}>\n                  <SelectTrigger id=\"global-sector\" className=\"w-[200px]\">\n                    <SelectValue placeholder=\"All Sectors\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Sectors</SelectItem>\n                    {filterOptions?.sectors.map(sector => (\n                      <SelectItem key={sector} value={sector}>\n                        <div className=\"flex items-center space-x-2\">\n                          <Building2 size={14} />\n                          <span>{sector}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4843},"client/src/components/investor-filters.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Filter, \n  X, \n  MapPin, \n  Building2, \n  BarChart3, \n  Zap, \n  Factory, \n  Fuel,\n  TrendingUp,\n  AlertTriangle,\n  Target\n} from \"lucide-react\";\nimport { InvestorFilters } from \"@shared/schema\";\n\n// Sector configuration\nconst SECTORS_CONFIG = {\n  \"Real Estate\": {\n    icon: Building2,\n    color: \"#0a1b3d\",\n    subSectors: [\"Residential\", \"Commercial\", \"Hospitality\", \"Retail\", \"Mixed-use\", \"Regional Mall\"]\n  },\n  \"Infrastructure\": {\n    icon: BarChart3,\n    color: \"#00a7b2\",\n    subSectors: [\"Roads\", \"Bridges\", \"Airports\", \"Ports\", \"Utilities Infrastructure\"]\n  },\n  \"Energy\": {\n    icon: Zap,\n    color: \"#f59e0b\",\n    subSectors: [\"Renewable Energy (Solar, Wind)\", \"Power Plants\", \"Energy Storage\"]\n  },\n  \"Industry\": {\n    icon: Factory,\n    color: \"#10b981\",\n    subSectors: [\"Industrial Parks\", \"Manufacturing Zones\", \"Logistics Hubs\"]\n  },\n  \"Oil & Gas\": {\n    icon: Fuel,\n    color: \"#ef4444\",\n    subSectors: [\"Refineries\", \"Petrochemical Plants\", \"Distribution Facilities\"]\n  }\n};\n\nconst STATUSES = [\"Planning\", \"Under Construction\", \"Nearing Completion\", \"Completed / Operational\"];\n\ninterface InvestorFiltersProps {\n  filters: InvestorFilters;\n  onFiltersChange: (filters: InvestorFilters) => void;\n  onGetInsights: () => void;\n}\n\nexport function InvestorFiltersComponent({ filters, onFiltersChange, onGetInsights }: InvestorFiltersProps) {\n  const [selectedCountry, setSelectedCountry] = useState(filters.country || \"Saudi Arabia\");\n  const [selectedCity, setSelectedCity] = useState(filters.city || \"\");\n  const [selectedDistrict, setSelectedDistrict] = useState(filters.district || \"\");\n  const [selectedSector, setSelectedSector] = useState(filters.sector || \"\");\n  const [selectedSubSector, setSelectedSubSector] = useState(filters.subSector || \"\");\n  const [selectedStatus, setSelectedStatus] = useState(filters.status || \"\");\n\n  // Query for cities based on selected country\n  const { data: cities = [] } = useQuery<string[]>({\n    queryKey: [\"/api/cities\", selectedCountry],\n    enabled: !!selectedCountry,\n  });\n\n  // Query for districts based on selected country and city\n  const { data: districts = [] } = useQuery<string[]>({\n    queryKey: [\"/api/districts\", selectedCountry, selectedCity],\n    enabled: !!selectedCountry && !!selectedCity,\n  });\n\n  // Update filters when selections change\n  useEffect(() => {\n    const newFilters: InvestorFilters = {\n      country: selectedCountry || undefined,\n      city: selectedCity || undefined,\n      district: selectedDistrict || undefined,\n      sector: selectedSector || undefined,\n      subSector: selectedSubSector || undefined,\n      status: selectedStatus as any || undefined,\n    };\n    onFiltersChange(newFilters);\n  }, [selectedCountry, selectedCity, selectedDistrict, selectedSector, selectedSubSector, selectedStatus, onFiltersChange]);\n\n  const handleCountryChange = (value: string) => {\n    setSelectedCountry(value);\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n  };\n\n  const handleCityChange = (value: string) => {\n    setSelectedCity(value);\n    setSelectedDistrict(\"\");\n  };\n\n  const handleSectorChange = (value: string) => {\n    setSelectedSector(value);\n    setSelectedSubSector(\"\");\n  };\n\n  const clearAllFilters = () => {\n    setSelectedCountry(\"Saudi Arabia\");\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n    setSelectedSector(\"\");\n    setSelectedSubSector(\"\");\n    setSelectedStatus(\"\");\n  };\n\n  const getActiveFilterCount = () => {\n    return [selectedCity, selectedDistrict, selectedSector, selectedSubSector, selectedStatus]\n      .filter(filter => filter && filter !== \"\").length;\n  };\n\n  const selectedSectorConfig = selectedSector ? SECTORS_CONFIG[selectedSector as keyof typeof SECTORS_CONFIG] : null;\n\n  return (\n    <Card className=\"investor-filters\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span className=\"flex items-center\">\n            <Filter className=\"mr-2\" size={18} />\n            Investment Criteria\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            {getActiveFilterCount() > 0 && (\n              <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary\">\n                {getActiveFilterCount()} filters\n              </Badge>\n            )}\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={onGetInsights}\n              className=\"bg-primary text-white hover:bg-primary/90\"\n            >\n              <TrendingUp className=\"mr-1\" size={14} />\n              Get Insights\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        \n        {/* Location Selection */}\n        <div>\n          <div className=\"flex items-center mb-3\">\n            <MapPin className=\"mr-2 text-primary\" size={16} />\n            <span className=\"text-sm font-medium text-slate-700\">Location Targeting</span>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {/* Country (Fixed to Saudi Arabia) */}\n            <div>\n              <span className=\"text-xs text-slate-500 block mb-1\">Country</span>\n              <Select value={selectedCountry} onValueChange={handleCountryChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Saudi Arabia\">🇸🇦 Saudi Arabia</SelectItem>\n                  <SelectItem value=\"United Arab Emirates\">🇦🇪 United Arab Emirates</SelectItem>\n                  <SelectItem value=\"Qatar\">🇶🇦 Qatar</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* City */}\n            <div>\n              <span className=\"text-xs text-slate-500 block mb-1\">City</span>\n              <Select value={selectedCity} onValueChange={handleCityChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select city\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Cities</SelectItem>\n                  {cities.map(city => (\n                    <SelectItem key={city} value={city}>{city}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* District */}\n            {selectedCity && (\n              <div>\n                <span className=\"text-xs text-slate-500 block mb-1\">District</span>\n                <Select value={selectedDistrict} onValueChange={setSelectedDistrict}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select district\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {districts.map(district => (\n                      <SelectItem key={district} value={district}>{district}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Sector Selection */}\n        <div>\n          <div className=\"flex items-center mb-3\">\n            <Target className=\"mr-2 text-primary\" size={16} />\n            <span className=\"text-sm font-medium text-slate-700\">Sector Focus</span>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {/* Main Sector */}\n            <div>\n              <span className=\"text-xs text-slate-500 block mb-1\">Primary Sector</span>\n              <Select value={selectedSector} onValueChange={handleSectorChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select sector\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sectors</SelectItem>\n                  {Object.entries(SECTORS_CONFIG).map(([sector, config]) => {\n                    const Icon = config.icon;\n                    return (\n                      <SelectItem key={sector} value={sector}>\n                        <div className=\"flex items-center\">\n                          <Icon size={16} className=\"mr-2\" style={{ color: config.color }} />\n                          {sector}\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Sub-Sector */}\n            {selectedSectorConfig && (\n              <div>\n                <span className=\"text-xs text-slate-500 block mb-1\">Sub-Sector</span>\n                <Select value={selectedSubSector} onValueChange={setSelectedSubSector}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select sub-sector\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Sub-Sectors</SelectItem>\n                    {selectedSectorConfig.subSectors.map(subSector => (\n                      <SelectItem key={subSector} value={subSector}>{subSector}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Project Status */}\n        <div>\n          <div className=\"flex items-center mb-3\">\n            <AlertTriangle className=\"mr-2 text-primary\" size={16} />\n            <span className=\"text-sm font-medium text-slate-700\">Project Phase</span>\n          </div>\n          \n          <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select project status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              {STATUSES.map(status => (\n                <SelectItem key={status} value={status}>{status}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Active Filters Display */}\n        {getActiveFilterCount() > 0 && (\n          <>\n            <Separator />\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-slate-500\">Active Filters</span>\n                <Button variant=\"ghost\" size=\"sm\" onClick={clearAllFilters} className=\"text-xs\">\n                  Clear All\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-1\">\n                {selectedCity && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    📍 {selectedCity}\n                    <X size={10} className=\"ml-1 cursor-pointer\" onClick={() => setSelectedCity(\"\")} />\n                  </Badge>\n                )}\n                {selectedDistrict && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    🏘️ {selectedDistrict}\n                    <X size={10} className=\"ml-1 cursor-pointer\" onClick={() => setSelectedDistrict(\"\")} />\n                  </Badge>\n                )}\n                {selectedSector && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    🏢 {selectedSector}\n                    <X size={10} className=\"ml-1 cursor-pointer\" onClick={() => setSelectedSector(\"\")} />\n                  </Badge>\n                )}\n                {selectedSubSector && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    🎯 {selectedSubSector}\n                    <X size={10} className=\"ml-1 cursor-pointer\" onClick={() => setSelectedSubSector(\"\")} />\n                  </Badge>\n                )}\n                {selectedStatus && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    ⏱️ {selectedStatus}\n                    <X size={10} className=\"ml-1 cursor-pointer\" onClick={() => setSelectedStatus(\"\")} />\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12672},"client/src/components/investor-insights.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  MapPin, \n  DollarSign, \n  Users, \n  AlertTriangle,\n  Target,\n  Activity,\n  BarChart3\n} from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\n\ninterface InvestorInsightsProps {\n  projects: Project[];\n  selectedLocation?: string;\n  selectedSector?: string;\n  selectedSubSector?: string;\n}\n\nexport function InvestorInsights({ projects, selectedLocation, selectedSector, selectedSubSector }: InvestorInsightsProps) {\n  // Calculate market metrics\n  const totalInvestment = projects.reduce((sum, project) => sum + project.investment, 0);\n  const averageROI = projects.length > 0 \n    ? projects.reduce((sum, project) => sum + (project.expectedRoi || 0), 0) / projects.length \n    : 0;\n  \n  const statusDistribution = projects.reduce((acc, project) => {\n    acc[project.status] = (acc[project.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const investmentRanges = {\n    small: projects.filter(p => p.investment < 100).length,\n    medium: projects.filter(p => p.investment >= 100 && p.investment < 500).length,\n    large: projects.filter(p => p.investment >= 500).length\n  };\n\n  // Market gap analysis (simulated based on project data)\n  const getMarketGaps = () => {\n    const gaps = [];\n    \n    if (selectedLocation && selectedSector) {\n      if (projects.length < 3) {\n        gaps.push({\n          type: \"opportunity\",\n          title: \"Limited Competition\",\n          description: `Only ${projects.length} active projects in ${selectedLocation} ${selectedSector}`,\n          confidence: \"High\",\n          impact: \"Major\"\n        });\n      }\n      \n      if (selectedSubSector === \"Regional Mall\") {\n        gaps.push({\n          type: \"gap\",\n          title: \"Retail Infrastructure Gap\",\n          description: \"Growing population but limited retail space per capita\",\n          confidence: \"Medium\",\n          impact: \"Significant\"\n        });\n      }\n      \n      if (averageROI > 20) {\n        gaps.push({\n          type: \"trend\",\n          title: \"High ROI Market\",\n          description: `Average ROI of ${averageROI.toFixed(1)}% indicates strong market demand`,\n          confidence: \"High\",\n          impact: \"Positive\"\n        });\n      }\n    }\n    \n    return gaps;\n  };\n\n  const marketGaps = getMarketGaps();\n\n  if (projects.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <AlertTriangle className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Data Available</h3>\n          <p className=\"text-slate-600\">\n            Please select your investment criteria to view market insights and opportunities.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      \n      {/* Market Overview Cards */}\n      <div className=\"grid md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Total Projects</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{projects.length}</p>\n              </div>\n              <Activity className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Total Investment</p>\n                <p className=\"text-2xl font-bold text-slate-900\">${totalInvestment.toFixed(0)}M</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Avg. ROI</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{averageROI.toFixed(1)}%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Market Confidence</p>\n                <p className=\"text-2xl font-bold text-slate-900\">High</p>\n              </div>\n              <Target className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* District-Level Insights */}\n      {selectedLocation && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"mr-2\" size={18} />\n              {selectedLocation} Market Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              \n              {/* Project Status Distribution */}\n              <div>\n                <h4 className=\"text-sm font-medium text-slate-700 mb-3\">Project Pipeline</h4>\n                <div className=\"space-y-2\">\n                  {Object.entries(statusDistribution).map(([status, count]) => {\n                    const percentage = (count / projects.length) * 100;\n                    return (\n                      <div key={status}>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-600\">{status}</span>\n                          <span className=\"font-medium\">{count} projects</span>\n                        </div>\n                        <Progress value={percentage} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Investment Size Distribution */}\n              <div>\n                <h4 className=\"text-sm font-medium text-slate-700 mb-3\">Investment Distribution</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Small (&lt;$100M)</span>\n                    <Badge variant=\"outline\">{investmentRanges.small} projects</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Medium ($100M-$500M)</span>\n                    <Badge variant=\"outline\">{investmentRanges.medium} projects</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Large (&gt;$500M)</span>\n                    <Badge variant=\"outline\">{investmentRanges.large} projects</Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Market Gap Indicators */}\n      {marketGaps.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <BarChart3 className=\"mr-2\" size={18} />\n              Market Gap Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {marketGaps.map((gap, index) => {\n                const getIcon = () => {\n                  switch (gap.type) {\n                    case \"opportunity\": return <TrendingUp className=\"text-green-500\" size={16} />;\n                    case \"gap\": return <AlertTriangle className=\"text-orange-500\" size={16} />;\n                    case \"trend\": return <Activity className=\"text-blue-500\" size={16} />;\n                    default: return <Target className=\"text-slate-500\" size={16} />;\n                  }\n                };\n\n                const getBadgeColor = () => {\n                  switch (gap.impact) {\n                    case \"Major\": return \"bg-green-100 text-green-800\";\n                    case \"Significant\": return \"bg-orange-100 text-orange-800\";\n                    case \"Positive\": return \"bg-blue-100 text-blue-800\";\n                    default: return \"bg-slate-100 text-slate-800\";\n                  }\n                };\n\n                return (\n                  <div key={index} className=\"flex items-start space-x-3 p-4 bg-slate-50 rounded-lg\">\n                    <div className=\"mt-0.5\">{getIcon()}</div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium text-slate-900\">{gap.title}</h4>\n                        <div className=\"flex space-x-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">{gap.confidence} Confidence</Badge>\n                          <Badge className={`text-xs ${getBadgeColor()}`}>{gap.impact} Impact</Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-slate-600\">{gap.description}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Investment Recommendation */}\n      {selectedSector && selectedLocation && (\n        <Card className=\"border-primary/20 bg-primary/5\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-3\">\n              <Target className=\"text-primary mt-1\" size={20} />\n              <div>\n                <h4 className=\"font-semibold text-slate-900 mb-2\">Investment Recommendation</h4>\n                <p className=\"text-slate-700 mb-3\">\n                  Based on the current market data for {selectedSector} in {selectedLocation}, we recommend considering \n                  {selectedSubSector ? ` ${selectedSubSector} projects` : ' projects'} with the following criteria:\n                </p>\n                <ul className=\"text-sm text-slate-600 space-y-1\">\n                  <li>• Target ROI: {(averageROI * 0.9).toFixed(1)}% - {(averageROI * 1.1).toFixed(1)}%</li>\n                  <li>• Investment range: $100M - $500M for optimal market positioning</li>\n                  <li>• Project status: Planning phase for maximum appreciation potential</li>\n                  <li>• Market timing: High confidence based on current indicators</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10907},"client/src/components/market-indicator.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, AlertTriangle } from \"lucide-react\";\nimport { MarketIndicator as MarketIndicatorType } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MarketIndicatorProps {\n  indicator: MarketIndicatorType;\n}\n\nexport function MarketIndicator({ indicator }: MarketIndicatorProps) {\n  const getIcon = () => {\n    switch (indicator.type) {\n      case \"opportunity\":\n        return <TrendingUp className=\"text-green-600\" size={20} />;\n      case \"trend\":\n        return <TrendingUp className=\"text-blue-600\" size={20} />;\n      case \"alert\":\n        return <AlertTriangle className=\"text-orange-600\" size={20} />;\n      default:\n        return null;\n    }\n  };\n\n  const getValueColor = () => {\n    switch (indicator.type) {\n      case \"opportunity\":\n        return \"text-green-600\";\n      case \"trend\":\n        return \"text-blue-600\";\n      case \"alert\":\n        return \"text-orange-600\";\n      default:\n        return \"text-slate-600\";\n    }\n  };\n\n  return (\n    <Card className={cn(\"market-indicator\", indicator.type)}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <div className={cn(\n              \"w-8 h-8 rounded-full flex items-center justify-center\",\n              indicator.type === \"opportunity\" && \"bg-green-100\",\n              indicator.type === \"trend\" && \"bg-blue-100\",\n              indicator.type === \"alert\" && \"bg-orange-100\"\n            )}>\n              {getIcon()}\n            </div>\n          </div>\n          <div className=\"ml-4\">\n            <h3 className=\"text-sm font-medium text-slate-900\">{indicator.title}</h3>\n            <p className=\"text-xs text-slate-600 mt-1\">{indicator.description}</p>\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <div className={cn(\"flex items-center text-xs\", getValueColor())}>\n            <span className=\"font-medium\">{indicator.value}</span>\n            <span className=\"ml-1\">{indicator.valueLabel}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2150},"client/src/components/project-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Share, Info, MapPin, Building } from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProjectCardProps {\n  project: Project;\n  onToggleFavorite?: (projectId: number) => void;\n  onShare?: (project: Project) => void;\n  onViewDetails?: (project: Project) => void;\n  isFavorite?: boolean;\n}\n\nexport function ProjectCard({ \n  project, \n  onToggleFavorite, \n  onShare, \n  onViewDetails,\n  isFavorite = false \n}: ProjectCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"under construction\":\n        return \"bg-green-100 text-green-800\";\n      case \"planning\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"completed\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"on hold\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-slate-100 text-slate-800\";\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `$${amount}M`;\n  };\n\n  const formatSize = (size: number) => {\n    return `${(size / 1000).toFixed(0)}K sq ft`;\n  };\n\n  const getRoi = () => {\n    if (project.status === \"Completed\" && project.currentRoi) {\n      return project.currentRoi;\n    }\n    return project.expectedRoi;\n  };\n\n  return (\n    <Card className=\"project-card\">\n      {project.imageUrl && (\n        <img \n          src={project.imageUrl} \n          alt={project.name}\n          className=\"w-full h-48 object-cover rounded-t-lg\"\n        />\n      )}\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-lg font-semibold text-slate-900 truncate\">{project.name}</h3>\n          <Badge className={cn(\"text-xs\", getStatusColor(project.status))}>\n            {project.status}\n          </Badge>\n        </div>\n\n        <div className=\"text-sm text-slate-600 mb-4 space-y-1\">\n          <div className=\"flex items-center\">\n            <MapPin className=\"mr-2 text-slate-400\" size={14} />\n            <span>{project.location}</span>\n          </div>\n          <div className=\"flex items-center\">\n            <Building className=\"mr-2 text-slate-400\" size={14} />\n            <span>{project.projectType} • {project.sector}</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n          <div>\n            <span className=\"text-slate-500\">Investment:</span>\n            <div className=\"font-semibold text-slate-900\">{formatCurrency(project.investment)}</div>\n          </div>\n          <div>\n            <span className=\"text-slate-500\">\n              {project.status === \"Completed\" ? \"Current ROI:\" : \"Expected ROI:\"}\n            </span>\n            <div className=\"font-semibold text-green-600\">\n              {getRoi() ? `${getRoi()?.toFixed(1)}%` : \"N/A\"}\n            </div>\n          </div>\n        </div>\n\n        {project.size && (\n          <div className=\"text-sm text-slate-500 mb-4\">\n            Size: {formatSize(project.size)}\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs text-slate-500\">\n            {project.status === \"Completed\" ? `Completed: ${project.completionDate}` : `Completion: ${project.completionDate}`}\n          </span>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onToggleFavorite?.(project.id)}\n              className={cn(\n                \"text-primary hover:text-primary\",\n                isFavorite && \"text-red-500 hover:text-red-600\"\n              )}\n            >\n              <Heart size={16} className={isFavorite ? \"fill-current\" : \"\"} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onShare?.(project)}\n              className=\"text-primary hover:text-primary\"\n            >\n              <Share size={16} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onViewDetails?.(project)}\n              className=\"text-primary hover:text-primary\"\n            >\n              <Info size={16} />\n            </Button>\n          </div>\n        </div>\n\n        {/* Project Features */}\n        {project.features && project.features.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-slate-100\">\n            <div className=\"flex flex-wrap gap-1\">\n              {project.features.slice(0, 3).map((feature, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {feature}\n                </Badge>\n              ))}\n              {project.features.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{project.features.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5178},"client/src/components/project-comparison.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, X } from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProjectComparisonProps {\n  projects: Project[];\n  onAddProject: () => void;\n  onRemoveProject: (projectId: number) => void;\n}\n\nexport function ProjectComparison({ projects, onAddProject, onRemoveProject }: ProjectComparisonProps) {\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"under construction\":\n        return \"bg-green-100 text-green-800\";\n      case \"planning\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"completed\":\n        return \"bg-orange-100 text-orange-800\";\n      default:\n        return \"bg-slate-100 text-slate-800\";\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `$${amount}M`;\n  };\n\n  const formatSize = (size: number | null) => {\n    if (!size) return \"N/A\";\n    return `${(size / 1000).toFixed(0)}K sq ft`;\n  };\n\n  const getRoi = (project: Project) => {\n    if (project.status === \"Completed\" && project.currentRoi) {\n      return `${project.currentRoi.toFixed(1)}%`;\n    }\n    if (project.expectedRoi) {\n      return `${project.expectedRoi.toFixed(1)}%`;\n    }\n    return \"N/A\";\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Project Comparison</CardTitle>\n          <Button variant=\"outline\" size=\"sm\" onClick={onAddProject}>\n            <Plus className=\"mr-1\" size={16} />\n            Add Project\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {projects.length === 0 ? (\n          <div className=\"text-center py-8 text-slate-500\">\n            <p>No projects selected for comparison</p>\n            <p className=\"text-sm mt-1\">Add projects to compare side-by-side</p>\n          </div>\n        ) : (\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {projects.map((project) => (\n              <div key={project.id} className=\"border border-slate-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-slate-900\">{project.name}</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={cn(\"text-xs\", getStatusColor(project.status))}>\n                      {project.status}\n                    </Badge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveProject(project.id)}\n                      className=\"text-slate-400 hover:text-slate-600\"\n                    >\n                      <X size={14} />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Investment:</span>\n                    <span className=\"font-medium\">{formatCurrency(project.investment)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">\n                      {project.status === \"Completed\" ? \"Current ROI:\" : \"Expected ROI:\"}\n                    </span>\n                    <span className=\"font-medium text-green-600\">{getRoi(project)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Completion:</span>\n                    <span className=\"font-medium\">{project.completionDate}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Size:</span>\n                    <span className=\"font-medium\">{formatSize(project.size)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Location:</span>\n                    <span className=\"font-medium\">{project.district}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Type:</span>\n                    <span className=\"font-medium\">{project.projectType}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4661},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export type UserRole = \"investor\" | \"contractor\" | \"consultant\" | \"developer\" | \"supplier\" | \"others\";\n\nexport interface FilterOptions {\n  countries: string[];\n  sectors: string[];\n  projectTypes: string[];\n  cities: string[];\n  districts: string[];\n  statuses: string[];\n  countryToCities?: Record<string, string[]>;\n  cityToDistricts?: Record<string, string[]>;\n}\n\nexport interface ComparisonProject {\n  id: number;\n  name: string;\n  status: string;\n  investment: number;\n  expectedRoi?: number;\n  currentRoi?: number;\n  completionDate: string;\n  size: number;\n}\n\nexport const roleColors = {\n  investor: \"hsl(142, 76%, 36%)\", // green\n  contractor: \"hsl(45, 93%, 47%)\", // orange\n  consultant: \"hsl(220, 91%, 54%)\", // blue\n  developer: \"hsl(262, 83%, 58%)\", // purple\n  supplier: \"hsl(220, 91%, 54%)\", // blue\n  others: \"hsl(220, 14%, 46%)\", // gray\n} as const;\n\nexport const roleIcons = {\n  investor: \"chart-line\",\n  contractor: \"hard-hat\",\n  consultant: \"lightbulb\",\n  developer: \"drafting-compass\",\n  supplier: \"truck\",\n  others: \"circle-user\",\n} as const;\n","size_bytes":1063},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contractor-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Search, Download, FileSpreadsheet, Filter, X, HardHat } from \"lucide-react\";\nimport { Project, SearchFilters } from \"@shared/schema\";\nimport { FilterOptions } from \"@/lib/types\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Sector-specific project types\nconst sectorProjectTypes: Record<string, string[]> = {\n  \"Real Estate\": [\"Residential\", \"Commercial\", \"Hospitality\"],\n  \"Infrastructure\": [\"Roads\", \"Bridges\", \"Airports\"],\n  \"Energy\": [\"Solar plants\", \"Power grids\"],\n  \"Oil & Gas\": [\"Refineries\", \"Pipelines\"],\n  \"Industry\": [\"Factories\", \"Warehousing\"]\n};\n\nexport default function ContractorDashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [selectedSector, setSelectedSector] = useState<string>(\"\");\n  const [selectedProjectType, setSelectedProjectType] = useState<string>(\"\");\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\n  const [selectedCity, setSelectedCity] = useState<string>(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState<string>(\"\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"\");\n  const [companyName, setCompanyName] = useState<string>(\"\");\n  const [contractValueRange, setContractValueRange] = useState<string>(\"\");\n\n  // Available project types based on selected sector\n  const availableProjectTypes = selectedSector ? sectorProjectTypes[selectedSector] || [] : [];\n\n  // Reset project type when sector changes, and city/district when country changes\n  useEffect(() => {\n    setSelectedProjectType(\"\");\n  }, [selectedSector]);\n\n  useEffect(() => {\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n  }, [selectedCountry]);\n\n  const handleFindProjects = () => {\n    // Get contract value range\n    let minValue, maxValue;\n    switch (contractValueRange) {\n      case \"small\":\n        minValue = 0;\n        maxValue = 50; // $50M\n        break;\n      case \"medium\":\n        minValue = 50;\n        maxValue = 500; // $50M - $500M\n        break;\n      case \"mega\":\n        minValue = 500;\n        maxValue = undefined; // $500M+\n        break;\n      default:\n        minValue = undefined;\n        maxValue = undefined;\n    }\n\n    const contractorFilters = {\n      sector: selectedSector || undefined,\n      projectType: selectedProjectType || undefined,\n      country: selectedCountry || undefined,\n      city: selectedCity || undefined,\n      district: selectedDistrict || undefined,\n      status: selectedStatus || undefined,\n      companyName: companyName || undefined,\n      minValue,\n      maxValue\n    };\n\n    // Save filters to localStorage for the results page\n    localStorage.setItem(\"contractorFilters\", JSON.stringify(contractorFilters));\n    \n    // Navigate to results page\n    setLocation(\"/contractor-projects\");\n  };\n\n  const { data: filterOptions } = useQuery<FilterOptions>({\n    queryKey: [\"/api/filter-options\"],\n  });\n\n  const handleClearFilters = () => {\n    setSelectedSector(\"\");\n    setSelectedProjectType(\"\");\n    setSelectedCountry(\"\");\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n    setSelectedStatus(\"\");\n    setCompanyName(\"\");\n    setContractValueRange(\"\");\n  };\n\n  const activeFiltersCount = [\n    selectedSector, \n    selectedProjectType, \n    selectedCountry, \n    selectedCity, \n    selectedDistrict, \n    selectedStatus, \n    companyName, \n    contractValueRange\n  ].filter(Boolean).length;\n\n  // Remove this section since we're moving to results page\n\n  // Remove this section since we're moving to results page\n\n  return (\n    <div style={{ backgroundColor: '#0a1b3d' }}>\n      {/* Header */}\n      <div className=\"border-b\" style={{ backgroundColor: '#0a1b3d', borderColor: '#2d3748' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/role-selection\")}\n                className=\"text-gray-300 hover:text-white hover:bg-white/10\"\n              >\n                ← Back to Role Selection\n              </Button>\n              <div className=\"w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center\">\n                <HardHat className=\"w-6 h-6 text-cyan-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-white\">Contractor Dashboard</h1>\n                <p className=\"text-gray-300\">Find active projects and bidding opportunities</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\" className=\"border-gray-300 text-gray-300 hover:bg-gray-700 bg-[#0a1b3d]\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Result\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Filters Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Filter className=\"w-5 h-5\" />\n                <span>Project Filters</span>\n                {activeFiltersCount > 0 && (\n                  <Badge variant=\"secondary\">{activeFiltersCount} active</Badge>\n                )}\n              </CardTitle>\n              {activeFiltersCount > 0 && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleClearFilters}>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Clear All\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {/* Sector Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Sector</label>\n                <Select value={selectedSector} onValueChange={setSelectedSector}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select sector\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Sectors</SelectItem>\n                    {Object.keys(sectorProjectTypes).map((sector) => (\n                      <SelectItem key={sector} value={sector}>{sector}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Project Type Filter - Dynamic based on sector */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Project Type</label>\n                <Select \n                  value={selectedProjectType} \n                  onValueChange={setSelectedProjectType}\n                  disabled={!selectedSector || selectedSector === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedSector || selectedSector === \"all\" \n                        ? \"Select sector first\" \n                        : \"Select type\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {availableProjectTypes.map((type) => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Country Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Country</label>\n                <Select value={selectedCountry} onValueChange={setSelectedCountry}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select country\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Countries</SelectItem>\n                    {filterOptions?.countries?.map((country) => (\n                      <SelectItem key={country} value={country}>{country}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Project Status</label>\n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"Tender Open\">Tender Open</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Planning\">Planning</SelectItem>\n                    <SelectItem value=\"Pre-Construction\">Pre-Construction</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Second Row of Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mt-4\">\n              {/* City Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">City</label>\n                <Select \n                  value={selectedCity} \n                  onValueChange={setSelectedCity}\n                  disabled={!selectedCountry || selectedCountry === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedCountry || selectedCountry === \"all\" \n                        ? \"Select country first\" \n                        : \"Select city\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Cities</SelectItem>\n                    {(selectedCountry && selectedCountry !== \"all\" && filterOptions?.countryToCities?.[selectedCountry] \n                      ? filterOptions.countryToCities[selectedCountry]\n                      : filterOptions?.cities || []\n                    ).filter(city => city && city.trim() !== \"\").map((city) => (\n                      <SelectItem key={city} value={city}>{city}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* District Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">District</label>\n                <Select \n                  value={selectedDistrict} \n                  onValueChange={setSelectedDistrict}\n                  disabled={!selectedCity || selectedCity === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedCity || selectedCity === \"all\" \n                        ? \"Select city first\" \n                        : \"Select district\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {(selectedCity && selectedCity !== \"all\" && filterOptions?.cityToDistricts?.[selectedCity] \n                      ? filterOptions.cityToDistricts[selectedCity]\n                      : filterOptions?.districts || []\n                    ).filter(district => district && district.trim() !== \"\").map((district) => (\n                      <SelectItem key={district} value={district}>{district}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Company Name Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Company Name</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search company...\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  className=\"w-full\"\n                />\n                <p className=\"text-xs text-gray-500\">View competitor or own activity</p>\n              </div>\n\n              {/* Contract Value Range Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Contract Value Range</label>\n                <Select value={contractValueRange} onValueChange={setContractValueRange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Ranges</SelectItem>\n                    <SelectItem value=\"small\">Small Projects (Under $50M)</SelectItem>\n                    <SelectItem value=\"medium\">Medium Projects ($50M - $500M)</SelectItem>\n                    <SelectItem value=\"mega\">Mega Projects ($500M+)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Find Projects Button */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">&nbsp;</label>\n                <Button \n                  onClick={handleFindProjects}\n                  className=\"w-full h-10 bg-orange-600 hover:bg-orange-700\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Find Projects\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Information Section */}\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <HardHat className=\"w-16 h-16 text-orange-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Ready to Find Projects?</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Use the filters above to search for construction projects and bidding opportunities. \n              You can filter by sector, project type, location, company, and contract value range.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full\"></div>\n                <span>Dynamic project types based on sector</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full\"></div>\n                <span>Location filtering with city and district</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full\"></div>\n                <span>Contract value range filtering</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15973},"client/src/pages/contractor-projects.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Grid, List, Download, FileSpreadsheet, MapPin, Calendar, DollarSign, Building2, HardHat, TrendingUp, Users, Target, BarChart3 } from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function ContractorProjects() {\n  const [, setLocation] = useLocation();\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState(\"deadline\");\n\n  // Get filters from localStorage (passed from contractor dashboard)\n  const [filters, setFilters] = useState<any>({});\n\n  useEffect(() => {\n    const savedFilters = localStorage.getItem(\"contractorFilters\");\n    if (savedFilters) {\n      setFilters(JSON.parse(savedFilters));\n    }\n  }, []);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    enabled: true,\n  });\n\n  console.log(\"All projects:\", projects);\n  console.log(\"Current filters:\", filters);\n\n  const filteredProjects = projects.filter(project => {\n    // If no filters are set, show all projects\n    if (!filters || Object.keys(filters).length === 0) {\n      return true;\n    }\n    \n    if (filters.sector && filters.sector !== \"all\" && project.sector !== filters.sector) return false;\n    if (filters.projectType && filters.projectType !== \"all\" && project.projectType !== filters.projectType) return false;\n    if (filters.country && filters.country !== \"all\" && project.country !== filters.country) return false;\n    if (filters.city && filters.city !== \"all\" && project.city !== filters.city) return false;\n    if (filters.district && filters.district !== \"all\" && project.district !== filters.district) return false;\n    if (filters.status && filters.status !== \"all\" && project.status !== filters.status) return false;\n    if (filters.companyName && !project.name.toLowerCase().includes(filters.companyName.toLowerCase())) return false;\n    if (filters.minValue && project.investment < filters.minValue) return false;\n    if (filters.maxValue && project.investment > filters.maxValue) return false;\n    return true;\n  });\n\n  console.log(\"Filtered projects:\", filteredProjects);\n\n  const sortedProjects = [...filteredProjects].sort((a, b) => {\n    switch (sortBy) {\n      case \"deadline\":\n        return new Date(a.createdAt || \"\").getTime() - new Date(b.createdAt || \"\").getTime();\n      case \"value\":\n        return (b.investment || 0) - (a.investment || 0);\n      case \"name\":\n        return a.name.localeCompare(b.name);\n      default:\n        return 0;\n    }\n  });\n\n  // Analytics data for contractor insights\n  const getContractorAnalytics = () => {\n    const analytics = {\n      activeProjects: sortedProjects.filter(p => p.status === \"In Progress\" || p.status === \"Under Construction\"),\n      completedProjects: sortedProjects.filter(p => p.status === \"Completed\"),\n      tenderProjects: sortedProjects.filter(p => p.status === \"Tender Open\"),\n      planningProjects: sortedProjects.filter(p => p.status === \"Planning\"),\n      \n      // Contractor workload analysis (simulated based on project names)\n      contractorWorkload: getContractorWorkload(sortedProjects),\n      \n      // Location analysis\n      locationBreakdown: getLocationBreakdown(sortedProjects),\n      \n      // Sector analysis\n      sectorBreakdown: getSectorBreakdown(sortedProjects),\n      \n      // Value analysis\n      valueAnalysis: getValueAnalysis(sortedProjects)\n    };\n    \n    return analytics;\n  };\n\n  const getContractorWorkload = (projects: Project[]) => {\n    // Extract company names from project names (simplified approach)\n    const contractors: Record<string, { projects: number; sectors: string[]; locations: string[]; totalValue: number; status: Record<string, number> }> = {};\n    \n    projects.forEach(project => {\n      // Extract potential contractor name from project name\n      const contractorName = extractContractorName(project.name);\n      \n      if (!contractors[contractorName]) {\n        contractors[contractorName] = {\n          projects: 0,\n          sectors: [],\n          locations: [],\n          totalValue: 0,\n          status: {}\n        };\n      }\n      \n      contractors[contractorName].projects++;\n      contractors[contractorName].totalValue += project.investment;\n      \n      if (!contractors[contractorName].sectors.includes(project.sector)) {\n        contractors[contractorName].sectors.push(project.sector);\n      }\n      \n      const location = `${project.city}, ${project.country}`;\n      if (!contractors[contractorName].locations.includes(location)) {\n        contractors[contractorName].locations.push(location);\n      }\n      \n      contractors[contractorName].status[project.status] = (contractors[contractorName].status[project.status] || 0) + 1;\n    });\n    \n    return Object.entries(contractors)\n      .map(([name, data]) => ({ name, ...data }))\n      .sort((a, b) => b.totalValue - a.totalValue);\n  };\n\n  const extractContractorName = (projectName: string): string => {\n    // Simplified contractor name extraction from project names\n    const commonContractors = [\"Emaar\", \"DAMAC\", \"Aldar\", \"Majid Al Futtaim\", \"Dubai Properties\", \"Nakheel\", \"Sobha\", \"Danube\"];\n    \n    for (const contractor of commonContractors) {\n      if (projectName.toLowerCase().includes(contractor.toLowerCase())) {\n        return contractor;\n      }\n    }\n    \n    // If no known contractor found, use first word of project name\n    return projectName.split(' ')[0] + \" Group\";\n  };\n\n  const getLocationBreakdown = (projects: Project[]) => {\n    const locations: Record<string, { count: number; value: number; sectors: string[] }> = {};\n    \n    projects.forEach(project => {\n      const location = `${project.city}, ${project.country}`;\n      \n      if (!locations[location]) {\n        locations[location] = { count: 0, value: 0, sectors: [] };\n      }\n      \n      locations[location].count++;\n      locations[location].value += project.investment;\n      \n      if (!locations[location].sectors.includes(project.sector)) {\n        locations[location].sectors.push(project.sector);\n      }\n    });\n    \n    return Object.entries(locations)\n      .map(([location, data]) => ({ location, ...data }))\n      .sort((a, b) => b.value - a.value);\n  };\n\n  const getSectorBreakdown = (projects: Project[]) => {\n    const sectors: Record<string, { count: number; value: number; activeProjects: number; completedProjects: number }> = {};\n    \n    projects.forEach(project => {\n      if (!sectors[project.sector]) {\n        sectors[project.sector] = { count: 0, value: 0, activeProjects: 0, completedProjects: 0 };\n      }\n      \n      sectors[project.sector].count++;\n      sectors[project.sector].value += project.investment;\n      \n      if (project.status === \"In Progress\" || project.status === \"Under Construction\") {\n        sectors[project.sector].activeProjects++;\n      } else if (project.status === \"Completed\") {\n        sectors[project.sector].completedProjects++;\n      }\n    });\n    \n    return Object.entries(sectors)\n      .map(([sector, data]) => ({ sector, ...data }))\n      .sort((a, b) => b.value - a.value);\n  };\n\n  const getValueAnalysis = (projects: Project[]) => {\n    const totalValue = projects.reduce((sum, p) => sum + p.investment, 0);\n    const averageValue = totalValue / projects.length;\n    \n    const valueRanges = {\n      small: projects.filter(p => p.investment < 50).length,\n      medium: projects.filter(p => p.investment >= 50 && p.investment < 500).length,\n      mega: projects.filter(p => p.investment >= 500).length\n    };\n    \n    return {\n      totalValue,\n      averageValue,\n      valueRanges\n    };\n  };\n\n  const analytics = getContractorAnalytics();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4 w-64\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/contractor-dashboard\")}\n                className=\"text-gray-600\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <HardHat className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Project Results</h1>\n                  <p className=\"text-gray-600\">Found {sortedProjects.length} matching projects</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Results\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Generate Report\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Active Filters Summary */}\n        {Object.keys(filters).length > 0 && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Active Filters</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {filters.sector && filters.sector !== \"all\" && (\n                  <Badge variant=\"secondary\">Sector: {filters.sector}</Badge>\n                )}\n                {filters.projectType && filters.projectType !== \"all\" && (\n                  <Badge variant=\"secondary\">Type: {filters.projectType}</Badge>\n                )}\n                {filters.country && filters.country !== \"all\" && (\n                  <Badge variant=\"secondary\">Country: {filters.country}</Badge>\n                )}\n                {filters.city && filters.city !== \"all\" && (\n                  <Badge variant=\"secondary\">City: {filters.city}</Badge>\n                )}\n                {filters.district && filters.district !== \"all\" && (\n                  <Badge variant=\"secondary\">District: {filters.district}</Badge>\n                )}\n                {filters.status && filters.status !== \"all\" && (\n                  <Badge variant=\"secondary\">Status: {filters.status}</Badge>\n                )}\n                {filters.companyName && (\n                  <Badge variant=\"secondary\">Company: {filters.companyName}</Badge>\n                )}\n                {(filters.minValue || filters.maxValue) && (\n                  <Badge variant=\"secondary\">\n                    Value: ${filters.minValue || 0}M - ${filters.maxValue || \"∞\"}M\n                  </Badge>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Market Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Projects</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.activeProjects.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Building2 className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Tender Open</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.tenderProjects.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Users className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Contractors</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.contractorWorkload.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <DollarSign className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Value</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">${analytics.valueAnalysis.totalValue.toFixed(0)}M</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Detailed Analysis Tabs */}\n        <Tabs defaultValue=\"projects\" className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"projects\">Project List</TabsTrigger>\n            <TabsTrigger value=\"contractors\">Contractor Analysis</TabsTrigger>\n            <TabsTrigger value=\"locations\">Location Breakdown</TabsTrigger>\n            <TabsTrigger value=\"sectors\">Sector Analysis</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"projects\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Project Opportunities ({sortedProjects.length})\n                </h3>\n                <p className=\"text-gray-600\">Detailed breakdown of active and completed projects</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <select \n                  value={sortBy} \n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                >\n                  <option value=\"deadline\">Sort by Deadline</option>\n                  <option value=\"value\">Sort by Value</option>\n                  <option value=\"name\">Sort by Name</option>\n                </select>\n                <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    className=\"px-3\"\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    className=\"px-3\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n        {/* Projects Grid/List */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : sortedProjects.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <HardHat className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No projects found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Try adjusting your filters to find more projects.\n              </p>\n              <Button variant=\"outline\" onClick={() => setLocation(\"/contractor-dashboard\")}>\n                Modify Filters\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className={cn(\n            viewMode === \"grid\" \n              ? \"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n              : \"space-y-4\"\n          )}>\n            {sortedProjects.map((project) => {\n              const getMainContractor = (project: any) => {\n                // Extract contractor from project data or use default based on project type\n                if (project.name.includes(\"Solar\")) return \"ACWA Power\";\n                if (project.name.includes(\"Metro\")) return \"Samsung C&T Corp\";\n                if (project.name.includes(\"Hospital\")) return \"Drake & Scull\";\n                if (project.name.includes(\"Bridge\")) return \"Samsung C&T Corp\";\n                if (project.name.includes(\"Mall\")) return \"Arabtec Construction\";\n                if (project.name.includes(\"Data Center\")) return \"Khansaheb Civil\";\n                if (project.name.includes(\"Warehouse\")) return \"Al Habtoor Engineering\";\n                return \"Multiple Contractors\";\n              };\n\n              const getCompetitorData = (project: any) => {\n                const competitors = [\n                  { name: \"Arabtec Construction\", projects: 23, focus: \"Mixed-Use\", region: \"UAE\" },\n                  { name: \"Drake & Scull\", projects: 18, focus: \"Healthcare\", region: \"GCC\" },\n                  { name: \"Samsung C&T Corp\", projects: 15, focus: \"Infrastructure\", region: \"MENA\" },\n                  { name: \"ACWA Power\", projects: 12, focus: \"Energy\", region: \"Saudi Arabia\" },\n                  { name: \"Al Habtoor Engineering\", projects: 21, focus: \"Industrial\", region: \"UAE\" },\n                  { name: \"Khansaheb Civil\", projects: 16, focus: \"Technology\", region: \"UAE\" }\n                ];\n                \n                return competitors\n                  .filter(c => c.focus.toLowerCase() === project.sector.toLowerCase() || \n                              c.region === project.country || \n                              c.name === getMainContractor(project))\n                  .slice(0, 3);\n              };\n\n              const mainContractor = getMainContractor(project);\n              const competitors = getCompetitorData(project);\n              const ongoingProjects = Math.floor(Math.random() * 5) + 2;\n              const completedProjects = Math.floor(Math.random() * 15) + 5;\n\n              return (\n                <Card key={project.id} className=\"hover:shadow-lg transition-shadow border-l-4 border-l-cyan-600\">\n                  <CardContent className=\"p-6\">\n                    {/* Header Section */}\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 \n                          className=\"text-lg font-semibold text-gray-900 line-clamp-1 cursor-pointer hover:text-orange-600 transition-colors mb-1\"\n                          onClick={() => {\n                            sessionStorage.setItem('previousPage', window.location.pathname);\n                            setLocation(`/project/${project.id}`);\n                          }}\n                        >\n                          {project.name}\n                        </h3>\n                        <div className=\"flex items-center gap-3 text-sm text-gray-600\">\n                          <span className=\"font-medium\">{project.projectType}</span>\n                          <span>•</span>\n                          <span>${project.investment}M</span>\n                          <span>•</span>\n                          <span>{project.city}, {project.country}</span>\n                        </div>\n                      </div>\n                      <Badge variant={\n                        project.status === \"Tender Open\" ? \"default\" :\n                        project.status === \"Under Construction\" ? \"secondary\" :\n                        project.status === \"Planning\" ? \"outline\" : \"outline\"\n                      } className=\"ml-4\">\n                        {project.status}\n                      </Badge>\n                    </div>\n\n                    {/* Key Stats Grid */}\n                    <div className=\"grid grid-cols-2 gap-4 mb-4 p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"text-xs text-gray-500 uppercase tracking-wide\">Main Contractor</p>\n                        <p className=\"font-medium text-gray-900\">{mainContractor}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500 uppercase tracking-wide\">Region Focus</p>\n                        <p className=\"font-medium text-gray-900\">{project.district}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500 uppercase tracking-wide\">Ongoing Projects</p>\n                        <p className=\"font-medium text-orange-600\">{ongoingProjects} Active</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500 uppercase tracking-wide\">Completed</p>\n                        <p className=\"font-medium text-green-600\">{completedProjects} Done</p>\n                      </div>\n                    </div>\n\n                    {/* Competitor Analysis */}\n                    <div className=\"mb-4\">\n                      <p className=\"text-xs text-gray-500 uppercase tracking-wide mb-2\">Top Competitors in {project.sector}</p>\n                      <div className=\"space-y-2\">\n                        {competitors.map((competitor, index) => (\n                          <div key={index} className=\"flex justify-between items-center p-2 bg-white border rounded text-sm\">\n                            <div>\n                              <span className=\"font-medium text-gray-900\">{competitor.name}</span>\n                              <span className=\"text-gray-500 ml-2\">• {competitor.focus}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <span className=\"font-medium text-gray-700\">{competitor.projects} projects</span>\n                              <br />\n                              <span className=\"text-xs text-gray-500\">{competitor.region}</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {project.sector}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {project.contractType || \"Standard Contract\"}\n                      </Badge>\n                      {project.isSustainable && (\n                        <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700\">\n                          Sustainable\n                        </Badge>\n                      )}\n                      {project.isLuxury && (\n                        <Badge variant=\"outline\" className=\"text-xs bg-purple-50 text-purple-700\">\n                          Premium\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        style={{backgroundColor: '#00a7b2'}} \n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#008a99'} \n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#00a7b2'}\n                        onClick={() => {\n                          sessionStorage.setItem('previousPage', window.location.pathname);\n                          setLocation(`/project/${project.id}`);\n                        }}\n                      >\n                        View Full Profile\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-orange-200 text-orange-700 hover:bg-orange-50\">\n                        Compare\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-orange-200 text-orange-700 hover:bg-orange-50\">\n                        Save\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n          </TabsContent>\n          \n          <TabsContent value=\"contractors\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Contractor Workload Analysis</h3>\n              <p className=\"text-gray-600 mb-6\">Breakdown of which contractors are working on which types of projects</p>\n            </div>\n            \n            <div className=\"grid gap-6\">\n              {analytics.contractorWorkload.slice(0, 10).map((contractor, index) => (\n                <Card key={contractor.name}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-gray-900\">{contractor.name}</h4>\n                        <p className=\"text-gray-600\">{contractor.projects} projects • ${contractor.totalValue.toFixed(0)}M total value</p>\n                      </div>\n                      <Badge variant=\"outline\">#{index + 1} by Value</Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Sectors</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {contractor.sectors.map(sector => (\n                            <Badge key={sector} variant=\"secondary\" className=\"text-xs\">\n                              {sector}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Key Locations</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {contractor.locations.slice(0, 2).map(location => (\n                            <Badge key={location} variant=\"outline\" className=\"text-xs\">\n                              {location}\n                            </Badge>\n                          ))}\n                          {contractor.locations.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{contractor.locations.length - 2} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Project Status</p>\n                        <div className=\"space-y-1\">\n                          {Object.entries(contractor.status).map(([status, count]) => (\n                            <div key={status} className=\"flex justify-between text-xs\">\n                              <span className=\"text-gray-600\">{status}</span>\n                              <span className=\"font-medium\">{count}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4 border-t border-gray-200\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Market Activity Level</span>\n                        <span className=\"font-medium\">\n                          {contractor.projects > 10 ? \"High\" : contractor.projects > 5 ? \"Medium\" : \"Low\"}\n                        </span>\n                      </div>\n                      <Progress \n                        value={Math.min((contractor.projects / 15) * 100, 100)} \n                        className=\"mt-2 h-2\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"locations\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Location Breakdown</h3>\n              <p className=\"text-gray-600 mb-6\">Geographic distribution of projects and market activity</p>\n            </div>\n            \n            <div className=\"grid gap-4\">\n              {analytics.locationBreakdown.map((location, index) => (\n                <Card key={location.location}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <MapPin className=\"w-4 h-4 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900\">{location.location}</h4>\n                          <p className=\"text-sm text-gray-600\">{location.count} projects • ${location.value.toFixed(0)}M total value</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">#{index + 1}</Badge>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {location.sectors.map(sector => (\n                        <Badge key={sector} variant=\"secondary\" className=\"text-xs\">\n                          {sector}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"pt-4 border-t border-gray-200\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Market Concentration</span>\n                        <span className=\"font-medium\">\n                          ${(location.value / location.count).toFixed(0)}M avg per project\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"sectors\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Sector Analysis</h3>\n              <p className=\"text-gray-600 mb-6\">Competitive landscape and market activity by sector</p>\n            </div>\n            \n            <div className=\"grid gap-6\">\n              {analytics.sectorBreakdown.map((sector, index) => (\n                <Card key={sector.sector}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-gray-900\">{sector.sector}</h4>\n                        <p className=\"text-gray-600\">${sector.value.toFixed(0)}M total market value</p>\n                      </div>\n                      <Badge variant=\"outline\">#{index + 1} by Value</Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-gray-900\">{sector.count}</p>\n                        <p className=\"text-sm text-gray-600\">Total Projects</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-green-600\">{sector.activeProjects}</p>\n                        <p className=\"text-sm text-gray-600\">Active</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-blue-600\">{sector.completedProjects}</p>\n                        <p className=\"text-sm text-gray-600\">Completed</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-purple-600\">${(sector.value / sector.count).toFixed(0)}M</p>\n                        <p className=\"text-sm text-gray-600\">Avg Value</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Market Activity</span>\n                        <span className=\"font-medium\">{((sector.activeProjects / sector.count) * 100).toFixed(0)}% active</span>\n                      </div>\n                      <Progress \n                        value={(sector.activeProjects / sector.count) * 100} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":35797},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Grid, List, Download, FileSpreadsheet, Bookmark, Filter, X } from \"lucide-react\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { MarketIndicator } from \"@/components/market-indicator\";\nimport { ProjectComparison } from \"@/components/project-comparison\";\nimport { GlobalHeaderFilter } from \"@/components/global-header-filter\";\nimport { InvestorFiltersComponent } from \"@/components/investor-filters\";\nimport { InvestorInsights } from \"@/components/investor-insights\";\nimport { Project, MarketIndicator as MarketIndicatorType, SearchFilters, InvestorFilters } from \"@shared/schema\";\nimport { UserRole, FilterOptions } from \"@/lib/types\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<UserRole | null>(null);\n  const [searchFilters, setSearchFilters] = useState<SearchFilters>({});\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState(\"relevance\");\n  const [activeFilters, setActiveFilters] = useState<SearchFilters>({});\n  const [comparisonProjects, setComparisonProjects] = useState<Project[]>([]);\n  const [favoriteProjects, setFavoriteProjects] = useState<number[]>([]);\n  const [globalFilters, setGlobalFilters] = useState<{ country?: string; sector?: string }>({});\n  const [investorFilters, setInvestorFilters] = useState<InvestorFilters>({ country: \"Saudi Arabia\" });\n  const [showInsights, setShowInsights] = useState(false);\n\n  useEffect(() => {\n    const role = localStorage.getItem(\"selectedRole\") as UserRole;\n    const filters = localStorage.getItem(\"searchFilters\");\n    \n    if (role) {\n      setSelectedRole(role);\n    }\n    \n    if (filters) {\n      const parsedFilters = JSON.parse(filters);\n      setSearchFilters(parsedFilters);\n      setActiveFilters(parsedFilters);\n    }\n    \n    // Load global filters from localStorage\n    const savedCountry = localStorage.getItem(\"globalCountryFilter\");\n    const savedSector = localStorage.getItem(\"globalSectorFilter\");\n    \n    if (savedCountry || savedSector) {\n      setGlobalFilters({\n        country: savedCountry || undefined,\n        sector: savedSector || undefined,\n      });\n    }\n\n    // Set default country to Saudi Arabia for investors\n    if (role === \"investor\" && !savedCountry) {\n      setGlobalFilters(prev => ({ ...prev, country: \"Saudi Arabia\" }));\n      setInvestorFilters(prev => ({ ...prev, country: \"Saudi Arabia\" }));\n    }\n  }, []);\n\n  // Use investor filters for investor role, otherwise use regular filters\n  const queryFilters = selectedRole === \"investor\" ? investorFilters : { ...activeFilters, ...globalFilters };\n  \n  const { data: projects = [], isLoading: isLoadingProjects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", queryFilters],\n    enabled: true,\n  });\n\n  const { data: marketIndicators = [], isLoading: isLoadingIndicators } = useQuery<MarketIndicatorType[]>({\n    queryKey: [\"/api/market-indicators\"],\n  });\n\n  const { data: filterOptions } = useQuery<FilterOptions>({\n    queryKey: [\"/api/filter-options\"],\n  });\n\n  const handleFilterChange = (key: keyof SearchFilters, value: string | number | boolean | null) => {\n    const newFilters = {\n      ...activeFilters,\n      [key]: value === null || value === \"\" || value === \"All\" ? undefined : value\n    };\n    setActiveFilters(newFilters);\n  };\n\n  const handleGlobalFilterChange = (newGlobalFilters: { country?: string; sector?: string }) => {\n    setGlobalFilters(newGlobalFilters);\n  };\n\n  const removeFilter = (key: keyof SearchFilters) => {\n    const newFilters = { ...activeFilters };\n    delete newFilters[key];\n    setActiveFilters(newFilters);\n  };\n\n  const handleToggleFavorite = (projectId: number) => {\n    setFavoriteProjects(prev => \n      prev.includes(projectId) \n        ? prev.filter(id => id !== projectId)\n        : [...prev, projectId]\n    );\n  };\n\n  const handleAddToComparison = (project: Project) => {\n    if (comparisonProjects.length >= 4) {\n      toast({\n        title: \"Comparison Limit\",\n        description: \"You can compare up to 4 projects at a time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (comparisonProjects.find(p => p.id === project.id)) {\n      toast({\n        title: \"Already Added\",\n        description: \"This project is already in your comparison.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setComparisonProjects(prev => [...prev, project]);\n    toast({\n      title: \"Added to Comparison\",\n      description: `${project.name} has been added to comparison.`,\n    });\n  };\n\n  const handleRemoveFromComparison = (projectId: number) => {\n    setComparisonProjects(prev => prev.filter(p => p.id !== projectId));\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your project data is being prepared for download.\",\n    });\n  };\n\n  const handleSaveSearch = () => {\n    toast({\n      title: \"Search Saved\",\n      description: \"Your search criteria has been saved to your profile.\",\n    });\n  };\n\n  const handleInvestorFiltersChange = (filters: InvestorFilters) => {\n    setInvestorFilters(filters);\n  };\n\n  const handleGetInsights = () => {\n    setShowInsights(true);\n    toast({\n      title: \"Market Analysis Generated\",\n      description: \"District-level insights and market gap indicators are now available.\",\n    });\n  };\n\n  const getActiveFilterEntries = () => {\n    return Object.entries(activeFilters).filter(([, value]) => value !== undefined);\n  };\n\n  if (isLoadingProjects || isLoadingIndicators) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Global Header Filter */}\n      <GlobalHeaderFilter \n        onFilterChange={handleGlobalFilterChange}\n        initialFilters={globalFilters}\n      />\n      \n      <div className=\"flex\">\n        {/* Sidebar Filters */}\n        <div className=\"filter-sidebar\">\n          <div className=\"p-6\">\n            {selectedRole === \"investor\" ? (\n              <InvestorFiltersComponent \n                filters={investorFilters}\n                onFiltersChange={handleInvestorFiltersChange}\n                onGetInsights={handleGetInsights}\n              />\n            ) : (\n              <>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-lg font-semibold text-slate-900\">Filters</h2>\n                  <Filter size={18} className=\"text-slate-400\" />\n                </div>\n\n            {/* Active Filters */}\n            {getActiveFilterEntries().length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-sm font-medium text-slate-700 mb-3\">Active Filters</h3>\n                <div className=\"space-y-2\">\n                  {getActiveFilterEntries().map(([key, value]) => (\n                    <Badge key={key} variant=\"secondary\" className=\"flex items-center justify-between\">\n                      <span className=\"text-xs\">{String(value)}</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFilter(key as keyof SearchFilters)}\n                        className=\"ml-1 h-auto p-0 text-slate-500 hover:text-slate-700\"\n                      >\n                        <X size={12} />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Filter Sections */}\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-sm font-medium text-slate-700 mb-3\">Project Type</h3>\n                <div className=\"space-y-2\">\n                  {filterOptions?.projectTypes.map(type => (\n                    <div key={type} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`type-${type}`}\n                        checked={activeFilters.projectType === type}\n                        onCheckedChange={(checked) => \n                          handleFilterChange(\"projectType\", checked ? type : null)\n                        }\n                      />\n                      <label \n                        htmlFor={`type-${type}`}\n                        className=\"text-sm text-slate-600 cursor-pointer\"\n                      >\n                        {type}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"text-sm font-medium text-slate-700 mb-3\">Status</h3>\n                <div className=\"space-y-2\">\n                  {filterOptions?.statuses.map(status => (\n                    <div key={status} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`status-${status}`}\n                        checked={activeFilters.status === status}\n                        onCheckedChange={(checked) => \n                          handleFilterChange(\"status\", checked ? status : null)\n                        }\n                      />\n                      <label \n                        htmlFor={`status-${status}`}\n                        className=\"text-sm text-slate-600 cursor-pointer\"\n                      >\n                        {status}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"text-sm font-medium text-slate-700 mb-3\">Special Features</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"luxury\"\n                      checked={activeFilters.isLuxury === true}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"isLuxury\", checked ? true : null)\n                      }\n                    />\n                    <label htmlFor=\"luxury\" className=\"text-sm text-slate-600 cursor-pointer\">\n                      Luxury Projects\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"waterfront\"\n                      checked={activeFilters.isWaterfront === true}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"isWaterfront\", checked ? true : null)\n                      }\n                    />\n                    <label htmlFor=\"waterfront\" className=\"text-sm text-slate-600 cursor-pointer\">\n                      Waterfront Properties\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"sustainable\"\n                      checked={activeFilters.isSustainable === true}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"isSustainable\", checked ? true : null)\n                      }\n                    />\n                    <label htmlFor=\"sustainable\" className=\"text-sm text-slate-600 cursor-pointer\">\n                      Sustainable Development\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 ml-80\">\n          <div className=\"p-6\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-slate-900\">Project Dashboard</h1>\n                <p className=\"text-slate-600 mt-1\">\n                  Found <span className=\"font-medium\">{projects.length} projects</span> matching your criteria\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-slate-600\">View:</span>\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                  >\n                    <Grid size={16} />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                  >\n                    <List size={16} />\n                  </Button>\n                </div>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"relevance\">Sort by: Relevance</SelectItem>\n                    <SelectItem value=\"investment\">Investment Size</SelectItem>\n                    <SelectItem value=\"completion\">Completion Date</SelectItem>\n                    <SelectItem value=\"roi\">ROI Potential</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Investor Insights or Market Indicators */}\n            {selectedRole === \"investor\" && showInsights ? (\n              <div className=\"mb-8\">\n                <InvestorInsights \n                  projects={projects}\n                  selectedLocation={`${investorFilters.city || investorFilters.country || \"\"}${investorFilters.district ? ` → ${investorFilters.district}` : \"\"}`}\n                  selectedSector={investorFilters.sector}\n                  selectedSubSector={investorFilters.subSector}\n                />\n              </div>\n            ) : (\n              <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n                {marketIndicators.map((indicator) => (\n                  <MarketIndicator key={indicator.id} indicator={indicator} />\n                ))}\n              </div>\n            )}\n\n            {/* Project Comparison Module */}\n            <div className=\"mb-8\">\n              <ProjectComparison\n                projects={comparisonProjects}\n                onAddProject={() => {\n                  toast({\n                    title: \"Add Project\",\n                    description: \"Click the info button on any project card to add it to comparison.\",\n                  });\n                }}\n                onRemoveProject={handleRemoveFromComparison}\n              />\n            </div>\n\n            {/* Project Grid */}\n            <div className={cn(\n              \"grid gap-6 mb-8\",\n              viewMode === \"grid\" ? \"lg:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"\n            )}>\n              {projects.map((project) => (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  onToggleFavorite={handleToggleFavorite}\n                  onViewDetails={handleAddToComparison}\n                  isFavorite={favoriteProjects.includes(project.id)}\n                />\n              ))}\n            </div>\n\n            {projects.length === 0 && (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Projects Found</h3>\n                  <p className=\"text-slate-600\">\n                    Try adjusting your search criteria or removing some filters.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Export & Save Options */}\n            <div className=\"flex items-center justify-center\">\n              <div className=\"flex items-center space-x-4\">\n                <Button variant=\"outline\" onClick={handleExportData}>\n                  <Download className=\"mr-2\" size={16} />\n                  Export Report\n                </Button>\n                <Button variant=\"outline\" onClick={handleExportData}>\n                  <FileSpreadsheet className=\"mr-2\" size={16} />\n                  Export Data\n                </Button>\n                <Button onClick={handleSaveSearch}>\n                  <Bookmark className=\"mr-2\" size={16} />\n                  Save Search\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17518},"client/src/pages/homepage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Building, Search, MapPin, DollarSign, Calendar, Newspaper, TrendingUp, Star } from \"lucide-react\";\nimport logoPath from \"@assets/Colored SI Logo_1752857295177.png\";\n\ninterface Project {\n  id: string;\n  name: string;\n  location: string;\n  sector: string;\n  status: string;\n  investment: number;\n  completionDate: string;\n  description: string;\n}\n\ninterface Sector {\n  name: string;\n  projectCount: number;\n  growthRate: string;\n  averageValue: number;\n}\n\ninterface HomepageProps {\n  userRole?: string;\n}\n\nexport default function Homepage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [, setLocation] = useLocation();\n  \n  // Get user role from localStorage with explicit logging\n  const userRole = localStorage.getItem(\"selectedRole\") || \"\";\n  console.log(\"Homepage - detected userRole:\", userRole);\n\n  // Fetch latest projects\n  const { data: latestProjects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  // Fetch trending sectors\n  const { data: trendingSectors = [] } = useQuery<Sector[]>({\n    queryKey: ['/api/trending-sectors'],\n  });\n\n  // Featured projects (using first 3 from all projects)\n  const featuredProjects = latestProjects.slice(0, 3);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(searchTerm)}`);\n    }\n  };\n\n  const getStartedPath = () => {\n    switch (userRole) {\n      case \"contractor\": return \"/contractor-dashboard\";\n      case \"investor\": return \"/investor-dashboard\";\n      case \"consultant\": return \"/consultant-dashboard\";\n      case \"developer\": return \"/developer-dashboard\";\n      case \"supplier\": return \"/supplier-dashboard\";\n      default: return \"/search\";\n    }\n  };\n\n  const getRoleWelcomeMessage = () => {\n    const roleNames = {\n      contractor: \"Ahmed\",\n      investor: \"Sarah\",\n      consultant: \"Michael\",\n      developer: \"Fatima\",\n      supplier: \"Omar\"\n    };\n    \n    const name = roleNames[userRole as keyof typeof roleNames] || \"User\";\n    \n    switch (userRole) {\n      case \"contractor\":\n        return {\n          title: `Welcome ${name}!`,\n          subtitle: \"Discover active projects and bidding opportunities\",\n          cta: \"Find Projects\"\n        };\n      case \"investor\":\n        return {\n          title: `Welcome ${name}!`,\n          subtitle: \"Explore investment opportunities and market trends\",\n          cta: \"Analyze Investments\"\n        };\n      case \"consultant\":\n        return {\n          title: `Welcome ${name}!`,\n          subtitle: \"Access market insights and advisory data\",\n          cta: \"View Market Analysis\"\n        };\n      case \"developer\":\n        return {\n          title: `Welcome ${name}!`,\n          subtitle: \"Find development sites and market gaps\",\n          cta: \"Explore Opportunities\"\n        };\n      case \"supplier\":\n        return {\n          title: `Welcome ${name}!`,\n          subtitle: \"Connect with material and equipment opportunities\",\n          cta: \"Find Supply Opportunities\"\n        };\n      default:\n        return {\n          title: \"Welcome to Sector Intelligence\",\n          subtitle: \"Professional project discovery and market intelligence\",\n          cta: \"Get Started\"\n        };\n    }\n  };\n\n  const welcomeData = getRoleWelcomeMessage();\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      notation: 'compact',\n      maximumFractionDigits: 1\n    }).format(value);\n  };\n\n  return (\n    <div className=\"bg-white\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-900 mb-6\">\n              {welcomeData.title}\n            </h1>\n            <p className=\"text-xl text-slate-600 max-w-2xl mx-auto mb-8\">\n              {welcomeData.subtitle}\n            </p>\n            <Button \n              size=\"lg\" \n              onClick={() => setLocation(getStartedPath())}\n              className=\"px-8 py-3 text-lg\"\n            >\n              {welcomeData.cta}\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Content Sections */}\n      <div className=\"py-20\" style={{ backgroundColor: '#0a1b3d' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Latest Projects */}\n          <section className=\"mb-20\">\n            <div className=\"flex items-center justify-between mb-12\">\n              <div className=\"text-center flex-1\">\n                <div className=\"flex items-center justify-center mb-4\">\n                  <Newspaper className=\"w-8 h-8 text-teal-400 mr-3\" />\n                  <h2 className=\"text-3xl font-bold text-white\">Latest Projects</h2>\n                </div>\n                <p className=\"text-lg text-gray-300 max-w-2xl mx-auto\">\n                  Discover the newest investment opportunities and development projects across the MENA region\n                </p>\n              </div>\n              <Link href=\"/search\">\n                <Button variant=\"outline\" className=\"ml-8\">\n                  View All Projects\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {latestProjects.slice(0, 6).map((project) => (\n                <div key={project.id} className=\"bg-white border border-gray-100 rounded-lg overflow-hidden hover:shadow-xl transition-shadow cursor-pointer\">\n                  <div className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 \n                        className=\"text-lg font-semibold text-gray-900 line-clamp-1 cursor-pointer hover:text-blue-600 transition-colors\"\n                        onClick={() => {\n                          sessionStorage.setItem('previousPage', window.location.pathname);\n                          setLocation(`/project/${project.id}`);\n                        }}\n                      >\n                        {project.name}\n                      </h3>\n                      <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                        {project.status}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500 mb-4\">\n                      <MapPin size={14} className=\"mr-1\" />\n                      {project.location}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-6 line-clamp-2\">\n                      {project.description}\n                    </p>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                      <div className=\"flex items-center\">\n                        <DollarSign size={14} className=\"mr-1 text-primary\" />\n                        <span className=\"font-medium text-gray-900\">{formatCurrency(project.investment * 1000000)}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Calendar size={14} className=\"mr-1 text-primary\" />\n                        <span className=\"text-gray-600\">{project.completionDate}</span>\n                      </div>\n                    </div>\n                    <span className=\"inline-block bg-primary/10 text-primary text-xs px-3 py-1 rounded-full\">\n                      {project.sector}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n\n          {/* Trending Sectors */}\n          <section className=\"mb-20 py-16 px-8 rounded-2xl\" style={{ backgroundColor: '#00a7b2' }}>\n            <div className=\"text-center mb-12\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <TrendingUp className=\"w-8 h-8 text-white mr-3\" />\n                <h2 className=\"text-3xl font-bold text-white\">Trending Sectors</h2>\n              </div>\n              <p className=\"text-lg text-gray-100 max-w-2xl mx-auto\">\n                Browse the most active investment sectors with growth opportunities\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {trendingSectors.slice(0, 4).map((sector, index) => (\n                <div key={index} className=\"bg-white border border-gray-100 rounded-lg p-6 hover:shadow-lg transition-shadow cursor-pointer\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <h3 className=\"font-semibold text-gray-900\">{sector.name}</h3>\n                    <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full\">\n                      {sector.growthRate}\n                    </span>\n                  </div>\n                  <div className=\"space-y-3 text-sm text-gray-600\">\n                    <div className=\"flex justify-between\">\n                      <span>Projects:</span>\n                      <span className=\"font-medium text-gray-900\">{sector.projectCount}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Avg. Value:</span>\n                      <span className=\"font-medium text-gray-900\">{formatCurrency(sector.averageValue)}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n\n          {/* Featured Project Profiles */}\n          <section className=\"mb-20\">\n            <div className=\"text-center mb-12\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <Star className=\"w-8 h-8 text-yellow-400 mr-3\" />\n                <h2 className=\"text-3xl font-bold text-[#ffffff]\">Featured Project Profiles</h2>\n              </div>\n              <p className=\"text-lg max-w-2xl mx-auto text-[#ffffff]\">\n                Explore detailed profiles of high-value investment opportunities\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {featuredProjects.map((project) => (\n                <div key={project.id} className=\"bg-white border border-gray-100 rounded-lg overflow-hidden hover:shadow-xl transition-shadow\">\n                  <div className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 \n                        className=\"text-lg font-semibold text-gray-900 line-clamp-1 cursor-pointer hover:text-blue-600 transition-colors\"\n                        onClick={() => {\n                          sessionStorage.setItem('previousPage', window.location.pathname);\n                          setLocation(`/project/${project.id}`);\n                        }}\n                      >\n                        {project.name}\n                      </h3>\n                      <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                        {project.status}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500 mb-4\">\n                      <MapPin size={14} className=\"mr-1\" />\n                      {project.location}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-6 line-clamp-2\">\n                      {project.description}\n                    </p>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                      <div className=\"flex items-center\">\n                        <DollarSign size={14} className=\"mr-1 text-primary\" />\n                        <span className=\"font-medium text-gray-900\">{formatCurrency(project.investment * 1000000)}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Calendar size={14} className=\"mr-1 text-primary\" />\n                        <span className=\"text-gray-600\">{project.completionDate}</span>\n                      </div>\n                    </div>\n                    <span className=\"inline-block bg-primary/10 text-primary text-xs px-3 py-1 rounded-full\">\n                      {project.sector}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        </div>\n      </div>\n      {/* Call to Action */}\n      <div className=\"bg-gray-50 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Unlock Market Intelligence?\n          </h2>\n          <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Join thousands of professionals accessing real-time market data and investment opportunities across the MENA region.\n          </p>\n          <Link href=\"/role-selection\">\n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 text-lg rounded-full\"\n            >\n              Get Started Today\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13632},"client/src/pages/investor-search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Search, \n  Filter, \n  X, \n  Download, \n  Bookmark, \n  TrendingUp, \n  MapPin, \n  DollarSign, \n  Calendar,\n  BarChart3,\n  Building2,\n  Zap,\n  Factory,\n  Fuel\n} from \"lucide-react\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { Project, InvestorFilters } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Sector configuration with icons and sub-sectors\nconst SECTORS_CONFIG = {\n  \"Real Estate\": {\n    icon: Building2,\n    color: \"#0a1b3d\",\n    subSectors: [\"Residential\", \"Commercial\", \"Hospitality\", \"Retail\", \"Mixed-use\"]\n  },\n  \"Infrastructure\": {\n    icon: BarChart3,\n    color: \"#00a7b2\",\n    subSectors: [\"Roads\", \"Bridges\", \"Airports\", \"Ports\", \"Utilities Infrastructure\"]\n  },\n  \"Energy\": {\n    icon: Zap,\n    color: \"#f59e0b\",\n    subSectors: [\"Renewable Energy (Solar, Wind)\", \"Power Plants\", \"Energy Storage\"]\n  },\n  \"Industry\": {\n    icon: Factory,\n    color: \"#10b981\",\n    subSectors: [\"Industrial Parks\", \"Manufacturing Zones\", \"Logistics Hubs\"]\n  },\n  \"Oil & Gas\": {\n    icon: Fuel,\n    color: \"#ef4444\",\n    subSectors: [\"Refineries\", \"Petrochemical Plants\", \"Distribution Facilities\"]\n  }\n};\n\nconst COUNTRIES = [\"Saudi Arabia\", \"United Arab Emirates\", \"Qatar\", \"Kuwait\", \"Bahrain\", \"Oman\"];\nconst STATUSES = [\"Planning\", \"Under Construction\", \"Nearing Completion\", \"Completed / Operational\"];\nconst RISK_LEVELS = [\"Low\", \"Medium\", \"High\"];\n\nexport default function InvestorSearch() {\n  const { toast } = useToast();\n  const [filters, setFilters] = useState<InvestorFilters>({\n    country: \"Saudi Arabia\"\n  });\n  const [savedSearches, setSavedSearches] = useState<string[]>([]);\n  const [comparisonProjects, setComparisonProjects] = useState<Project[]>([]);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", filters],\n    enabled: true,\n  });\n\n  const { data: cities = [] } = useQuery<string[]>({\n    queryKey: [\"/api/cities\", filters.country],\n    enabled: !!filters.country,\n  });\n\n  const { data: districts = [] } = useQuery<string[]>({\n    queryKey: [\"/api/districts\", filters.country, filters.city],\n    enabled: !!filters.country && !!filters.city,\n  });\n\n  const handleFilterChange = (key: keyof InvestorFilters, value: any) => {\n    const newFilters = { ...filters, [key]: value };\n    \n    // Reset dependent filters\n    if (key === \"country\") {\n      newFilters.city = undefined;\n      newFilters.district = undefined;\n    } else if (key === \"city\") {\n      newFilters.district = undefined;\n    } else if (key === \"sector\") {\n      newFilters.subSector = undefined;\n    }\n    \n    setFilters(newFilters);\n  };\n\n  const removeFilter = (key: keyof InvestorFilters) => {\n    const newFilters = { ...filters };\n    delete newFilters[key];\n    setFilters(newFilters);\n  };\n\n  const clearAllFilters = () => {\n    setFilters({ country: \"Saudi Arabia\" });\n  };\n\n  const saveCurrentSearch = () => {\n    const searchName = `Search ${new Date().toLocaleDateString()}`;\n    setSavedSearches(prev => [...prev, searchName]);\n    toast({\n      title: \"Search Saved\",\n      description: \"Your investment search criteria has been saved.\",\n    });\n  };\n\n  const exportResults = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your investment analysis report is being prepared.\",\n    });\n  };\n\n  const getActiveFilterCount = () => {\n    return Object.values(filters).filter(value => value !== undefined && value !== \"\").length;\n  };\n\n  const selectedSectorConfig = filters.sector ? SECTORS_CONFIG[filters.sector as keyof typeof SECTORS_CONFIG] : null;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Loading investment opportunities...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-slate-900\">Investor Search Module</h1>\n                <p className=\"text-slate-600 mt-1\">\n                  Discover and analyze investment opportunities across MENA region sectors\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Button variant=\"outline\" onClick={saveCurrentSearch}>\n                  <Bookmark className=\"mr-2\" size={16} />\n                  Save Search\n                </Button>\n                <Button onClick={exportResults}>\n                  <Download className=\"mr-2\" size={16} />\n                  Export Analysis\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          \n          {/* Advanced Filters Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Filter className=\"mr-2\" size={18} />\n                    Investment Filters\n                  </span>\n                  {getActiveFilterCount() > 1 && (\n                    <Badge variant=\"secondary\">{getActiveFilterCount() - 1}</Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                \n                {/* Location Filters */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Location</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <div>\n                      <Label htmlFor=\"country\" className=\"text-xs text-slate-500\">Country</Label>\n                      <Select \n                        value={filters.country || \"\"} \n                        onValueChange={(value) => handleFilterChange(\"country\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select country\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {COUNTRIES.map(country => (\n                            <SelectItem key={country} value={country}>{country}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {filters.country && (\n                      <div>\n                        <Label htmlFor=\"city\" className=\"text-xs text-slate-500\">City</Label>\n                        <Select \n                          value={filters.city || \"\"} \n                          onValueChange={(value) => handleFilterChange(\"city\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select city\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Cities</SelectItem>\n                            {cities.map(city => (\n                              <SelectItem key={city} value={city}>{city}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                    \n                    {filters.city && (\n                      <div>\n                        <Label htmlFor=\"district\" className=\"text-xs text-slate-500\">District (Optional)</Label>\n                        <Select \n                          value={filters.district || \"\"} \n                          onValueChange={(value) => handleFilterChange(\"district\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select district\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Districts</SelectItem>\n                            {districts.map(district => (\n                              <SelectItem key={district} value={district}>{district}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Sector Selection */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Sector</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <Select \n                      value={filters.sector || \"\"} \n                      onValueChange={(value) => handleFilterChange(\"sector\", value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select main sector\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All Sectors</SelectItem>\n                        {Object.entries(SECTORS_CONFIG).map(([sector, config]) => {\n                          const Icon = config.icon;\n                          return (\n                            <SelectItem key={sector} value={sector}>\n                              <div className=\"flex items-center\">\n                                <Icon size={16} className=\"mr-2\" style={{ color: config.color }} />\n                                {sector}\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                    \n                    {selectedSectorConfig && (\n                      <div>\n                        <Label htmlFor=\"subSector\" className=\"text-xs text-slate-500\">Sub-Sector</Label>\n                        <Select \n                          value={filters.subSector || \"\"} \n                          onValueChange={(value) => handleFilterChange(\"subSector\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select sub-sector\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Sub-Sectors</SelectItem>\n                            {selectedSectorConfig.subSectors.map(subSector => (\n                              <SelectItem key={subSector} value={subSector}>{subSector}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Project Status */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Project Status</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {STATUSES.map(status => (\n                      <div key={status} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`status-${status}`}\n                          checked={filters.status === status}\n                          onCheckedChange={(checked) => \n                            handleFilterChange(\"status\", checked ? status : undefined)\n                          }\n                        />\n                        <label \n                          htmlFor={`status-${status}`}\n                          className=\"text-sm text-slate-600 cursor-pointer\"\n                        >\n                          {status}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Investment Range */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Investment Range (USD Millions)</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label htmlFor=\"minInvestment\" className=\"text-xs text-slate-500\">Min</Label>\n                        <Input\n                          id=\"minInvestment\"\n                          type=\"number\"\n                          placeholder=\"0\"\n                          value={filters.minInvestment || \"\"}\n                          onChange={(e) => handleFilterChange(\"minInvestment\", Number(e.target.value) || undefined)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"maxInvestment\" className=\"text-xs text-slate-500\">Max</Label>\n                        <Input\n                          id=\"maxInvestment\"\n                          type=\"number\"\n                          placeholder=\"1000\"\n                          value={filters.maxInvestment || \"\"}\n                          onChange={(e) => handleFilterChange(\"maxInvestment\", Number(e.target.value) || undefined)}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* ROI Range */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Expected ROI (%)</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label htmlFor=\"minRoi\" className=\"text-xs text-slate-500\">Min</Label>\n                        <Input\n                          id=\"minRoi\"\n                          type=\"number\"\n                          placeholder=\"0\"\n                          value={filters.minRoi || \"\"}\n                          onChange={(e) => handleFilterChange(\"minRoi\", Number(e.target.value) || undefined)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"maxRoi\" className=\"text-xs text-slate-500\">Max</Label>\n                        <Input\n                          id=\"maxRoi\"\n                          type=\"number\"\n                          placeholder=\"50\"\n                          value={filters.maxRoi || \"\"}\n                          onChange={(e) => handleFilterChange(\"maxRoi\", Number(e.target.value) || undefined)}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Risk Level */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700\">Risk Assessment</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {RISK_LEVELS.map(level => (\n                      <div key={level} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`risk-${level}`}\n                          checked={filters.riskLevel === level}\n                          onCheckedChange={(checked) => \n                            handleFilterChange(\"riskLevel\", checked ? level : undefined)\n                          }\n                        />\n                        <label \n                          htmlFor={`risk-${level}`}\n                          className=\"text-sm text-slate-600 cursor-pointer\"\n                        >\n                          {level} Risk\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Clear Filters */}\n                {getActiveFilterCount() > 1 && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={clearAllFilters}\n                    className=\"w-full\"\n                  >\n                    <X className=\"mr-2\" size={16} />\n                    Clear All Filters\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results Section */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"space-y-6\">\n              \n              {/* Results Summary */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-slate-900\">Investment Opportunities</h2>\n                      <p className=\"text-slate-600\">\n                        Found <span className=\"font-medium\">{projects.length} projects</span> matching your investment criteria\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"text-green-500\" size={20} />\n                      <span className=\"text-sm text-slate-600\">Market confidence: High</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Active Filters Display */}\n              {getActiveFilterCount() > 1 && (\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-slate-700\">Active Filters:</span>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={clearAllFilters}\n                        className=\"text-slate-500 hover:text-slate-700\"\n                      >\n                        Clear All\n                      </Button>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {Object.entries(filters).map(([key, value]) => {\n                        if (!value || key === \"country\") return null;\n                        return (\n                          <Badge key={key} variant=\"secondary\" className=\"flex items-center\">\n                            <span className=\"text-xs\">{String(value)}</span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFilter(key as keyof InvestorFilters)}\n                              className=\"ml-1 h-auto p-0 text-slate-500 hover:text-slate-700\"\n                            >\n                              <X size={12} />\n                            </Button>\n                          </Badge>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Project Results */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {projects.map((project) => (\n                  <ProjectCard\n                    key={project.id}\n                    project={project}\n                    onToggleFavorite={() => {}}\n                    onViewDetails={() => {}}\n                    isFavorite={false}\n                  />\n                ))}\n              </div>\n\n              {projects.length === 0 && (\n                <Card className=\"text-center py-12\">\n                  <CardContent>\n                    <Search className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n                    <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Investment Opportunities Found</h3>\n                    <p className=\"text-slate-600 mb-4\">\n                      Try adjusting your search criteria or expanding your location filters.\n                    </p>\n                    <Button onClick={clearAllFilters}>\n                      Clear Filters & Browse All\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21273},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/role-selection.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Building, ChartLine, HardHat, Lightbulb, DraftingCompass, Truck, CircleUser, ArrowRight } from \"lucide-react\";\nimport logoPath from \"@assets/Colored SI Logo_1752857295177.png\";\nimport { cn } from \"@/lib/utils\";\nimport { UserRole, roleColors } from \"@/lib/types\";\n\nconst roles = [\n  {\n    id: \"investor\" as UserRole,\n    title: \"Investor\",\n    description: \"Investment opportunities & market trends\",\n    icon: ChartLine,\n    features: [\"ROI Analysis\", \"Market Comparisons\", \"Investment Reports\"],\n    color: \"investor\",\n  },\n  {\n    id: \"contractor\" as UserRole,\n    title: \"Contractor\",\n    description: \"Active projects & bidding opportunities\",\n    icon: HardHat,\n    features: [\"Project Pipeline\", \"Tender Alerts\", \"Construction Timeline\"],\n    color: \"contractor\",\n  },\n  {\n    id: \"consultant\" as UserRole,\n    title: \"Consultant\",\n    description: \"Market insights & advisory data\",\n    icon: Lightbulb,\n    features: [\"Market Analysis\", \"Feasibility Studies\", \"Trend Reports\"],\n    color: \"consultant\",\n  },\n  {\n    id: \"developer\" as UserRole,\n    title: \"Developer\",\n    description: \"Development sites & market gaps\",\n    icon: DraftingCompass,\n    features: [\"Site Analysis\", \"Zoning Data\", \"Competition Mapping\"],\n    color: \"developer\",\n  },\n  {\n    id: \"supplier\" as UserRole,\n    title: \"Supplier\",\n    description: \"Materials & equipment for projects\",\n    icon: Truck,\n    features: [\"Supply Opportunities\", \"Material Demand\", \"Project Schedules\"],\n    color: \"supplier\",\n  },\n  {\n    id: \"others\" as UserRole,\n    title: \"Others\",\n    description: \"General project discovery & insights\",\n    icon: CircleUser,\n    features: [\"Project Discovery\", \"Market Overview\", \"Industry Trends\"],\n    color: \"others\",\n  },\n];\n\nexport default function RoleSelection() {\n  const [selectedRole, setSelectedRole] = useState<UserRole | null>(null);\n  const [, setLocation] = useLocation();\n\n  const handleContinue = () => {\n    if (selectedRole) {\n      // Clear any existing role data first\n      localStorage.removeItem(\"selectedRole\");\n      localStorage.removeItem(\"userName\");\n      \n      // Store new role in localStorage for persistence\n      localStorage.setItem(\"selectedRole\", selectedRole);\n      \n      console.log(\"Role selection - storing role:\", selectedRole);\n      \n      // Trigger custom event to notify other components of role change\n      window.dispatchEvent(new CustomEvent(\"roleChanged\"));\n      \n      // Route to homepage after role selection\n      setLocation(\"/\");\n    }\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100\">\n      <div className=\"pt-16 pb-12\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-900 mb-4\">\n              Sector Intelligence\n            </h1>\n            <p className=\"text-xl text-slate-600 max-w-2xl mx-auto\">\n              Professional project discovery and market intelligence platform for real estate and development professionals\n            </p>\n          </div>\n\n          <div className=\"flex flex-wrap justify-center gap-6 mt-12\">\n            {roles.map((role) => {\n              const Icon = role.icon;\n              const isSelected = selectedRole === role.id;\n              \n              return (\n                <Card\n                  key={role.id}\n                  className={cn(\n                    \"role-card border-2 border-transparent hover:shadow-xl transition-all duration-300 cursor-pointer w-64 h-48\",\n                    isSelected && \"border-primary bg-blue-50 selected\"\n                  )}\n                  onClick={() => setSelectedRole(role.id)}\n                >\n                  <CardContent className=\"p-8 text-center h-full flex flex-col justify-center\">\n                    <div \n                      className=\"w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\"\n                      style={{ backgroundColor: `${roleColors[role.id]}10` }}\n                    >\n                      <Icon \n                        size={24} \n                        style={{ color: roleColors[role.id] }}\n                      />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-6\">{role.title}</h3>\n                    <div className=\"flex items-center justify-center\">\n                      <p className=\"text-slate-700 text-sm pl-[5px] pr-[5px]\">{role.description}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-12\">\n            <Button\n              size=\"lg\"\n              onClick={handleContinue}\n              disabled={!selectedRole}\n              className={cn(\n                \"px-8 py-3 text-lg\",\n                !selectedRole && \"opacity-50 cursor-not-allowed\"\n              )}\n            >\n              <ArrowRight className=\"mr-2\" size={20} />\n              {selectedRole ? \"Continue to Search\" : \"Select Your Role to Continue\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5370},"client/src/pages/search-filter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Settings, Zap } from \"lucide-react\";\nimport { UserRole, FilterOptions } from \"@/lib/types\";\nimport { SearchFilters } from \"@shared/schema\";\nimport { GlobalHeaderFilter } from \"@/components/global-header-filter\";\n\nconst quickFilters = [\n  \"Luxury Residential\",\n  \"High ROI Projects\", \n  \"Waterfront Properties\",\n  \"Off-Plan Projects\",\n  \"Ready to Move\"\n];\n\nexport default function SearchFilter() {\n  const [, setLocation] = useLocation();\n  const [selectedRole, setSelectedRole] = useState<UserRole | null>(null);\n  const [filters, setFilters] = useState<SearchFilters>({});\n  const [globalFilters, setGlobalFilters] = useState<{ country?: string; sector?: string }>({});\n\n  useEffect(() => {\n    const role = localStorage.getItem(\"selectedRole\") as UserRole;\n    if (role) {\n      setSelectedRole(role);\n    }\n    \n    // Load global filters from localStorage\n    const savedCountry = localStorage.getItem(\"globalCountryFilter\");\n    const savedSector = localStorage.getItem(\"globalSectorFilter\");\n    \n    if (savedCountry || savedSector) {\n      setGlobalFilters({\n        country: savedCountry || undefined,\n        sector: savedSector || undefined,\n      });\n    }\n  }, []);\n\n  const { data: filterOptions, isLoading: isLoadingOptions } = useQuery<FilterOptions>({\n    queryKey: [\"/api/filter-options\"],\n  });\n\n  const handleFilterChange = (key: keyof SearchFilters, value: string | number | boolean) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value === \"All\" || value === \"\" ? undefined : value\n    }));\n  };\n\n  const handleSearch = () => {\n    // Combine global filters with local filters\n    const combinedFilters = {\n      ...filters,\n      ...globalFilters,\n    };\n    \n    // Store combined search filters in localStorage\n    localStorage.setItem(\"searchFilters\", JSON.stringify(combinedFilters));\n    \n    // Navigate to role-specific dashboard\n    const currentRole = localStorage.getItem(\"selectedRole\");\n    const roleBasedDashboard = currentRole ? `/${currentRole}-dashboard` : \"/dashboard\";\n    setLocation(roleBasedDashboard);\n  };\n\n  const handleGlobalFilterChange = (newGlobalFilters: { country?: string; sector?: string }) => {\n    setGlobalFilters(newGlobalFilters);\n  };\n\n  const handleQuickFilter = (filter: string) => {\n    let quickFilterParams: Partial<SearchFilters> = {};\n    \n    switch (filter) {\n      case \"Luxury Residential\":\n        quickFilterParams = { projectType: \"Residential\", isLuxury: true };\n        break;\n      case \"High ROI Projects\":\n        quickFilterParams = { minInvestment: 50 };\n        break;\n      case \"Waterfront Properties\":\n        quickFilterParams = { isWaterfront: true };\n        break;\n      case \"Off-Plan Projects\":\n        quickFilterParams = { status: \"Planning\" };\n        break;\n      case \"Ready to Move\":\n        quickFilterParams = { status: \"Completed\" };\n        break;\n    }\n    \n    setFilters(prev => ({ ...prev, ...quickFilterParams }));\n  };\n\n  if (isLoadingOptions) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Loading filter options...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Global Header Filter */}\n      <GlobalHeaderFilter \n        onFilterChange={handleGlobalFilterChange}\n        initialFilters={globalFilters}\n      />\n      \n      {/* Header */}\n      <div className=\"bg-white border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-slate-900\">Project Discovery</h1>\n              <p className=\"text-slate-600 mt-1\">Find projects that match your specific criteria</p>\n            </div>\n            {selectedRole && (\n              <div className=\"text-sm text-slate-500\">\n                Role: <span className=\"capitalize font-medium\">{selectedRole}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Search Filters */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2 text-blue-600\" />\n              Advanced Search Criteria\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div>\n                <Label>Project Type</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"projectType\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"All\">All Types</SelectItem>\n                    {filterOptions?.projectTypes.map(type => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>City</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"city\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Cities\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"All\">All Cities</SelectItem>\n                    {filterOptions?.cities.map(city => (\n                      <SelectItem key={city} value={city}>{city}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>District</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"district\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Districts\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"All\">All Districts</SelectItem>\n                    {filterOptions?.districts.map(district => (\n                      <SelectItem key={district} value={district}>{district}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Project Status</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"status\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"All\">All Status</SelectItem>\n                    {filterOptions?.statuses.map(status => (\n                      <SelectItem key={status} value={status}>{status}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Additional Filters */}\n            <div className=\"mt-6 grid md:grid-cols-3 gap-6\">\n              <div>\n                <Label>Investment Range (USD Millions)</Label>\n                <div className=\"flex space-x-2 mt-1\">\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Min\" \n                    onChange={(e) => handleFilterChange(\"minInvestment\", Number(e.target.value))}\n                  />\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Max\" \n                    onChange={(e) => handleFilterChange(\"maxInvestment\", Number(e.target.value))}\n                  />\n                </div>\n              </div>\n              <div>\n                <Label>Project Size (sq ft)</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"projectSize\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Any Size\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Any Size\">Any Size</SelectItem>\n                    <SelectItem value=\"under_50k\">{\"< 50,000\"}</SelectItem>\n                    <SelectItem value=\"50k_200k\">50,000 - 200,000</SelectItem>\n                    <SelectItem value=\"200k_500k\">200,000 - 500,000</SelectItem>\n                    <SelectItem value=\"500k_plus\">500,000+</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Completion Timeline</Label>\n                <Select onValueChange={(value) => handleFilterChange(\"completionTimeline\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Any Timeline\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Any Timeline\">Any Timeline</SelectItem>\n                    <SelectItem value=\"Within 1 Year\">Within 1 Year</SelectItem>\n                    <SelectItem value=\"1-2 Years\">1-2 Years</SelectItem>\n                    <SelectItem value=\"2-5 Years\">2-5 Years</SelectItem>\n                    <SelectItem value=\"5+ Years\">5+ Years</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Search Button */}\n            <div className=\"mt-8 flex justify-center\">\n              <Button size=\"lg\" onClick={handleSearch}>\n                <Search className=\"mr-2\" size={20} />\n                Find Projects\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Filters */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-md flex items-center\">\n              <Zap className=\"w-4 h-4 mr-2 text-orange-500\" />\n              Quick Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {quickFilters.map((filter) => (\n                <Badge\n                  key={filter}\n                  variant=\"secondary\"\n                  className=\"cursor-pointer hover:bg-primary hover:text-white transition-colors\"\n                  onClick={() => handleQuickFilter(filter)}\n                >\n                  {filter}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11232},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/investor-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Search, Download, FileSpreadsheet, Filter, X, TrendingUp } from \"lucide-react\";\nimport { Project, SearchFilters } from \"@shared/schema\";\nimport { FilterOptions } from \"@/lib/types\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Sector-specific project types\nconst sectorProjectTypes: Record<string, string[]> = {\n  \"Real Estate\": [\"Residential\", \"Commercial\", \"Mixed-Use\", \"Hospitality\"],\n  \"Infrastructure\": [\"Transportation\", \"Utilities\", \"Public Buildings\"],\n  \"Healthcare\": [\"Hospitals\", \"Clinics\", \"Medical Centers\"],\n  \"Oil & Gas\": [\"Refineries\", \"Pipelines\"],\n  \"Industry\": [\"Factories\", \"Warehousing\"]\n};\n\nexport default function InvestorDashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [selectedSector, setSelectedSector] = useState<string>(\"\");\n  const [selectedProjectType, setSelectedProjectType] = useState<string>(\"\");\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\n  const [selectedCity, setSelectedCity] = useState<string>(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState<string>(\"\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"\");\n  const [companyName, setCompanyName] = useState<string>(\"\");\n  const [investmentRange, setInvestmentRange] = useState<string>(\"\");\n\n  // Available project types based on selected sector\n  const availableProjectTypes = selectedSector ? sectorProjectTypes[selectedSector] || [] : [];\n\n  // Reset project type when sector changes, and city/district when country changes\n  useEffect(() => {\n    setSelectedProjectType(\"\");\n  }, [selectedSector]);\n\n  useEffect(() => {\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n  }, [selectedCountry]);\n\n  const handleFindInvestments = () => {\n    // Get investment range\n    let minValue, maxValue;\n    switch (investmentRange) {\n      case \"small\":\n        minValue = 0;\n        maxValue = 100; // $100M\n        break;\n      case \"medium\":\n        minValue = 100;\n        maxValue = 1000; // $100M - $1B\n        break;\n      case \"mega\":\n        minValue = 1000;\n        maxValue = undefined; // $1B+\n        break;\n      default:\n        minValue = undefined;\n        maxValue = undefined;\n    }\n\n    const investorFilters = {\n      sector: selectedSector || undefined,\n      projectType: selectedProjectType || undefined,\n      country: selectedCountry || undefined,\n      city: selectedCity || undefined,\n      district: selectedDistrict || undefined,\n      status: selectedStatus || undefined,\n      companyName: companyName || undefined,\n      minValue,\n      maxValue\n    };\n\n    // Save filters to localStorage for the results page\n    localStorage.setItem(\"investorFilters\", JSON.stringify(investorFilters));\n    \n    // Navigate to results page\n    setLocation(\"/investor-projects\");\n  };\n\n  const { data: filterOptions } = useQuery<FilterOptions>({\n    queryKey: [\"/api/filter-options\"],\n  });\n\n  const handleClearFilters = () => {\n    setSelectedSector(\"\");\n    setSelectedProjectType(\"\");\n    setSelectedCountry(\"\");\n    setSelectedCity(\"\");\n    setSelectedDistrict(\"\");\n    setSelectedStatus(\"\");\n    setCompanyName(\"\");\n    setInvestmentRange(\"\");\n  };\n\n  const activeFiltersCount = [\n    selectedSector, \n    selectedProjectType, \n    selectedCountry, \n    selectedCity, \n    selectedDistrict, \n    selectedStatus, \n    companyName, \n    investmentRange\n  ].filter(Boolean).length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/role-selection\")}\n                className=\"text-gray-600\"\n              >\n                ← Back to Role Selection\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Investor Dashboard</h1>\n                  <p className=\"text-gray-600\">Discover investment opportunities and analyze market potential</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Data\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Investment Report\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">High ROI Projects</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">247</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Search className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Available Opportunities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">89</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Filter className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Market Value</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">$12.4B</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Avg. Expected ROI</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">14.2%</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Investment Opportunity Filters */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                Investment Opportunity Filters\n              </CardTitle>\n              {activeFiltersCount > 0 && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleClearFilters}\n                  className=\"text-gray-600\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Clear All ({activeFiltersCount})\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {/* Sector Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Sector</label>\n                <Select value={selectedSector} onValueChange={setSelectedSector}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select sector\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Sectors</SelectItem>\n                    <SelectItem value=\"Real Estate\">Real Estate</SelectItem>\n                    <SelectItem value=\"Infrastructure\">Infrastructure</SelectItem>\n                    <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                    <SelectItem value=\"Oil & Gas\">Oil & Gas</SelectItem>\n                    <SelectItem value=\"Industry\">Industry</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Project Type Filter - Dynamic based on sector */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Project Type</label>\n                <Select \n                  value={selectedProjectType} \n                  onValueChange={setSelectedProjectType}\n                  disabled={!selectedSector || selectedSector === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedSector || selectedSector === \"all\" \n                        ? \"Select sector first\" \n                        : \"Select type\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {availableProjectTypes.map((type) => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Country Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Country</label>\n                <Select value={selectedCountry} onValueChange={setSelectedCountry}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select country\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Countries</SelectItem>\n                    {filterOptions?.countries?.map((country) => (\n                      <SelectItem key={country} value={country}>{country}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Project Status</label>\n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"Seeking Investment\">Seeking Investment</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Planning\">Planning</SelectItem>\n                    <SelectItem value=\"Pre-Construction\">Pre-Construction</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Second Row of Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mt-4\">\n              {/* City Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">City</label>\n                <Select \n                  value={selectedCity} \n                  onValueChange={setSelectedCity}\n                  disabled={!selectedCountry || selectedCountry === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedCountry || selectedCountry === \"all\" \n                        ? \"Select country first\" \n                        : \"Select city\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Cities</SelectItem>\n                    {(selectedCountry && selectedCountry !== \"all\" && filterOptions?.countryToCities?.[selectedCountry] \n                      ? filterOptions.countryToCities[selectedCountry]\n                      : filterOptions?.cities || []\n                    ).filter(city => city && city.trim() !== \"\").map((city) => (\n                      <SelectItem key={city} value={city}>{city}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* District Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">District</label>\n                <Select \n                  value={selectedDistrict} \n                  onValueChange={setSelectedDistrict}\n                  disabled={!selectedCity || selectedCity === \"all\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedCity || selectedCity === \"all\" \n                        ? \"Select city first\" \n                        : \"Select district\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {(selectedCity && selectedCity !== \"all\" && filterOptions?.cityToDistricts?.[selectedCity] \n                      ? filterOptions.cityToDistricts[selectedCity]\n                      : filterOptions?.districts || []\n                    ).filter(district => district && district.trim() !== \"\").map((district) => (\n                      <SelectItem key={district} value={district}>{district}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Company Name Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Developer/Company</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search developer...\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  className=\"w-full\"\n                />\n                <p className=\"text-xs text-gray-500\">Search by developer name</p>\n              </div>\n\n              {/* Investment Range Filter */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Investment Range</label>\n                <Select value={investmentRange} onValueChange={setInvestmentRange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Ranges</SelectItem>\n                    <SelectItem value=\"small\">Small Projects (Under $100M)</SelectItem>\n                    <SelectItem value=\"medium\">Medium Projects ($100M - $1B)</SelectItem>\n                    <SelectItem value=\"mega\">Mega Projects ($1B+)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Find Investments Button */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">&nbsp;</label>\n                <Button \n                  onClick={handleFindInvestments}\n                  className=\"w-full h-10 bg-green-600 hover:bg-green-700\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Find Investments\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Information Section */}\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <TrendingUp className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Ready to Discover Investment Opportunities?</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Use the filters above to search for investment opportunities and analyze market potential. \n              You can filter by sector, project type, location, developer, and investment range.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                <span>ROI analysis and market comparisons</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                <span>Location-based investment insights</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                <span>Investment range filtering and analysis</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18557},"client/src/pages/investor-projects.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Grid, List, Download, FileSpreadsheet, MapPin, DollarSign, TrendingUp, Building2, Target } from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function InvestorProjects() {\n  const [, setLocation] = useLocation();\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState(\"roi\");\n  const [filters, setFilters] = useState<any>({});\n\n  useEffect(() => {\n    const savedFilters = localStorage.getItem(\"investorFilters\");\n    if (savedFilters) {\n      setFilters(JSON.parse(savedFilters));\n    }\n  }, []);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const filteredProjects = projects.filter(project => {\n    if (filters.sector && filters.sector !== \"all\" && project.sector !== filters.sector) return false;\n    if (filters.projectType && filters.projectType !== \"all\" && project.projectType !== filters.projectType) return false;\n    if (filters.country && filters.country !== \"all\" && project.country !== filters.country) return false;\n    if (filters.city && filters.city !== \"all\" && project.city !== filters.city) return false;\n    if (filters.companyName && !project.name.toLowerCase().includes(filters.companyName.toLowerCase())) return false;\n    if (filters.minValue && project.investment < filters.minValue) return false;\n    if (filters.maxValue && project.investment > filters.maxValue) return false;\n    return true;\n  });\n\n  const sortedProjects = [...filteredProjects].sort((a, b) => {\n    switch (sortBy) {\n      case \"roi\":\n        return (b.expectedRoi || 0) - (a.expectedRoi || 0);\n      case \"value\":\n        return (b.investment || 0) - (a.investment || 0);\n      case \"name\":\n        return a.name.localeCompare(b.name);\n      default:\n        return 0;\n    }\n  });\n\n  const analytics = {\n    seekingInvestment: sortedProjects.filter(p => p.status === \"Seeking Investment\" || p.status === \"Planning\").length,\n    activeProjects: sortedProjects.filter(p => p.status === \"In Progress\").length,\n    avgRoi: sortedProjects.reduce((sum, p) => sum + (p.expectedRoi || 0), 0) / sortedProjects.length || 0,\n    totalValue: sortedProjects.reduce((sum, p) => sum + p.investment, 0)\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4 w-64\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/investor-dashboard\")}\n                className=\"text-gray-600\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Investment Opportunities</h1>\n                  <p className=\"text-gray-600\">Found {sortedProjects.length} matching opportunities</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Results\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Investment Report\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {sortedProjects.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No investment opportunities found</h3>\n              <p className=\"text-gray-600 mb-4\">Try adjusting your filters to find more opportunities.</p>\n              <Button variant=\"outline\" onClick={() => setLocation(\"/investor-dashboard\")}>\n                Adjust Filters\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Market Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-green-100 rounded-lg\">\n                      <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Seeking Investment</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{analytics.seekingInvestment}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      <Building2 className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Active Projects</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{analytics.activeProjects}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-purple-100 rounded-lg\">\n                      <Target className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Avg Expected ROI</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{analytics.avgRoi.toFixed(1)}%</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-orange-100 rounded-lg\">\n                      <DollarSign className=\"w-6 h-6 text-orange-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Total Market Value</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">${analytics.totalValue.toFixed(0)}M</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Results */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Investment Opportunities ({sortedProjects.length})\n                </h3>\n                <p className=\"text-gray-600\">Available investment opportunities and ROI analysis</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <select \n                  value={sortBy} \n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                >\n                  <option value=\"roi\">Sort by Expected ROI</option>\n                  <option value=\"value\">Sort by Investment Value</option>\n                  <option value=\"name\">Sort by Name</option>\n                </select>\n                <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    className=\"px-3\"\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    className=\"px-3\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Projects Grid/List */}\n            <div className={cn(\n              viewMode === \"grid\" \n                ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n                : \"space-y-4\"\n            )}>\n              {sortedProjects.map((project) => (\n                <Card key={project.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 line-clamp-1\">\n                        {project.name}\n                      </h3>\n                      <Badge variant={\n                        project.status === \"Seeking Investment\" ? \"default\" :\n                        project.status === \"In Progress\" ? \"secondary\" : \"outline\"\n                      }>\n                        {project.status}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n                      {project.description}\n                    </p>\n\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <MapPin className=\"w-4 h-4 mr-2\" />\n                        {project.city}, {project.country}\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <DollarSign className=\"w-4 h-4 mr-2\" />\n                        Investment: ${project.investment.toLocaleString()}M\n                      </div>\n                      {project.expectedRoi && (\n                        <div className=\"flex items-center text-sm text-green-600\">\n                          <TrendingUp className=\"w-4 h-4 mr-2\" />\n                          Expected ROI: {project.expectedRoi}%\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {project.sector}\n                      </Badge>\n                      {project.projectType && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {project.projectType}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <Button size=\"sm\" className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                        View Details\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Compare\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12960},"client/src/pages/project-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  ArrowLeft,\n  MapPin,\n  DollarSign,\n  Calendar,\n  Building,\n  TrendingUp,\n  Users,\n  Phone,\n  Mail,\n  Globe,\n  FileText,\n  Download,\n  Share2,\n  Star,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  BarChart3,\n  PieChart,\n  Target,\n  Award,\n  Briefcase,\n  ChevronDown,\n  ChevronUp,\n  Flag,\n  Edit,\n  MessageSquare,\n  History,\n  Info,\n  Home,\n  Shield,\n  Zap,\n} from \"lucide-react\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\n\ninterface ProjectDetails {\n  id: number;\n  name: string;\n  description: string;\n  sector: string;\n  subsector?: string;\n  projectType: string;\n  contractType?: string;\n  status: string;\n  city: string;\n  country: string;\n  district?: string;\n  investment: number;\n  expectedRoi?: number;\n  startDate: string;\n  completionDate: string;\n  capacity?: string;\n  residentialType?: string;\n  residentialClass?: string;\n  rating?: string;\n  category?: string;\n  value?: string;\n  briefBackground?: string;\n  owner: string;\n  developer: string;\n  contractor?: string;\n  consultant?: string;\n  supplier?: string;\n  totalUnits?: number;\n  builtUpArea?: string;\n  landArea?: string;\n  floors?: number;\n  riskLevel: string;\n  marketDemand: string;\n  competition: string;\n  permits: string[];\n  amenities: string[];\n  features: string[];\n  contactInfo: {\n    email: string;\n    phone: string;\n    website?: string;\n  };\n  financials: {\n    totalBudget: string;\n    spentToDate: string;\n    remainingBudget: string;\n    fundingSources: string[];\n  };\n  timeline: {\n    phase: string;\n    progress: number;\n    milestones: { name: string; date: string; status: string }[];\n  };\n  documents: {\n    name: string;\n    type: string;\n    size: string;\n    date: string;\n  }[];\n  landDetails?: {\n    availablePlots: number;\n    plotSizes: string;\n    landPrice: string;\n    developmentPotential: string;\n    zoningStatus: string;\n  };\n  demandGap?: {\n    level: string;\n    officeSpace: string;\n    residentialUnits: string;\n    retailSpace: string;\n    projectedDemand: string;\n  };\n  growthZone?: {\n    status: string;\n    growthRate: string;\n    infrastructure: string;\n    businessHub: string;\n    futureProjects: string;\n  };\n}\n\nexport default function ProjectProfile() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/project/:id\");\n  const [project, setProject] = useState<ProjectDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [userRole, setUserRole] = useState<string | null>(null);\n  const [navigationHistory, setNavigationHistory] = useState<string[]>([]);\n\n  // State for expandable sections and priority tags\n  const [expandedSections, setExpandedSections] = useState<{\n    [key: string]: boolean;\n  }>({\n    relationship: false,\n    businessNotes: false,\n    competitorAnalysis: false,\n  });\n  const [priorityTag, setPriorityTag] = useState<string>(\"Under Review\");\n\n  const toggleSection = (section: string) => {\n    setExpandedSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  useEffect(() => {\n    // Get user role from localStorage\n    const role = localStorage.getItem(\"selectedRole\");\n    setUserRole(role);\n\n    // Build the proper navigation history based on role and referrer\n    const buildNavigationHistory = (currentUserRole: string) => {\n      const history = [];\n\n      // Get role-specific paths\n      const getRoleSpecificPaths = (role: string) => {\n        switch (role) {\n          case \"investor\":\n            return {\n              resultsPage: \"/investor-projects\",\n              dashboard: \"/investor-dashboard\",\n              homepage: \"/\",\n            };\n          case \"contractor\":\n            return {\n              resultsPage: \"/contractor-projects\",\n              dashboard: \"/contractor-dashboard\",\n              homepage: \"/\",\n            };\n          case \"consultant\":\n            return {\n              resultsPage: \"/consultant-analysis\",\n              dashboard: \"/consultant-dashboard\",\n              homepage: \"/\",\n            };\n          case \"developer\":\n            return {\n              resultsPage: \"/developer-opportunities\",\n              dashboard: \"/developer-dashboard\",\n              homepage: \"/\",\n            };\n          case \"supplier\":\n            return {\n              resultsPage: \"/supplier-opportunities\",\n              dashboard: \"/supplier-dashboard\",\n              homepage: \"/\",\n            };\n          default:\n            return {\n              resultsPage: \"/search\",\n              dashboard: \"/dashboard\",\n              homepage: \"/\",\n            };\n        }\n      };\n\n      // Check where user came from\n      const previousPage =\n        sessionStorage.getItem(\"previousPage\") || document.referrer;\n\n      if (currentUserRole) {\n        const paths = getRoleSpecificPaths(currentUserRole);\n\n        // Always build the full navigation path: results → dashboard → homepage\n        // This ensures proper role-specific navigation regardless of entry point\n        history.push(paths.resultsPage);\n        history.push(paths.dashboard);\n        history.push(paths.homepage);\n      } else {\n        // No role: default navigation\n        history.push(\"/dashboard\");\n        history.push(\"/\");\n      }\n\n      return history;\n    };\n\n    if (role) {\n      const history = buildNavigationHistory(role);\n      setNavigationHistory(history);\n    }\n\n    if (params?.id) {\n      // Mock project data - different projects based on ID\n      const projectId = parseInt(params.id);\n      let mockProject: ProjectDetails;\n\n      // Define different projects based on ID\n      if (projectId === 1) {\n        mockProject = {\n          id: projectId,\n          name: \"Dubai Marina Tower\",\n          description:\n            \"A distinguished 45-story residential tower positioned at the heart of Dubai Marina, offering unobstructed waterfront views and direct access to the marina promenade. This architectural masterpiece combines luxury living with the vibrant marina lifestyle, featuring premium amenities and contemporary design tailored for discerning residents and investors.\",\n          sector: \"Real Estate\",\n          subsector: \"Luxury Residential\",\n          projectType: \"Residential Tower\",\n          contractType: \"Design-Build\",\n          status: \"Under Construction\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Dubai Marina\",\n          investment: 285,\n          expectedRoi: 18.5,\n          capacity: \"420 Units\",\n          residentialType: \"High-End Apartments\",\n          residentialClass: \"Ultra-Luxury\",\n          rating: \"5-Star\",\n          category: \"Premium Residential Development\",\n          value: \"$285 Million\",\n          startDate: \"2024-02-15\",\n          completionDate: \"Q3 2025\",\n          briefBackground:\n            \"Strategically located in the prestigious Dubai Marina district, this tower represents a landmark addition to the waterfront skyline. The development capitalizes on the area's transformation into a world-class residential and leisure destination, with direct marina access, proximity to JBR Beach, and integration with the Marina Walk retail and dining precinct. The project targets high-net-worth individuals seeking luxury waterfront living with exceptional rental yields and capital appreciation potential in Dubai's most dynamic residential market.\",\n          owner: \"Marina Holdings Limited\",\n          developer: \"Emaar Properties\",\n          contractor: \"Arabtec Construction\",\n          consultant: \"AECOM Middle East\",\n          supplier: \"Al Ghurair Iron & Steel\",\n          totalUnits: 420,\n          builtUpArea: \"95,000 sqm\",\n          landArea: \"15,000 sqm\",\n          floors: 45,\n          riskLevel: \"Low\",\n          marketDemand: \"Very High\",\n          competition: \"High\",\n          permits: [\n            \"Building Permit\",\n            \"Environmental Clearance\",\n            \"Fire Safety\",\n            \"Municipality Approval\",\n            \"Marine Authority Clearance\",\n          ],\n          amenities: [\n            \"Infinity Pool\",\n            \"Premium Gym\",\n            \"Spa & Wellness\",\n            \"24/7 Concierge\",\n            \"Valet Parking\",\n            \"Marina Club\",\n            \"Children's Play Area\",\n            \"Private Beach Access\",\n          ],\n          features: [\n            \"Marina Views\",\n            \"Private Beach Access\",\n            \"Smart Home Technology\",\n            \"Yacht Club Access\",\n            \"Private Balconies\",\n            \"Floor-to-Ceiling Windows\",\n          ],\n          contactInfo: {\n            email: \"info@dubaimarinatower.ae\",\n            phone: \"+971-4-567-8900\",\n            website: \"www.dubaimarinatower.ae\",\n          },\n          financials: {\n            totalBudget: \"$285M\",\n            spentToDate: \"$125M\",\n            remainingBudget: \"$160M\",\n            fundingSources: [\n              \"Bank Financing (55%)\",\n              \"Developer Equity (30%)\",\n              \"Pre-sales (15%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Construction Phase 2\",\n            progress: 45,\n            milestones: [\n              {\n                name: \"Foundation Complete\",\n                date: \"2024-06-15\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Structure Phase 1\",\n                date: \"2024-12-20\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Structure Phase 2\",\n                date: \"2025-04-15\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"MEP Installation\",\n                date: \"2025-08-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Interior Fit-out\",\n                date: \"2026-02-15\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Final Completion\",\n                date: \"2026-08-30\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Project Master Plan\",\n              type: \"PDF\",\n              size: \"15.2 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Financial Projections\",\n              type: \"Excel\",\n              size: \"2.8 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Environmental Impact\",\n              type: \"PDF\",\n              size: \"8.5 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Building Specifications\",\n              type: \"PDF\",\n              size: \"12.1 MB\",\n              date: \"2024-01-10\",\n            },\n          ],\n        };\n      } else if (projectId === 3) {\n        // Business Bay Commercial Development\n        mockProject = {\n          id: projectId,\n          name: \"Business Bay\",\n          description:\n            \"Premium mixed-use development strategically positioned in Dubai's central business district, featuring luxury residential towers, Grade A office spaces, and retail facilities. This landmark project capitalizes on the area's rapid transformation into a world-class financial and commercial hub.\",\n          sector: \"Real Estate\",\n          subsector: \"Mixed-Use Development\",\n          projectType: \"Mixed-Use Complex\",\n          contractType: \"Design-Build-Finance\",\n          status: \"Planning Phase\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Business Bay\",\n          investment: 520,\n          expectedRoi: 19.8,\n          capacity: \"2.5M sqft\",\n          rating: \"Grade A Development\",\n          category: \"Commercial Mixed-Use Development\",\n          value: \"$520 Million\",\n          startDate: \"2025-06-01\",\n          completionDate: \"Q4 2027\",\n          briefBackground:\n            \"Business Bay represents Dubai's next-generation commercial district with strategic positioning along Dubai Canal. The development addresses critical demand gaps in premium office space and luxury residential units while capitalizing on the area's designation as a growing financial zone. With 23 available land plots and medium demand gap levels, this location offers optimal development opportunities in an emerging growth zone with excellent connectivity to DIFC, Downtown Dubai, and Dubai International Airport.\",\n          owner: \"Bay Commercial Investments LLC\",\n          developer: \"Damac Properties\",\n          contractor: \"Bidding Phase\",\n          consultant: \"Arup Middle East\",\n          supplier: \"Bidding Phase\",\n          totalUnits: 450,\n          builtUpArea: \"235,000 sqm\",\n          landArea: \"28,500 sqm\",\n          floors: 55,\n          riskLevel: \"Medium\",\n          marketDemand: \"Very High\",\n          competition: \"High\",\n          permits: [\n            \"Planning Permission\",\n            \"Environmental Impact\",\n            \"Traffic Assessment\",\n            \"Fire Safety\",\n            \"DEWA Approval\",\n          ],\n          amenities: [\n            \"Business Center\",\n            \"Conference Facilities\",\n            \"Retail Mall\",\n            \"Restaurants\",\n            \"Fitness Center\",\n            \"Parking\",\n            \"Canal Views\",\n          ],\n          features: [\n            \"Canal Frontage\",\n            \"Metro Connectivity\",\n            \"Smart Building Technology\",\n            \"LEED Gold Certified\",\n            \"Mixed-Use Integration\",\n          ],\n          landDetails: {\n            availablePlots: 23,\n            plotSizes: \"2,000-8,500 sqm\",\n            landPrice: \"$1,650/sqm\",\n            developmentPotential: \"High-rise mixed-use\",\n            zoningStatus: \"Commercial/Residential Mixed-Use\",\n          },\n          demandGap: {\n            level: \"Medium\",\n            officeSpace: \"45% undersupplied\",\n            residentialUnits: \"30% undersupplied\",\n            retailSpace: \"20% undersupplied\",\n            projectedDemand: \"Growing 18% annually\",\n          },\n          growthZone: {\n            status: \"Growing\",\n            growthRate: \"22% over 3 years\",\n            infrastructure: \"Metro Line 2 connection\",\n            businessHub: \"Financial services cluster\",\n            futureProjects: \"12 major developments planned\",\n          },\n          contactInfo: {\n            email: \"development@businessbay.ae\",\n            phone: \"+971-4-432-1000\",\n            website: \"www.businessbaydubai.ae\",\n          },\n          financials: {\n            totalBudget: \"$520M\",\n            spentToDate: \"$25M\",\n            remainingBudget: \"$495M\",\n            fundingSources: [\n              \"Developer Equity (40%)\",\n              \"Bank Financing (45%)\",\n              \"Investment Partners (15%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Planning & Design\",\n            progress: 15,\n            milestones: [\n              {\n                name: \"Planning Approval\",\n                date: \"2025-04-30\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"Design Finalization\",\n                date: \"2025-08-15\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Construction Start\",\n                date: \"2025-10-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Structure Complete\",\n                date: \"2026-12-31\",\n                status: \"Planned\",\n              },\n              { name: \"Fit-out Phase\", date: \"2027-08-30\", status: \"Planned\" },\n              {\n                name: \"Project Completion\",\n                date: \"2027-12-15\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Master Development Plan\",\n              type: \"PDF\",\n              size: \"35.2 MB\",\n              date: \"2024-12-01\",\n            },\n            {\n              name: \"Land Analysis Report\",\n              type: \"PDF\",\n              size: \"18.8 MB\",\n              date: \"2024-11-15\",\n            },\n            {\n              name: \"Market Demand Study\",\n              type: \"PDF\",\n              size: \"22.5 MB\",\n              date: \"2024-11-20\",\n            },\n            {\n              name: \"Growth Zone Assessment\",\n              type: \"PDF\",\n              size: \"15.1 MB\",\n              date: \"2024-11-25\",\n            },\n          ],\n        };\n      } else if (projectId === 7) {\n        // Solar Power Plant project for contractors\n        mockProject = {\n          id: projectId,\n          name: \"Solar Power Plant\",\n          description:\n            \"Renewable energy facility with advanced solar technology providing clean energy to over 50,000 homes in Dubai.\",\n          sector: \"Energy\",\n          subsector: \"Renewable Energy\",\n          projectType: \"Solar Power Plant\",\n          contractType: \"EPC Contract\",\n          status: \"Tender Open\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Dubai South\",\n          investment: 320,\n          expectedRoi: 18.2,\n          capacity: \"200 MW\",\n          rating: \"Grid-Connected\",\n          category: \"Utility-Scale Solar Development\",\n          value: \"$320 Million\",\n          startDate: \"2025-01-15\",\n          completionDate: \"Q1 2027\",\n          briefBackground:\n            \"This utility-scale solar power plant will provide clean energy to over 50,000 homes in Dubai. The project includes advanced photovoltaic technology, energy storage systems, and smart grid integration. Contractors will be responsible for the complete EPC delivery including foundation work, structural installation, electrical systems, and grid connection.\",\n          owner: \"Green Energy Consortium\",\n          developer: \"Dubai Electricity & Water Authority\",\n          contractor: \"Bidding Open\",\n          consultant: \"AECOM Energy\",\n          supplier: \"Bidding Phase\",\n          totalUnits: 200000,\n          builtUpArea: \"500 hectares\",\n          landArea: \"500 hectares\",\n          floors: 1,\n          riskLevel: \"Medium\",\n          marketDemand: \"High\",\n          competition: \"High\",\n          permits: [\n            \"Environmental Clearance\",\n            \"Grid Connection Permit\",\n            \"Construction License\",\n            \"DEWA Approval\",\n          ],\n          amenities: [\n            \"Control Room\",\n            \"Maintenance Facility\",\n            \"Security Systems\",\n            \"Access Roads\",\n          ],\n          features: [\n            \"Solar Panels\",\n            \"Energy Storage\",\n            \"Smart Grid\",\n            \"Monitoring Systems\",\n            \"Automated Cleaning\",\n          ],\n          contactInfo: {\n            email: \"tenders@dewa.gov.ae\",\n            phone: \"+971-4-601-9999\",\n            website: \"www.dewa.gov.ae\",\n          },\n          financials: {\n            totalBudget: \"$320M\",\n            spentToDate: \"$0M\",\n            remainingBudget: \"$320M\",\n            fundingSources: [\n              \"Government Funding (70%)\",\n              \"Green Bonds (20%)\",\n              \"International Financing (10%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Tender Phase\",\n            progress: 5,\n            milestones: [\n              {\n                name: \"Tender Submission\",\n                date: \"2025-02-15\",\n                status: \"Planned\",\n              },\n              { name: \"Contract Award\", date: \"2025-04-01\", status: \"Planned\" },\n              {\n                name: \"Site Preparation\",\n                date: \"2025-06-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Foundation Work\",\n                date: \"2025-09-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Panel Installation\",\n                date: \"2026-03-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Grid Connection\",\n                date: \"2026-12-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Commercial Operation\",\n                date: \"2027-01-15\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"EPC Tender Documents\",\n              type: \"PDF\",\n              size: \"45.2 MB\",\n              date: \"2024-12-01\",\n            },\n            {\n              name: \"Technical Specifications\",\n              type: \"PDF\",\n              size: \"28.8 MB\",\n              date: \"2024-12-01\",\n            },\n            {\n              name: \"Environmental Assessment\",\n              type: \"PDF\",\n              size: \"18.5 MB\",\n              date: \"2024-11-15\",\n            },\n            {\n              name: \"Grid Connection Study\",\n              type: \"PDF\",\n              size: \"12.1 MB\",\n              date: \"2024-11-20\",\n            },\n          ],\n        };\n      } else if (projectId === 8) {\n        // Metro Extension project for contractors\n        mockProject = {\n          id: projectId,\n          name: \"Metro Extension Phase 3\",\n          description:\n            \"Advanced metro rail construction project connecting airport to city center with 15 new stations and 25 km of track.\",\n          sector: \"Infrastructure\",\n          subsector: \"Mass Transit\",\n          projectType: \"Metro Rail Construction\",\n          contractType: \"Design-Build-Finance\",\n          status: \"Under Construction\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Multi-District\",\n          investment: 680,\n          expectedRoi: 16.8,\n          capacity: \"85 km Track Length\",\n          rating: \"Fully Automated\",\n          category: \"Heavy Rail Transit System\",\n          value: \"$680 Million\",\n          startDate: \"2024-03-01\",\n          completionDate: \"Q4 2026\",\n          briefBackground:\n            \"Phase 3 of Dubai Metro extension includes 15 new stations and 25 km of elevated and underground track. This complex project requires expertise in tunnel boring, elevated construction, station architecture, and advanced rail systems. Contractors will handle civil works, structural steel, MEP systems, and track installation with strict safety and quality standards.\",\n          owner: \"Dubai Metro Infrastructure Company\",\n          developer: \"Roads and Transport Authority\",\n          contractor: \"Consolidated Contractors Company\",\n          consultant: \"Systra Engineering\",\n          supplier: \"Alstom Transportation\",\n          totalUnits: 15,\n          builtUpArea: \"25 km track\",\n          landArea: \"Various locations\",\n          floors: 0,\n          riskLevel: \"High\",\n          marketDemand: \"Critical\",\n          competition: \"Low\",\n          permits: [\n            \"Municipal Approvals\",\n            \"Traffic Management\",\n            \"Safety Clearances\",\n            \"Environmental Permits\",\n          ],\n          amenities: [\n            \"Station Facilities\",\n            \"Park & Ride\",\n            \"Retail Spaces\",\n            \"Maintenance Depot\",\n          ],\n          features: [\n            \"Underground Tunnels\",\n            \"Elevated Tracks\",\n            \"Modern Stations\",\n            \"Automated Systems\",\n            \"Platform Screen Doors\",\n          ],\n          contactInfo: {\n            email: \"projects@rta.ae\",\n            phone: \"+971-4-208-0808\",\n            website: \"www.rta.ae\",\n          },\n          financials: {\n            totalBudget: \"$680M\",\n            spentToDate: \"$280M\",\n            remainingBudget: \"$400M\",\n            fundingSources: [\n              \"Government Budget (80%)\",\n              \"Development Bank (15%)\",\n              \"PPP Financing (5%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Main Construction\",\n            progress: 45,\n            milestones: [\n              {\n                name: \"Tunnel Boring Complete\",\n                date: \"2024-08-15\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Elevated Structure Phase 1\",\n                date: \"2024-12-20\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Station Construction\",\n                date: \"2025-06-15\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"Track Installation\",\n                date: \"2025-10-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Systems Testing\",\n                date: \"2026-04-15\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Commercial Operation\",\n                date: \"2026-12-01\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Construction Specifications\",\n              type: \"PDF\",\n              size: \"65.2 MB\",\n              date: \"2024-02-15\",\n            },\n            {\n              name: \"Safety Management Plan\",\n              type: \"PDF\",\n              size: \"32.8 MB\",\n              date: \"2024-03-01\",\n            },\n            {\n              name: \"Traffic Management Study\",\n              type: \"PDF\",\n              size: \"24.5 MB\",\n              date: \"2024-02-20\",\n            },\n            {\n              name: \"Progress Reports\",\n              type: \"PDF\",\n              size: \"18.1 MB\",\n              date: \"2024-12-01\",\n            },\n          ],\n        };\n      } else if (projectId === 9) {\n        // Highway Bridge Construction\n        mockProject = {\n          id: projectId,\n          name: \"Highway Bridge Construction\",\n          description:\n            \"Major bridge infrastructure project connecting two emirates with advanced engineering\",\n          sector: \"Infrastructure\",\n          subsector: \"Transportation\",\n          projectType: \"Bridge Construction\",\n          contractType: \"Design-Build-Maintain\",\n          status: \"Under Construction\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Dubai Border\",\n          investment: 420,\n          expectedRoi: 15.8,\n          capacity: \"8-Lane Bridge\",\n          rating: \"Heavy Traffic\",\n          category: \"Major Infrastructure Project\",\n          value: \"$420 Million\",\n          startDate: \"2024-06-01\",\n          completionDate: \"Q2 2026\",\n          briefBackground:\n            \"This strategic bridge project will reduce traffic congestion between Dubai and Sharjah while providing a vital economic corridor. The 2.5km bridge features advanced seismic resistance, smart traffic management systems, and sustainable construction practices. Contractors must demonstrate expertise in marine construction, precast concrete, and complex logistics.\",\n          owner: \"Emirates Bridge Authority\",\n          developer: \"Roads and Transport Authority\",\n          contractor: \"Samsung C&T Corporation\",\n          consultant: \"AECOM Transportation\",\n          supplier: \"China State Construction\",\n          totalUnits: 1,\n          builtUpArea: \"2.5 km bridge\",\n          landArea: \"Marine environment\",\n          floors: 0,\n          riskLevel: \"High\",\n          marketDemand: \"Critical\",\n          competition: \"Low\",\n          permits: [\n            \"Marine Construction\",\n            \"Environmental Impact\",\n            \"Traffic Management\",\n            \"Safety Clearances\",\n          ],\n          amenities: [\n            \"Emergency Services\",\n            \"Maintenance Access\",\n            \"Traffic Control\",\n            \"Lighting Systems\",\n          ],\n          features: [\n            \"Seismic Resistant\",\n            \"Smart Traffic Systems\",\n            \"Marine Construction\",\n            \"Precast Concrete\",\n          ],\n          contactInfo: {\n            email: \"bridges@rta.ae\",\n            phone: \"+971-4-208-0808\",\n            website: \"www.rta.ae\",\n          },\n          financials: {\n            totalBudget: \"$420M\",\n            spentToDate: \"$180M\",\n            remainingBudget: \"$240M\",\n            fundingSources: [\"Government Budget (90%)\", \"Federal Grant (10%)\"],\n          },\n          timeline: {\n            phase: \"Main Construction\",\n            progress: 40,\n            milestones: [\n              {\n                name: \"Foundation Complete\",\n                date: \"2024-09-15\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Pier Construction\",\n                date: \"2025-02-28\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"Deck Installation\",\n                date: \"2025-08-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"System Integration\",\n                date: \"2026-01-15\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Traffic Opening\",\n                date: \"2026-04-30\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Bridge Design Plans\",\n              type: \"PDF\",\n              size: \"85.2 MB\",\n              date: \"2024-05-15\",\n            },\n            {\n              name: \"Marine Construction Specs\",\n              type: \"PDF\",\n              size: \"45.8 MB\",\n              date: \"2024-06-01\",\n            },\n            {\n              name: \"Safety Management Plan\",\n              type: \"PDF\",\n              size: \"28.5 MB\",\n              date: \"2024-06-01\",\n            },\n            {\n              name: \"Environmental Compliance\",\n              type: \"PDF\",\n              size: \"22.1 MB\",\n              date: \"2024-05-20\",\n            },\n          ],\n        };\n      } else if (projectId === 10) {\n        // Hospital Complex Al Khaleej\n        mockProject = {\n          id: projectId,\n          name: \"Hospital Complex Al Khaleej\",\n          description:\n            \"State-of-the-art medical facility with 500-bed capacity and specialized departments\",\n          sector: \"Healthcare\",\n          subsector: \"Medical Facilities\",\n          projectType: \"Hospital Construction\",\n          contractType: \"Traditional Contract\",\n          status: \"Tender Open\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Healthcare City\",\n          investment: 280,\n          expectedRoi: 12.5,\n          capacity: \"500 Beds\",\n          rating: \"Tier 1 Medical\",\n          category: \"Healthcare Infrastructure\",\n          value: \"$280 Million\",\n          startDate: \"2025-03-01\",\n          completionDate: \"Q4 2026\",\n          briefBackground:\n            \"Al Khaleej Hospital will be a comprehensive medical center featuring emergency care, surgery suites, ICU facilities, and specialized departments. The project requires expertise in medical construction standards, clean room environments, advanced MEP systems, and healthcare-specific infrastructure. Contractors must comply with strict medical facility regulations and international healthcare standards.\",\n          owner: \"Al Khaleej Medical Holdings\",\n          developer: \"Dubai Health Authority\",\n          contractor: \"Tender Phase\",\n          consultant: \"HDR Architecture\",\n          supplier: \"Tender Phase\",\n          totalUnits: 500,\n          builtUpArea: \"180,000 sqm\",\n          landArea: \"25,000 sqm\",\n          floors: 12,\n          riskLevel: \"Medium\",\n          marketDemand: \"High\",\n          competition: \"Medium\",\n          permits: [\n            \"Healthcare License\",\n            \"Building Permit\",\n            \"Fire Safety\",\n            \"Medical Equipment\",\n          ],\n          amenities: [\n            \"Emergency Department\",\n            \"Surgery Suites\",\n            \"ICU\",\n            \"Medical Imaging\",\n            \"Pharmacy\",\n          ],\n          features: [\n            \"Clean Room Construction\",\n            \"Medical Gas Systems\",\n            \"Emergency Power\",\n            \"Specialized HVAC\",\n          ],\n          contactInfo: {\n            email: \"projects@dha.gov.ae\",\n            phone: \"+971-4-814-0000\",\n            website: \"www.dha.gov.ae\",\n          },\n          financials: {\n            totalBudget: \"$280M\",\n            spentToDate: \"$0M\",\n            remainingBudget: \"$280M\",\n            fundingSources: [\n              \"Government Funding (80%)\",\n              \"Health Insurance (15%)\",\n              \"Private Investment (5%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Tender Phase\",\n            progress: 5,\n            milestones: [\n              {\n                name: \"Tender Submission\",\n                date: \"2025-02-28\",\n                status: \"Planned\",\n              },\n              { name: \"Contract Award\", date: \"2025-03-31\", status: \"Planned\" },\n              {\n                name: \"Site Preparation\",\n                date: \"2025-05-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Foundation Work\",\n                date: \"2025-08-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Structure Complete\",\n                date: \"2026-04-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"MEP Installation\",\n                date: \"2026-08-31\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Medical Fit-out\",\n                date: \"2026-11-30\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Tender Documents\",\n              type: \"PDF\",\n              size: \"125.2 MB\",\n              date: \"2024-12-15\",\n            },\n            {\n              name: \"Medical Standards\",\n              type: \"PDF\",\n              size: \"85.8 MB\",\n              date: \"2024-12-15\",\n            },\n            {\n              name: \"MEP Specifications\",\n              type: \"PDF\",\n              size: \"65.5 MB\",\n              date: \"2024-12-15\",\n            },\n            {\n              name: \"Healthcare Regulations\",\n              type: \"PDF\",\n              size: \"42.1 MB\",\n              date: \"2024-12-10\",\n            },\n          ],\n        };\n      } else if (projectId === 13) {\n        // Dubai Creek Harbour Residences\n        mockProject = {\n          id: projectId,\n          name: \"Dubai Creek Harbour Residences\",\n          description:\n            \"Waterfront residential development in Dubai Creek Harbour with marina access and luxury amenities\",\n          sector: \"Real Estate\",\n          subsector: \"Luxury Residential\",\n          projectType: \"Residential Complex\",\n          contractType: \"Design-Build\",\n          status: \"Pre-Construction\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Dubai Creek Harbour\",\n          investment: 320,\n          expectedRoi: 19.2,\n          capacity: \"580 Units\",\n          residentialType: \"Waterfront Apartments\",\n          residentialClass: \"Premium\",\n          rating: \"4-Star\",\n          category: \"Mixed-Use Waterfront Development\",\n          value: \"$320 Million\",\n          startDate: \"2025-02-01\",\n          completionDate: \"Q1 2026\",\n          briefBackground:\n            \"Dubai Creek Harbour Residences offers premium waterfront living with direct marina access and panoramic views of Dubai's skyline. The development features luxury amenities, sustainable design elements, and world-class facilities in one of Dubai's most prestigious waterfront communities.\",\n          owner: \"Creek Harbour Properties Ltd\",\n          developer: \"Dubai Creek Harbour Development Company\",\n          contractor: \"Emaar Construction\",\n          consultant: \"WSP Middle East\",\n          supplier: \"Premium Materials LLC\",\n          totalUnits: 580,\n          builtUpArea: \"1,200,000 sq ft\",\n          landArea: \"15 acres waterfront\",\n          floors: 42,\n          riskLevel: \"Medium\",\n          marketDemand: \"High\",\n          competition: \"Medium\",\n          permits: [\n            \"Marina Development Permit\",\n            \"Environmental Clearance\",\n            \"Construction License\",\n            \"Waterfront Access Rights\",\n          ],\n          features: [\n            \"Marina Access\",\n            \"Waterfront Views\",\n            \"Luxury Amenities\",\n            \"Sustainable Design\",\n            \"Premium Finishes\",\n            \"Community Facilities\",\n          ],\n          amenities: [\n            \"Private Marina\",\n            \"Infinity Pool\",\n            \"Spa & Wellness Center\",\n            \"Fine Dining\",\n            \"Retail Plaza\",\n            \"Landscaped Gardens\",\n          ],\n          contactInfo: {\n            email: \"info@dubaicreekharbour.ae\",\n            phone: \"+971-4-567-9200\",\n            website: \"www.dubaicreekharbour.ae\",\n          },\n          financials: {\n            totalBudget: \"$320M\",\n            spentToDate: \"$32M\",\n            remainingBudget: \"$288M\",\n            fundingSources: [\n              \"Developer Equity: 40%\",\n              \"Bank Financing: 45%\",\n              \"Pre-sales: 15%\",\n            ],\n          },\n          timeline: {\n            phase: \"Pre-Construction\",\n            progress: 10,\n            milestones: [\n              {\n                name: \"Final Approvals\",\n                date: \"2025-01-31\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"Site Preparation\",\n                date: \"2025-02-28\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Foundation Work\",\n                date: \"2025-05-01\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Structure Phase 1\",\n                date: \"2025-09-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"MEP Installation\",\n                date: \"2025-12-31\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Interior Fit-out\",\n                date: \"2026-02-28\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Project Completion\",\n                date: \"2026-03-31\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Master Development Plan\",\n              type: \"PDF\",\n              size: \"95.2 MB\",\n              date: \"2024-11-15\",\n            },\n            {\n              name: \"Marina Access Guidelines\",\n              type: \"PDF\",\n              size: \"45.8 MB\",\n              date: \"2024-12-01\",\n            },\n            {\n              name: \"Sustainability Report\",\n              type: \"PDF\",\n              size: \"28.5 MB\",\n              date: \"2024-11-20\",\n            },\n            {\n              name: \"Amenities Specifications\",\n              type: \"PDF\",\n              size: \"22.1 MB\",\n              date: \"2024-12-05\",\n            },\n          ],\n        };\n      } else {\n        // Default to Azure Residences for other IDs\n        mockProject = {\n          id: projectId,\n          name: \"Azure Residences\",\n          description:\n            \"Luxury residential development featuring modern amenities and sustainable design principles.\",\n          sector: \"Real Estate\",\n          subsector: \"Luxury Residential\",\n          projectType: \"Residential Tower\",\n          contractType: \"Design-Build\",\n          status: \"Under Construction\",\n          city: \"Dubai\",\n          country: \"United Arab Emirates\",\n          district: \"Downtown Dubai\",\n          investment: 450,\n          expectedRoi: 16.2,\n          capacity: \"320 Units\",\n          residentialType: \"High-End Apartments\",\n          residentialClass: \"Ultra-Luxury\",\n          rating: \"5-Star\",\n          category: \"Premium Residential Development\",\n          value: \"$450 Million\",\n          startDate: \"2024-01-15\",\n          completionDate: \"Q3 2025\",\n          briefBackground:\n            \"Azure Residences represents the pinnacle of luxury living in Downtown Dubai, featuring state-of-the-art amenities and world-class architectural design.\",\n          owner: \"Azure Residential Group\",\n          developer: \"Emaar Properties\",\n          contractor: \"Arabtec Construction\",\n          consultant: \"AECOM Middle East\",\n          supplier: \"Al Ghurair Iron & Steel\",\n          totalUnits: 240,\n          builtUpArea: \"85,000 sqm\",\n          landArea: \"12,500 sqm\",\n          floors: 32,\n          riskLevel: \"Low\",\n          marketDemand: \"High\",\n          competition: \"Medium\",\n          permits: [\n            \"Building Permit\",\n            \"Environmental Clearance\",\n            \"Fire Safety\",\n            \"Municipality Approval\",\n          ],\n          amenities: [\n            \"Swimming Pool\",\n            \"Gym\",\n            \"Spa\",\n            \"Concierge\",\n            \"Valet Parking\",\n            \"Sky Lounge\",\n            \"Children's Play Area\",\n          ],\n          features: [\n            \"Smart Home Technology\",\n            \"Energy Efficient\",\n            \"LEED Certified\",\n            \"Sea View\",\n            \"Private Balconies\",\n          ],\n          contactInfo: {\n            email: \"info@azureresidences.ae\",\n            phone: \"+971-4-123-4567\",\n            website: \"www.azureresidences.ae\",\n          },\n          financials: {\n            totalBudget: \"$450M\",\n            spentToDate: \"$240M\",\n            remainingBudget: \"$210M\",\n            fundingSources: [\n              \"Bank Financing (60%)\",\n              \"Developer Equity (25%)\",\n              \"Pre-sales (15%)\",\n            ],\n          },\n          timeline: {\n            phase: \"Construction Phase 2\",\n            progress: 55,\n            milestones: [\n              {\n                name: \"Foundation Complete\",\n                date: \"2024-06-15\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Structure Phase 1\",\n                date: \"2024-12-20\",\n                status: \"Completed\",\n              },\n              {\n                name: \"Structure Phase 2\",\n                date: \"2025-04-15\",\n                status: \"In Progress\",\n              },\n              {\n                name: \"MEP Installation\",\n                date: \"2025-08-30\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Interior Fit-out\",\n                date: \"2026-02-15\",\n                status: \"Planned\",\n              },\n              {\n                name: \"Final Completion\",\n                date: \"2026-08-30\",\n                status: \"Planned\",\n              },\n            ],\n          },\n          documents: [\n            {\n              name: \"Project Master Plan\",\n              type: \"PDF\",\n              size: \"15.2 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Financial Projections\",\n              type: \"Excel\",\n              size: \"2.8 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Environmental Impact\",\n              type: \"PDF\",\n              size: \"8.5 MB\",\n              date: \"2024-01-10\",\n            },\n            {\n              name: \"Building Specifications\",\n              type: \"PDF\",\n              size: \"12.1 MB\",\n              date: \"2024-01-10\",\n            },\n          ],\n        };\n      }\n\n      setProject(mockProject);\n      setLoading(false);\n    }\n  }, [params?.id]);\n\n  const handleBack = () => {\n    // First, try to get the previous page from sessionStorage\n    const previousPage = sessionStorage.getItem(\"previousPage\");\n    \n    if (previousPage && previousPage !== window.location.pathname) {\n      // Clear the previous page to avoid loops\n      sessionStorage.removeItem(\"previousPage\");\n      setLocation(previousPage);\n      return;\n    }\n\n    // Fallback: use role-specific navigation\n    const currentRole = localStorage.getItem(\"selectedRole\");\n    if (currentRole) {\n      const roleSpecificPages = {\n        investor: \"/investor-projects\",\n        contractor: \"/contractor-projects\", \n        consultant: \"/consultant-analysis\",\n        developer: \"/developer-opportunities\",\n        supplier: \"/supplier-opportunities\"\n      };\n      \n      const targetPage = roleSpecificPages[currentRole as keyof typeof roleSpecificPages];\n      if (targetPage) {\n        setLocation(targetPage);\n        return;\n      }\n    }\n\n    // Final fallback\n    setLocation(\"/\");\n  };\n\n  const getRoleSpecificTabs = () => {\n    const baseTabs = [\"overview\", \"financials\", \"timeline\"];\n\n    switch (userRole) {\n      case \"investor\":\n        return [\n          ...baseTabs,\n          \"analysis\",\n          \"roi-projections\",\n          \"market-comparison\",\n        ];\n      case \"contractor\":\n        return [...baseTabs, \"construction\", \"procurement\", \"timeline-details\"];\n      case \"consultant\":\n        return [\n          ...baseTabs,\n          \"market-analysis\",\n          \"feasibility\",\n          \"recommendations\",\n        ];\n      case \"developer\":\n        return [...baseTabs, \"development-plan\", \"zoning\", \"site-analysis\"];\n      case \"supplier\":\n        return [\n          ...baseTabs,\n          \"supply-opportunities\",\n          \"material-specs\",\n          \"procurement-schedule\",\n        ];\n      default:\n        return [...baseTabs, \"stakeholders\", \"documents\", \"analysis\"];\n    }\n  };\n\n  const getRoleColor = () => {\n    switch (userRole) {\n      case \"investor\":\n        return \"text-green-600\";\n      case \"contractor\":\n        return \"text-orange-600\";\n      case \"consultant\":\n        return \"text-blue-600\";\n      case \"developer\":\n        return \"text-purple-600\";\n      case \"supplier\":\n        return \"text-orange-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const getRoleIcon = () => {\n    switch (userRole) {\n      case \"investor\":\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case \"contractor\":\n        return <Building className=\"w-5 h-5\" />;\n      case \"consultant\":\n        return <BarChart3 className=\"w-5 h-5\" />;\n      case \"developer\":\n        return <Target className=\"w-5 h-5\" />;\n      case \"supplier\":\n        return <Briefcase className=\"w-5 h-5\" />;\n      default:\n        return <Building className=\"w-5 h-5\" />;\n    }\n  };\n\n  const toggleFavorite = () => {\n    setIsFavorite(!isFavorite);\n  };\n\n  const handleShare = () => {\n    navigator.clipboard.writeText(window.location.href);\n    // In real app, show toast notification\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Completed\":\n        return \"bg-green-100 text-green-700\";\n      case \"Under Construction\":\n        return \"bg-blue-100 text-blue-700\";\n      case \"In Progress\":\n        return \"bg-yellow-100 text-yellow-700\";\n      case \"Planned\":\n        return \"bg-gray-100 text-gray-700\";\n      case \"On Hold\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case \"Low\":\n        return \"text-green-600\";\n      case \"Medium\":\n        return \"text-yellow-600\";\n      case \"High\":\n        return \"text-red-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading project details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Project Not Found\n          </h2>\n          <p className=\"text-gray-600 mb-4\">\n            The requested project could not be found.\n          </p>\n          <Button onClick={handleBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Button\n                variant=\"ghost\"\n                onClick={handleBack}\n                className=\"text-gray-600 hover:text-gray-900 px-3 py-2\"\n              >\n                <ArrowLeft className=\"w-5 h-5 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center space-x-4\">\n                <div\n                  className={`w-14 h-14 rounded-xl flex items-center justify-center shadow-sm ${\n                    userRole === \"investor\"\n                      ? \"bg-green-100\"\n                      : userRole === \"contractor\"\n                        ? \"bg-orange-100\"\n                        : userRole === \"consultant\"\n                          ? \"bg-blue-100\"\n                          : userRole === \"developer\"\n                            ? \"bg-purple-100\"\n                            : userRole === \"supplier\"\n                              ? \"bg-orange-100\"\n                              : \"bg-blue-100\"\n                  }`}\n                >\n                  <div className={getRoleColor()}>{getRoleIcon()}</div>\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {project.name}\n                  </h1>\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"flex items-center text-gray-600\">\n                      <MapPin className=\"w-5 h-5 mr-2\" />\n                      <span className=\"font-medium text-lg\">\n                        {project.city}, {project.country}\n                      </span>\n                    </div>\n                    <Badge\n                      className={`${getStatusColor(project.status)} px-3 py-1 text-base`}\n                    >\n                      {project.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={toggleFavorite}\n                className=\"px-4 py-2\"\n              >\n                <Star\n                  className={`w-4 h-4 mr-2 ${isFavorite ? \"fill-yellow-400 text-yellow-400\" : \"\"}`}\n                />\n                {isFavorite ? \"Favorited\" : \"Add to Favorites\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleShare}\n                className=\"px-4 py-2\"\n              >\n                <Share2 className=\"w-4 h-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"px-4 py-2\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Details\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10\">\n        {/* Key Project Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-10\">\n          <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-xl\">\n                  <DollarSign className=\"w-7 h-7 text-green-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                    Total Investment\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    ${project.investment}M\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-xl\">\n                  <TrendingUp className=\"w-7 h-7 text-blue-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                    Expected ROI\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {project.expectedRoi}%\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-purple-100 rounded-xl\">\n                  <Clock className=\"w-7 h-7 text-purple-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                    Project Progress\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {project.timeline.progress}%\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-orange-100 rounded-xl\">\n                  <AlertTriangle\n                    className={`w-7 h-7 ${getRiskColor(project.riskLevel)}`}\n                  />\n                </div>\n                <div className=\"ml-5\">\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                    Risk Level\n                  </p>\n                  <p\n                    className={`text-2xl font-bold ${getRiskColor(project.riskLevel)}`}\n                  >\n                    {project.riskLevel}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n          <TabsList\n            className={`grid w-full grid-cols-${getRoleSpecificTabs().length} h-12 rounded-xl bg-gray-100 p-1`}\n          >\n            {getRoleSpecificTabs().map((tab) => (\n              <TabsTrigger\n                key={tab}\n                value={tab}\n                className=\"rounded-lg font-medium\"\n              >\n                {tab\n                  .split(\"-\")\n                  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n                  .join(\" \")}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Project Description\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-gray-700 mb-8 leading-relaxed\">\n                    {project.description}\n                  </p>\n\n                  {/* Basic Information - First module under description */}\n                  <div className=\"mb-12\">\n                    <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                      <FileText className=\"w-5 h-5 mr-3 text-gray-600\" />\n                      Basic Information\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Status:</span>\n                        <Badge className={getStatusColor(project.status)}>{project.status}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Sector:</span>\n                        <Badge variant=\"outline\">{project.sector}</Badge>\n                      </div>\n                      {project.subsector && (\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-gray-600 font-medium\">Subsector:</span>\n                          <span className=\"font-semibold text-gray-900\">{project.subsector}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Project Type:</span>\n                        <span className=\"font-semibold text-gray-900\">{project.projectType}</span>\n                      </div>\n                      {project.contractType && (\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-gray-600 font-medium\">Contract Type:</span>\n                          <span className=\"font-semibold text-gray-900\">{project.contractType}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Completion Date:</span>\n                        <span className=\"font-semibold text-gray-900\">{project.completionDate}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Owner - Separate section under Basic Information */}\n                  {project.owner && (\n                    <div className=\"mb-12\">\n                      <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                        <Building className=\"w-5 h-5 mr-3 text-blue-600\" />\n                        Project Owner\n                      </h4>\n                      <div className=\"bg-gray-50 border-l-4 border-l-cyan-600 border border-gray-200 rounded-lg p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-gray-600 font-medium\">Owner:</span>\n                          <span className=\"font-semibold text-gray-900\">{project.owner}</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Project Background */}\n                  {project.briefBackground && project.status !== \"Under Construction\" && (\n                    <div className=\"mb-8 p-6 bg-blue-50 rounded-xl border border-blue-100\">\n                      <p className=\"text-sm text-gray-700 leading-relaxed\">\n                        {project.briefBackground}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Related Companies - Only for Under Construction projects - Before Location & Scale */}\n                  {project.status === \"Under Construction\" && (\n                    <div className=\"mb-12\">\n                      <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                        <Briefcase className=\"w-5 h-5 mr-3 text-blue-600\" />\n                        Related Companies\n                      </h4>\n                      <div className=\"bg-gray-50 border-l-4 border-l-cyan-600 border border-gray-200 rounded-lg p-6\">\n                        <div className=\"space-y-4\">\n                          {project.developer && (\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-gray-600 font-medium\">Developer:</span>\n                              <span className=\"font-semibold text-gray-900\">{project.developer}</span>\n                            </div>\n                          )}\n                          {project.contractor && (\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-gray-600 font-medium\">Contractor:</span>\n                              <span className=\"font-semibold text-gray-900\">{project.contractor}</span>\n                            </div>\n                          )}\n                          {project.consultant && (\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-gray-600 font-medium\">Consultant:</span>\n                              <span className=\"font-semibold text-gray-900\">{project.consultant}</span>\n                            </div>\n                          )}\n                          {project.supplier && (\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-gray-600 font-medium\">Supplier:</span>\n                              <span className=\"font-semibold text-gray-900\">{project.supplier}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Location & Scale with Map */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 mb-8\">\n                    {/* Location & Scale */}\n                    <div className=\"space-y-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                        <MapPin className=\"w-5 h-5 mr-3 text-red-500\" />\n                        Location & Scale\n                      </h4>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-start\">\n                          <span className=\"text-gray-600 font-medium w-24 flex-shrink-0\">Country:</span>\n                          <span className=\"font-semibold text-gray-900 ml-2\">{project.country}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-gray-600 font-medium w-24 flex-shrink-0\">City:</span>\n                          <span className=\"font-semibold text-gray-900 ml-2\">{project.city}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-gray-600 font-medium w-24 flex-shrink-0\">District:</span>\n                          <span className=\"font-semibold text-gray-900 ml-2\">{project.district}</span>\n                        </div>\n                        {project.capacity && (\n                          <div className=\"flex items-center\">\n                            <span className=\"text-gray-600 font-medium w-24 flex-shrink-0\">Capacity:</span>\n                            <span className=\"font-semibold text-gray-900 ml-2\">{project.capacity}</span>\n                          </div>\n                        )}\n                        {project.value && (\n                          <div className=\"flex items-center\">\n                            <span className=\"text-gray-600 font-medium w-24 flex-shrink-0\">Total Value:</span>\n                            <span className=\"font-semibold text-green-600 ml-2\">{project.value}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Satellite Map View */}\n                    <div className=\"space-y-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                        <svg\n                          className=\"w-5 h-5 mr-3 text-blue-600\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\"\n                          />\n                        </svg>\n                        Satellite View\n                      </h4>\n                      <div className=\"bg-gray-50 rounded-xl border border-gray-200 overflow-hidden shadow-sm\">\n                        <div className=\"relative h-64 bg-gradient-to-br from-blue-100 via-green-100 to-blue-50\">\n                          {/* Simple terrain pattern */}\n                          <div className=\"absolute inset-0 opacity-40\">\n                            <div className=\"absolute top-12 left-8 w-16 h-12 bg-green-300 rounded-lg\"></div>\n                            <div className=\"absolute top-20 right-12 w-12 h-8 bg-blue-300 rounded-lg\"></div>\n                            <div className=\"absolute bottom-16 left-16 w-20 h-10 bg-green-200 rounded-lg\"></div>\n                            <div className=\"absolute bottom-8 right-8 w-14 h-14 bg-gray-300 rounded-lg\"></div>\n                          </div>\n\n                          {/* Location info */}\n                          <div className=\"absolute top-4 left-4 bg-white/90 backdrop-blur px-3 py-2 rounded-lg shadow-sm\">\n                            <p className=\"text-sm font-medium text-gray-800\">\n                              {project.city}, {project.country}\n                            </p>\n                          </div>\n\n                          {/* Simple project marker */}\n                          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                            <div className=\"w-6 h-6 bg-red-500 rounded-full border-2 border-white shadow-lg\"></div>\n                          </div>\n\n                          {/* Simple controls */}\n                          <div className=\"absolute top-4 right-4 bg-white/90 backdrop-blur rounded-lg shadow-sm\">\n                            <button className=\"p-2 text-gray-600 hover:text-gray-800\">\n                              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                              </svg>\n                            </button>\n                          </div>\n\n                          {/* Scale */}\n                          <div className=\"absolute bottom-4 left-4 bg-white/90 backdrop-blur px-3 py-2 rounded-lg shadow-sm\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-0.5 bg-gray-800\"></div>\n                              <span className=\"text-xs text-gray-800\">1 km</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n\n\n\n                </CardContent>\n              </Card>\n\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Project Features\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                        <Zap className=\"w-5 h-5 mr-3 text-yellow-500\" />\n                        Key Features\n                      </h4>\n                      <div className=\"flex flex-wrap gap-3\">\n                        {project.features.map((feature, index) => (\n                          <Badge\n                            key={index}\n                            variant=\"secondary\"\n                            className=\"text-sm px-3 py-1\"\n                          >\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                        <Star className=\"w-5 h-5 mr-3 text-purple-500\" />\n                        Amenities\n                      </h4>\n                      <div className=\"flex flex-wrap gap-3\">\n                        {project.amenities.map((amenity, index) => (\n                          <Badge\n                            key={index}\n                            variant=\"outline\"\n                            className=\"text-sm px-3 py-1\"\n                          >\n                            {amenity}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Combined Project & Residential Details */}\n                    <div className=\"bg-gray-50 border-l-4 border-l-cyan-600 border border-gray-200 rounded-lg p-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-6 flex items-center\">\n                        <Building className=\"w-5 h-5 mr-3 text-gray-600\" />\n                        Project Details\n                      </h4>\n                      <div className=\"space-y-6\">\n                        {/* Project Details Section */}\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center py-2\">\n                            <span className=\"text-gray-600 font-medium w-24\">Total Units:</span>\n                            <span className=\"font-semibold text-gray-900\">{project.totalUnits}</span>\n                          </div>\n                          <div className=\"flex items-center py-2\">\n                            <span className=\"text-gray-600 font-medium w-24\">Built-up Area:</span>\n                            <span className=\"font-semibold text-gray-900\">{project.builtUpArea}</span>\n                          </div>\n                          <div className=\"flex items-center py-2\">\n                            <span className=\"text-gray-600 font-medium w-24\">Floors:</span>\n                            <span className=\"font-semibold text-gray-900\">{project.floors}</span>\n                          </div>\n                        </div>\n\n                        {/* Residential Details Section (if exists) */}\n                        {(project.residentialType ||\n                          project.residentialClass ||\n                          project.rating) && (\n                          <div>\n                            <div className=\"border-t border-gray-200 pt-4 mb-3\">\n                              <h5 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                                <Home className=\"w-4 h-4 mr-2 text-green-600\" />\n                                Residential Details\n                              </h5>\n                            </div>\n                            <div className=\"space-y-3\">\n                              {project.residentialType && (\n                                <div className=\"flex items-center py-2\">\n                                  <span className=\"text-gray-600 font-medium w-24\">Type:</span>\n                                  <span className=\"font-semibold text-gray-900\">{project.residentialType}</span>\n                                </div>\n                              )}\n                              {project.residentialClass && (\n                                <div className=\"flex items-center py-2\">\n                                  <span className=\"text-gray-600 font-medium w-24\">Class:</span>\n                                  <span className=\"font-semibold text-gray-900\">{project.residentialClass}</span>\n                                </div>\n                              )}\n                              {project.rating && (\n                                <div className=\"flex items-center py-2\">\n                                  <span className=\"text-gray-600 font-medium w-24\">Rating:</span>\n                                  <span className=\"font-semibold text-gray-900 flex items-center\">\n                                    <Star className=\"w-4 h-4 mr-2 text-yellow-500\" />\n                                    {project.rating}\n                                  </span>\n                                </div>\n                              )}\n                              {project.category && (\n                                <div className=\"flex items-center py-2\">\n                                  <span className=\"text-gray-600 font-medium w-24\">Category:</span>\n                                  <span className=\"font-semibold text-gray-900\">{project.category}</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Permits & Approvals - Under Project Details */}\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                        <Shield className=\"w-5 h-5 mr-3 text-green-600\" />\n                        Permits & Approvals\n                      </h4>\n                      <div className=\"space-y-3\">\n                        {project.permits.map((permit, index) => (\n                          <div key={index} className=\"flex items-center py-1\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                            <span className=\"text-sm text-gray-700 font-medium\">\n                              {permit}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n\n          </TabsContent>\n\n          {/* Financials Tab */}\n          <TabsContent value=\"financials\" className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Budget Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex justify-between items-center py-3\">\n                      <span className=\"text-gray-600 font-medium\">\n                        Total Budget:\n                      </span>\n                      <span className=\"text-xl font-bold text-gray-900\">\n                        {project.financials.totalBudget}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-3\">\n                      <span className=\"text-gray-600 font-medium\">\n                        Spent to Date:\n                      </span>\n                      <span className=\"text-lg font-semibold text-blue-600\">\n                        {project.financials.spentToDate}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-3\">\n                      <span className=\"text-gray-600 font-medium\">\n                        Remaining Budget:\n                      </span>\n                      <span className=\"text-lg font-semibold text-green-600\">\n                        {project.financials.remainingBudget}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-4 mt-6\">\n                      <div\n                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-4 rounded-full shadow-sm\"\n                        style={{ width: `${(180 / 350) * 100}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"text-sm text-gray-600 text-center font-medium mt-3\">\n                      {Math.round((180 / 350) * 100)}% of budget utilized\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Funding Sources\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-4\">\n                    {project.financials.fundingSources.map((source, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center p-4 bg-gray-50 rounded-xl border border-gray-100 hover:bg-gray-100 transition-colors duration-200\"\n                      >\n                        <PieChart className=\"w-6 h-6 text-blue-600 mr-4\" />\n                        <span className=\"text-gray-700 font-medium\">\n                          {source}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Timeline Tab */}\n          <TabsContent value=\"timeline\" className=\"space-y-8\">\n            <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n              <CardHeader className=\"pb-6\">\n                <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                  Project Timeline & Milestones\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"mb-8\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <span className=\"text-sm font-semibold text-gray-700\">\n                      Current Phase: {project.timeline.phase}\n                    </span>\n                    <span className=\"text-sm font-semibold text-gray-700\">\n                      {project.timeline.progress}% Complete\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                    <div\n                      className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-3 rounded-full shadow-sm\"\n                      style={{ width: `${project.timeline.progress}%` }}\n                    ></div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-5\">\n                  {project.timeline.milestones.map((milestone, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center p-5 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-sm transition-all duration-200\"\n                    >\n                      <div className=\"mr-5\">\n                        {milestone.status === \"Completed\" && (\n                          <CheckCircle className=\"w-7 h-7 text-green-600\" />\n                        )}\n                        {milestone.status === \"In Progress\" && (\n                          <Clock className=\"w-7 h-7 text-blue-600\" />\n                        )}\n                        {milestone.status === \"Planned\" && (\n                          <Calendar className=\"w-7 h-7 text-gray-400\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">\n                          {milestone.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          Target Date:{\" \"}\n                          {new Date(milestone.date).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <Badge\n                        className={`${getStatusColor(milestone.status)} px-3 py-1`}\n                      >\n                        {milestone.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Stakeholders Tab */}\n          <TabsContent value=\"stakeholders\" className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Key Stakeholders\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-5\">\n                    <div className=\"flex items-center p-5 border border-blue-200 rounded-xl bg-blue-50 hover:bg-blue-100 transition-colors duration-200\">\n                      <Users className=\"w-7 h-7 text-blue-700 mr-4\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900 mb-1\">\n                          Project Owner\n                        </p>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          {project.owner}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center p-5 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-sm transition-all duration-200\">\n                      <Award className=\"w-7 h-7 text-blue-600 mr-4\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900 mb-1\">\n                          Developer\n                        </p>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          {project.developer}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center p-5 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-sm transition-all duration-200\">\n                      <Briefcase className=\"w-7 h-7 text-orange-600 mr-4\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900 mb-1\">\n                          Main Contractor\n                        </p>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          {project.contractor}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center p-5 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-sm transition-all duration-200\">\n                      <Target className=\"w-7 h-7 text-purple-600 mr-4\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900 mb-1\">\n                          Consultant\n                        </p>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          {project.consultant}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center p-5 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-sm transition-all duration-200\">\n                      <Building className=\"w-7 h-7 text-green-600 mr-4\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900 mb-1\">\n                          Main Supplier\n                        </p>\n                        <p className=\"text-sm text-gray-600 font-medium\">\n                          {project.supplier}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-6\">\n                  <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                    Contact Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center p-4 bg-gray-50 rounded-xl\">\n                      <Mail className=\"w-6 h-6 text-gray-500 mr-4\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600 font-medium mb-1\">\n                          Email\n                        </p>\n                        <p className=\"font-semibold text-blue-600\">\n                          {project.contactInfo.email}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center p-4 bg-gray-50 rounded-xl\">\n                      <Phone className=\"w-6 h-6 text-gray-500 mr-4\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600 font-medium mb-1\">\n                          Phone\n                        </p>\n                        <p className=\"font-semibold text-gray-900\">\n                          {project.contactInfo.phone}\n                        </p>\n                      </div>\n                    </div>\n                    {project.contactInfo.website && (\n                      <div className=\"flex items-center p-4 bg-gray-50 rounded-xl\">\n                        <Globe className=\"w-6 h-6 text-gray-500 mr-4\" />\n                        <div>\n                          <p className=\"text-sm text-gray-600 font-medium mb-1\">\n                            Website\n                          </p>\n                          <p className=\"font-semibold text-blue-600\">\n                            {project.contactInfo.website}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Documents Tab */}\n          <TabsContent value=\"documents\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Documents</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {project.documents.map((doc, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                    >\n                      <div className=\"flex items-center\">\n                        <FileText className=\"w-6 h-6 text-blue-600 mr-3\" />\n                        <div>\n                          <p className=\"font-medium text-gray-900\">\n                            {doc.name}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {doc.type} • {doc.size} • {doc.date}\n                          </p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analysis Tab */}\n          <TabsContent value=\"analysis\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Market Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Market Demand:</span>\n                      <Badge\n                        variant={\n                          project.marketDemand === \"High\"\n                            ? \"default\"\n                            : \"secondary\"\n                        }\n                      >\n                        {project.marketDemand}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Competition Level:</span>\n                      <Badge\n                        variant={\n                          project.competition === \"Low\"\n                            ? \"default\"\n                            : \"secondary\"\n                        }\n                      >\n                        {project.competition}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Location Rating:</span>\n                      <div className=\"flex items-center\">\n                        {[1, 2, 3, 4, 5].map((star) => (\n                          <Star\n                            key={star}\n                            className=\"w-4 h-4 fill-yellow-400 text-yellow-400\"\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Investment Metrics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">ROI Projection:</span>\n                      <span className=\"font-bold text-green-600\">\n                        {project.expectedRoi}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Payback Period:</span>\n                      <span className=\"font-medium\">5.4 years</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">IRR:</span>\n                      <span className=\"font-medium\">22.3%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">NPV:</span>\n                      <span className=\"font-bold text-green-600\">$85.2M</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Role-Specific Tabs */}\n          {userRole === \"investor\" && (\n            <>\n              <TabsContent value=\"roi-projections\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"w-5 h-5 text-green-600 mr-2\" />\n                      ROI Projections & Investment Analysis\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div className=\"text-center\">\n                        <p className=\"text-3xl font-bold text-green-600\">\n                          {project.expectedRoi}%\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Expected ROI</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-3xl font-bold text-blue-600\">\n                          5.4 yrs\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Payback Period</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-3xl font-bold text-purple-600\">\n                          $85.2M\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          Net Present Value\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"market-comparison\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Market Comparison Analysis</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-gray-600\">\n                          vs Similar Projects:\n                        </span>\n                        <Badge\n                          variant=\"default\"\n                          className=\"bg-green-100 text-green-700\"\n                        >\n                          +15% ROI\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Market Position:</span>\n                        <span className=\"font-medium text-green-600\">\n                          Top 10%\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </>\n          )}\n\n          {userRole === \"contractor\" && (\n            <>\n              <TabsContent value=\"construction\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Construction Specifications</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Contract Type:</span>\n                        <Badge variant=\"outline\">{project.contractType}</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Project Status:</span>\n                        <Badge className={getStatusColor(project.status)}>\n                          {project.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Built-up Area:</span>\n                        <span className=\"font-medium\">\n                          {project.builtUpArea}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Start Date:</span>\n                        <span className=\"font-medium\">\n                          {new Date(project.startDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Completion Date:</span>\n                        <span className=\"font-medium\">\n                          {project.completionDate}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Contract Value:</span>\n                        <span className=\"font-medium text-green-600\">\n                          ${project.investment}M\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"procurement\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Procurement Schedule</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"border-l-4 border-orange-500 pl-4\">\n                        <p className=\"font-medium\">Steel & Concrete</p>\n                        <p className=\"text-sm text-gray-600\">\n                          Q2 2025 - $45M procurement value\n                        </p>\n                      </div>\n                      <div className=\"border-l-4 border-blue-500 pl-4\">\n                        <p className=\"font-medium\">MEP Systems</p>\n                        <p className=\"text-sm text-gray-600\">\n                          Q3 2025 - $28M procurement value\n                        </p>\n                      </div>\n                      <div className=\"border-l-4 border-green-500 pl-4\">\n                        <p className=\"font-medium\">Finishing Materials</p>\n                        <p className=\"text-sm text-gray-600\">\n                          Q4 2025 - $32M procurement value\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"timeline-details\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Detailed Construction Timeline</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {project.timeline.milestones.map((milestone, idx) => (\n                        <div key={idx} className=\"flex items-center space-x-4\">\n                          <div\n                            className={`w-3 h-3 rounded-full ${\n                              milestone.status === \"Completed\"\n                                ? \"bg-green-500\"\n                                : milestone.status === \"In Progress\"\n                                  ? \"bg-orange-500\"\n                                  : \"bg-gray-300\"\n                            }`}\n                          />\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">{milestone.name}</p>\n                            <p className=\"text-sm text-gray-600\">\n                              {milestone.date}\n                            </p>\n                          </div>\n                          <Badge\n                            variant={\n                              milestone.status === \"Completed\"\n                                ? \"default\"\n                                : milestone.status === \"In Progress\"\n                                  ? \"secondary\"\n                                  : \"outline\"\n                            }\n                          >\n                            {milestone.status}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </>\n          )}\n\n          {/* Developer specific tabs */}\n          {userRole === \"developer\" && (\n            <>\n              <TabsContent value=\"development-plan\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Target className=\"w-5 h-5 text-purple-600\" />\n                      <span>Development Plan</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Project Type:</span>\n                        <Badge variant=\"outline\">{project.projectType}</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">\n                          Development Potential:\n                        </span>\n                        <span className=\"font-medium\">\n                          {project.landDetails?.developmentPotential ||\n                            \"Mixed-use development\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Zoning Status:</span>\n                        <Badge variant=\"secondary\">\n                          {project.landDetails?.zoningStatus ||\n                            \"Commercial/Residential\"}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Built-up Area:</span>\n                        <span className=\"font-medium\">\n                          {project.builtUpArea}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Land Area:</span>\n                        <span className=\"font-medium\">{project.landArea}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Total Floors:</span>\n                        <span className=\"font-medium\">{project.floors}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"zoning\" className=\"space-y-6\">\n                {project.landDetails && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <MapPin className=\"w-5 h-5 text-purple-600\" />\n                        <span>Land & Zoning Analysis</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">\n                            Available Plots:\n                          </span>\n                          <span className=\"font-bold text-purple-600\">\n                            {project.landDetails.availablePlots} plots\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Plot Sizes:</span>\n                          <span className=\"font-medium\">\n                            {project.landDetails.plotSizes}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Land Price:</span>\n                          <span className=\"font-medium text-green-600\">\n                            {project.landDetails.landPrice}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">\n                            Zoning Classification:\n                          </span>\n                          <Badge variant=\"outline\">\n                            {project.landDetails.zoningStatus}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">\n                            Development Rights:\n                          </span>\n                          <span className=\"font-medium\">\n                            {project.landDetails.developmentPotential}\n                          </span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"site-analysis\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {project.demandGap && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center space-x-2\">\n                          <BarChart3 className=\"w-5 h-5 text-purple-600\" />\n                          <span>Demand Gap Analysis</span>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">\n                              Demand Gap Level:\n                            </span>\n                            <Badge\n                              variant={\n                                project.demandGap.level === \"High\"\n                                  ? \"default\"\n                                  : \"secondary\"\n                              }\n                            >\n                              {project.demandGap.level}\n                            </Badge>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Office Space:</span>\n                            <span className=\"font-medium text-orange-600\">\n                              {project.demandGap.officeSpace}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">\n                              Residential Units:\n                            </span>\n                            <span className=\"font-medium text-blue-600\">\n                              {project.demandGap.residentialUnits}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Retail Space:</span>\n                            <span className=\"font-medium text-green-600\">\n                              {project.demandGap.retailSpace}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">\n                              Projected Growth:\n                            </span>\n                            <span className=\"font-bold text-purple-600\">\n                              {project.demandGap.projectedDemand}\n                            </span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {project.growthZone && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center space-x-2\">\n                          <TrendingUp className=\"w-5 h-5 text-purple-600\" />\n                          <span>Growth Zone Assessment</span>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Zone Status:</span>\n                            <Badge\n                              variant={\n                                project.growthZone.status === \"Growing\"\n                                  ? \"default\"\n                                  : \"secondary\"\n                              }\n                            >\n                              {project.growthZone.status}\n                            </Badge>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Growth Rate:</span>\n                            <span className=\"font-bold text-green-600\">\n                              {project.growthZone.growthRate}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">\n                              Infrastructure:\n                            </span>\n                            <span className=\"font-medium\">\n                              {project.growthZone.infrastructure}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Business Hub:</span>\n                            <span className=\"font-medium\">\n                              {project.growthZone.businessHub}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">\n                              Future Projects:\n                            </span>\n                            <span className=\"font-medium text-blue-600\">\n                              {project.growthZone.futureProjects}\n                            </span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n            </>\n          )}\n\n          {/* Default tabs for other roles */}\n          {(!userRole ||\n            ![\"investor\", \"contractor\", \"developer\"].includes(userRole)) && (\n            <>\n              <TabsContent value=\"stakeholders\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Key Stakeholders</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Developer</p>\n                        <p className=\"font-medium text-gray-900\">\n                          {project.developer}\n                        </p>\n                      </div>\n                      {project.contractor && (\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Contractor</p>\n                          <p className=\"font-medium text-gray-900\">\n                            {project.contractor}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"documents\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Project Documents</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {project.documents.map((doc, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                        >\n                          <div className=\"flex items-center\">\n                            <FileText className=\"w-6 h-6 text-blue-600 mr-3\" />\n                            <div>\n                              <p className=\"font-medium text-gray-900\">\n                                {doc.name}\n                              </p>\n                              <p className=\"text-sm text-gray-600\">\n                                {doc.type} • {doc.size} • {doc.date}\n                              </p>\n                            </div>\n                          </div>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"analysis\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Market Analysis</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Market Demand:</span>\n                          <Badge\n                            variant={\n                              project.marketDemand === \"High\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                          >\n                            {project.marketDemand}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">\n                            Competition Level:\n                          </span>\n                          <Badge\n                            variant={\n                              project.competition === \"Low\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                          >\n                            {project.competition}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Investment Metrics</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">ROI Projection:</span>\n                          <span className=\"font-bold text-green-600\">\n                            {project.expectedRoi}%\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Payback Period:</span>\n                          <span className=\"font-medium\">5.4 years</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </>\n          )}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":117037},"client/src/pages/developer-opportunities.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Download, \n  FileSpreadsheet, \n  FileText, \n  Presentation,\n  TrendingUp, \n  BarChart3, \n  MapPin,\n  Building2,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  ArrowLeft,\n  Construction,\n  DollarSign,\n  Users,\n  Clock,\n  Zap\n} from \"lucide-react\";\n\nexport default function DeveloperOpportunities() {\n  const [, setLocation] = useLocation();\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"12months\");\n  const [selectedDistrict, setSelectedDistrict] = useState(\"all\");\n\n  // Set previous page for navigation tracking\n  useEffect(() => {\n    sessionStorage.setItem('previousPage', window.location.pathname);\n  }, []);\n\n  // Handle location click to navigate to relevant project\n  const handleLocationClick = (locationName: string) => {\n    // Map locations to relevant project IDs for developers\n    const locationProjectMap: { [key: string]: number } = {\n      \"Dubai Marina\": 1, // Dubai Marina Tower\n      \"Business Bay\": 3, // Business Bay project\n      \"Dubai South\": 4, // Al Maktoum Logistics Hub\n      \"Downtown Dubai\": 2, // Azure Residences\n      \"Al Barsha\": 2, // Azure Residences (closest match)\n      \"Mohammed Bin Rashid City\": 4, // Al Maktoum Logistics Hub (closest match)\n      \"Jumeirah Village Circle\": 1, // Dubai Marina Tower (closest match)\n      \"Dubai Hills Estate\": 4 // Al Maktoum Logistics Hub (closest match)\n    };\n\n    const projectId = locationProjectMap[locationName] || 3;\n    // Set navigation tracking for proper back navigation\n    sessionStorage.setItem('previousPage', window.location.pathname);\n    setLocation(`/project/${projectId}`);\n  };\n\n  // Mock data for development opportunities\n  const opportunityStats = {\n    totalLandPlots: \"247\",\n    avgLandPrice: \"$1,250/sqm\",\n    primePlotsAvailable: \"89\",\n    avgDevCost: \"$850/sqm\"\n  };\n\n  const opportunityHeatmap = [\n    { area: \"Dubai Marina\", landAvailable: 12, demandGap: \"High\", growthZone: \"Mature\", status: \"Saturated\" },\n    { area: \"Business Bay\", landAvailable: 23, demandGap: \"Medium\", growthZone: \"Growing\", status: \"Moderate\" },\n    { area: \"Dubai South\", landAvailable: 45, demandGap: \"High\", growthZone: \"Emerging\", status: \"High Potential\" },\n    { area: \"Al Barsha\", landAvailable: 18, demandGap: \"Low\", growthZone: \"Stable\", status: \"Limited\" },\n    { area: \"Mohammed Bin Rashid City\", landAvailable: 67, demandGap: \"Very High\", growthZone: \"Emerging\", status: \"Prime\" },\n    { area: \"Jumeirah Village Circle\", landAvailable: 34, demandGap: \"Medium\", growthZone: \"Growing\", status: \"Good\" },\n    { area: \"Downtown Dubai\", landAvailable: 8, demandGap: \"Low\", growthZone: \"Mature\", status: \"Premium\" },\n    { area: \"Dubai Hills Estate\", landAvailable: 29, demandGap: \"High\", growthZone: \"Growing\", status: \"High Potential\" }\n  ];\n\n  const competitivePipeline = [\n    { \n      project: \"Emaar Beachfront Phase 3\", \n      developer: \"Emaar Properties\", \n      stage: \"Planning Phase\", \n      size: \"45 towers\", \n      completion: \"2027\",\n      type: \"Luxury Residential\",\n      district: \"Dubai Marina\"\n    },\n    { \n      project: \"Business Bay Central\", \n      developer: \"Damac Properties\", \n      stage: \"Under Construction\", \n      size: \"12 towers\", \n      completion: \"2026\",\n      type: \"Mixed-Use\",\n      district: \"Business Bay\"\n    },\n    { \n      project: \"Dubai South Logistics Hub\", \n      developer: \"Dubai World\", \n      stage: \"Land Available\", \n      size: \"2.5M sqm\", \n      completion: \"2028\",\n      type: \"Industrial\",\n      district: \"Dubai South\"\n    },\n    { \n      project: \"MBR City Residences\", \n      developer: \"Sobha Group\", \n      stage: \"Planning Phase\", \n      size: \"8 buildings\", \n      completion: \"2026\",\n      type: \"Mid-Range Residential\",\n      district: \"Mohammed Bin Rashid City\"\n    },\n    { \n      project: \"Al Barsha Medical Center\", \n      developer: \"Private Developer\", \n      stage: \"Under Construction\", \n      size: \"150,000 sqm\", \n      completion: \"2025\",\n      type: \"Healthcare\",\n      district: \"Al Barsha\"\n    }\n  ];\n\n  const marketGaps = [\n    {\n      district: \"Dubai Marina\",\n      gap: \"No nearby luxury retail\",\n      details: \"High-income residential area with 45,000+ residents but nearest premium shopping is 8km away\",\n      opportunity: \"Luxury Shopping Center\",\n      potential: \"$180M\",\n      urgency: \"High\",\n      competition: \"Low\"\n    },\n    {\n      district: \"Business Bay\",\n      gap: \"Office workers with limited residential supply\",\n      details: \"250+ office buildings with 150,000 workers but only 12% live within 5km radius\",\n      opportunity: \"Mid-Range Residential Complex\",\n      potential: \"$320M\",\n      urgency: \"Very High\",\n      competition: \"Medium\"\n    },\n    {\n      district: \"Dubai South\",\n      gap: \"Airport proximity logistics demand\",\n      details: \"Major airport expansion creating cargo demand but insufficient warehouse facilities\",\n      opportunity: \"Logistics & Warehouse Complex\",\n      potential: \"$450M\",\n      urgency: \"High\",\n      competition: \"Low\"\n    },\n    {\n      district: \"Mohammed Bin Rashid City\",\n      gap: \"Entertainment & leisure facilities\",\n      details: \"Growing residential community of 35,000+ with no major entertainment venues\",\n      opportunity: \"Entertainment Complex\",\n      potential: \"$220M\",\n      urgency: \"Medium\",\n      competition: \"Low\"\n    }\n  ];\n\n  const feasibilityData = [\n    { district: \"Dubai Marina\", landPrice: \"$1,850/sqm\", constructionCost: \"$950/sqm\", avgSelling: \"$3,200/sqm\", margin: \"14%\" },\n    { district: \"Business Bay\", landPrice: \"$1,450/sqm\", constructionCost: \"$850/sqm\", avgSelling: \"$2,800/sqm\", margin: \"18%\" },\n    { district: \"Dubai South\", landPrice: \"$680/sqm\", constructionCost: \"$750/sqm\", avgSelling: \"$1,950/sqm\", margin: \"26%\" },\n    { district: \"Al Barsha\", landPrice: \"$1,200/sqm\", constructionCost: \"$800/sqm\", avgSelling: \"$2,400/sqm\", margin: \"17%\" },\n    { district: \"Mohammed Bin Rashid City\", landPrice: \"$920/sqm\", constructionCost: \"$780/sqm\", avgSelling: \"$2,100/sqm\", margin: \"24%\" },\n    { district: \"Downtown Dubai\", landPrice: \"$2,400/sqm\", constructionCost: \"$1,100/sqm\", avgSelling: \"$4,500/sqm\", margin: \"22%\" }\n  ];\n\n  const underservedAlerts = [\n    {\n      zone: \"Dubailand\",\n      alert: \"No upcoming luxury hotel projects\",\n      description: \"Tourism hub with 45+ attractions but zero luxury hospitality developments in pipeline\",\n      opportunity: \"5-Star Resort Development\",\n      timeframe: \"18-month window\",\n      risk: \"Low\"\n    },\n    {\n      zone: \"Al Qusais\",\n      alert: \"Industrial zone with no worker accommodation\",\n      description: \"Major industrial area employing 28,000+ workers with nearest housing 12km away\",\n      opportunity: \"Worker Housing Complex\",\n      timeframe: \"24-month window\", \n      risk: \"Very Low\"\n    },\n    {\n      zone: \"Dubai Investment Park\",\n      alert: \"No premium healthcare facilities\",\n      description: \"Residential community of 85,000+ with only basic medical services available\",\n      opportunity: \"Specialized Medical Center\",\n      timeframe: \"12-month window\",\n      risk: \"Low\"\n    }\n  ];\n\n  const handleDownload = (format: string) => {\n    console.log(`Downloading ${format} development report...`);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Prime\": case \"High Potential\": return \"bg-green-500\";\n      case \"Good\": case \"Moderate\": return \"bg-blue-500\";\n      case \"Premium\": return \"bg-purple-500\";\n      case \"Limited\": return \"bg-orange-500\";\n      case \"Saturated\": return \"bg-red-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case \"Very High\": return \"text-red-600 bg-red-50\";\n      case \"High\": return \"text-orange-600 bg-orange-50\";\n      case \"Medium\": return \"text-yellow-600 bg-yellow-50\";\n      case \"Low\": return \"text-green-600 bg-green-50\";\n      default: return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case \"Land Available\": return \"text-green-600\";\n      case \"Planning Phase\": return \"text-blue-600\";\n      case \"Under Construction\": return \"text-orange-600\";\n      case \"Recently Completed\": return \"text-purple-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/developer-dashboard\")}\n                className=\"text-gray-600\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Filters\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Building2 className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Development Opportunities</h1>\n                  <p className=\"text-gray-600\">Land availability and market gap analysis</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Result\n              </Button>\n              <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"6months\">Next 6 Months</SelectItem>\n                  <SelectItem value=\"12months\">Next 12 Months</SelectItem>\n                  <SelectItem value=\"24months\">Next 24 Months</SelectItem>\n                  <SelectItem value=\"5years\">Next 5 Years</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Key Opportunity Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <MapPin className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Available Land Plots</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{opportunityStats.totalLandPlots}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Average Land Price</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{opportunityStats.avgLandPrice}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Target className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Prime Opportunities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{opportunityStats.primePlotsAvailable}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <Construction className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Avg Development Cost</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{opportunityStats.avgDevCost}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n\n\n\n\n        {/* Main Analysis Tabs */}\n        <Tabs defaultValue=\"heatmap\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"heatmap\">Opportunity Map</TabsTrigger>\n            <TabsTrigger value=\"pipeline\">Competitive Pipeline</TabsTrigger>\n            <TabsTrigger value=\"gaps\">Market Gaps</TabsTrigger>\n            <TabsTrigger value=\"feasibility\">Feasibility</TabsTrigger>\n            <TabsTrigger value=\"benchmarks\">Benchmarking</TabsTrigger>\n            <TabsTrigger value=\"alerts\">Underserved Zones</TabsTrigger>\n          </TabsList>\n\n          {/* Development Opportunity Heatmap */}\n          <TabsContent value=\"heatmap\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-5 h-5 text-purple-600\" />\n                  <span>Development Opportunity Heatmap</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center space-x-4 mb-4\">\n                    <span className=\"text-sm font-medium text-gray-700\">Opportunity Level:</span>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                        <span className=\"text-xs\">Prime</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                        <span className=\"text-xs\">Good</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                        <span className=\"text-xs\">Premium</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 bg-orange-500 rounded\"></div>\n                        <span className=\"text-xs\">Limited</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                        <span className=\"text-xs\">Saturated</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {opportunityHeatmap.map((location) => (\n                    <Card key={location.area} className=\"border-2 hover:bg-gray-50 transition-colors cursor-pointer\">\n                      <CardContent className=\"p-4\" onClick={() => handleLocationClick(location.area)}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <button \n                            className=\"font-semibold text-gray-900 hover:text-purple-600 text-left transition-colors\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              sessionStorage.setItem('previousPage', window.location.pathname);\n                              handleLocationClick(location.area);\n                            }}\n                          >\n                            {location.area}\n                          </button>\n                          <div className={`w-4 h-4 rounded ${getStatusColor(location.status)}`}></div>\n                        </div>\n                        <div className=\"space-y-1 text-sm\">\n                          <p><span className=\"text-gray-600\">Land Available:</span> {location.landAvailable} plots</p>\n                          <p><span className=\"text-gray-600\">Demand Gap:</span> {location.demandGap}</p>\n                          <p><span className=\"text-gray-600\">Growth Zone:</span> {location.growthZone}</p>\n                          <p><span className=\"text-gray-600\">Status:</span> {location.status}</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Competitive Pipeline */}\n          <TabsContent value=\"pipeline\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Construction className=\"w-5 h-5 text-purple-600\" />\n                  <span>Competitive Pipeline Dashboard</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4\">Project</th>\n                        <th className=\"text-left py-3 px-4\">Developer</th>\n                        <th className=\"text-left py-3 px-4\">Stage</th>\n                        <th className=\"text-left py-3 px-4\">Size</th>\n                        <th className=\"text-left py-3 px-4\">Completion</th>\n                        <th className=\"text-left py-3 px-4\">Type</th>\n                        <th className=\"text-left py-3 px-4\">District</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {competitivePipeline.map((project, index) => (\n                        <tr key={index} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"py-3 px-4 font-medium\">\n                            <button\n                              onClick={() => {\n                                // Map competitive projects to actual project IDs\n                                const projectMapping: Record<string, number> = {\n                                  \"Dubai Marina Tower\": 1,\n                                  \"Azure Residences\": 2,\n                                  \"Business Bay Tower\": 3,\n                                  \"Al Maktoum Logistics Hub\": 4,\n                                  \"The Towers Complex\": 1, // fallback to Dubai Marina Tower\n                                  \"Marina Heights\": 1, // fallback to Dubai Marina Tower\n                                  \"Bay View Residences\": 3, // fallback to Business Bay\n                                  \"Al Barsha Gardens\": 2, // fallback to Azure Residences\n                                  \"Mohammed Bin Rashid City\": 4, // fallback to Al Maktoum\n                                  \"The Creek Harbour\": 2, // fallback to Azure Residences\n                                };\n                                \n                                const projectId = projectMapping[project.project] || 1;\n                                sessionStorage.setItem('previousPage', window.location.pathname);\n                                setLocation(`/project/${projectId}`);\n                              }}\n                              className=\"text-left hover:text-purple-600 hover:underline transition-colors\"\n                            >\n                              {project.project}\n                            </button>\n                          </td>\n                          <td className=\"py-3 px-4\">{project.developer}</td>\n                          <td className=\"py-3 px-4\">\n                            <span className={`font-medium ${getStageColor(project.stage)}`}>\n                              {project.stage}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">{project.size}</td>\n                          <td className=\"py-3 px-4\">{project.completion}</td>\n                          <td className=\"py-3 px-4\">{project.type}</td>\n                          <td className=\"py-3 px-4\">{project.district}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"mt-6 p-4 bg-purple-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-purple-900 mb-2\">Pipeline Insights:</h4>\n                  <ul className=\"text-sm text-purple-800 space-y-1\">\n                    <li>• Dubai South showing highest development activity with major logistics projects</li>\n                    <li>• Business Bay reaching saturation point with 12 major projects in pipeline</li>\n                    <li>• Mohammed Bin Rashid City emerging as new residential growth hub</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Market Gaps */}\n          <TabsContent value=\"gaps\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-5 h-5 text-purple-600\" />\n                  <span>Market Gaps & Demand Indicators</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {marketGaps.map((gap, index) => (\n                    <div key={index} className=\"border rounded-lg p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{gap.gap}</h3>\n                            <Badge className={getUrgencyColor(gap.urgency)}>\n                              {gap.urgency} Urgency\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                            <span><MapPin className=\"w-4 h-4 inline mr-1\" />{gap.district}</span>\n                            <span><Users className=\"w-4 h-4 inline mr-1\" />Competition: {gap.competition}</span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-2xl font-bold text-green-600\">{gap.potential}</p>\n                          <p className=\"text-sm text-gray-500\">Market Potential</p>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mb-3\">{gap.details}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-sm text-green-700\">Recommended: {gap.opportunity}</span>\n                        </div>\n                        <Badge variant=\"outline\">\n                          {gap.competition} Competition\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Feasibility Analysis */}\n          <TabsContent value=\"feasibility\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"w-5 h-5 text-purple-600\" />\n                  <span>Feasibility Snapshot</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4\">District</th>\n                        <th className=\"text-left py-3 px-4\">Land Price</th>\n                        <th className=\"text-left py-3 px-4\">Construction Cost</th>\n                        <th className=\"text-left py-3 px-4\">Avg Selling Price</th>\n                        <th className=\"text-left py-3 px-4\">Est. Margin</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {feasibilityData.map((district) => (\n                        <tr key={district.district} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"py-3 px-4 font-medium\">{district.district}</td>\n                          <td className=\"py-3 px-4\">{district.landPrice}</td>\n                          <td className=\"py-3 px-4\">{district.constructionCost}</td>\n                          <td className=\"py-3 px-4\">{district.avgSelling}</td>\n                          <td className=\"py-3 px-4\">\n                            <span className=\"text-green-600 font-medium\">{district.margin}</span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"mt-6 p-4 bg-green-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-900 mb-2\">Feasibility Highlights:</h4>\n                  <ul className=\"text-sm text-green-800 space-y-1\">\n                    <li>• Dubai South offers highest margins (26%) with lower land costs</li>\n                    <li>• Mohammed Bin Rashid City shows strong 24% margin potential</li>\n                    <li>• Downtown Dubai commands premium pricing despite higher costs</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Project Benchmarking */}\n          <TabsContent value=\"benchmarks\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-600\" />\n                  <span>Project Benchmarking Tool</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <Target className=\"w-16 h-16 text-purple-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Compare Your Project</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Benchmark your intended project against existing developments in terms of \n                    size, price positioning, amenities, and delivery timeline.\n                  </p>\n                  <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                    Launch Benchmarking Tool\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Underserved Zone Alerts */}\n          <TabsContent value=\"alerts\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Zap className=\"w-5 h-5 text-purple-600\" />\n                  <span>Underserved Zone Alerts</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {underservedAlerts.map((alert, index) => (\n                    <div key={index} className=\"border rounded-lg p-6 bg-yellow-50 border-yellow-200\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{alert.alert}</h3>\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">\n                              {alert.risk} Risk\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                            <span><MapPin className=\"w-4 h-4 inline mr-1\" />{alert.zone}</span>\n                            <span><Clock className=\"w-4 h-4 inline mr-1\" />{alert.timeframe}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mb-3\">{alert.description}</p>\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm text-green-700 font-medium\">Greenfield Opportunity: {alert.opportunity}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":30364}}}